{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Accueil","text":""},{"location":"#presentation","title":"Pr\u00e9sentation","text":"<p>Bienvenue sur ACADEMY221, votre site d'apprentissage en ligne !</p> <p>Vous avez toujours voulu apprendre le langage Pyhton mais vous ne savez pas par o\u00f9 commencer ? Vous cherchez un moyen pratique et flexible d'acqu\u00e9rir de nouvelles comp\u00e9tences en informatique ? Notre programme d'apprentissage en ligne est fait pour vous !</p> <p>Nous vous offrons l'opportunit\u00e9 d'apprendre le langage Pyhton en ligne, \u00e0 votre propre rythme et \u00e0 partir de n'importe o\u00f9.</p>"},{"location":"#pourquoi-apprendre-le-langage-python","title":"Pourquoi apprendre le langage Python ?","text":"<p>Python est l'un des langages de programmation les plus populaires et polyvalents au monde, utilis\u00e9 dans de nombreux domaines tels que la science des donn\u00e9es, le d\u00e9veloppement Web, l'automatisation et bien d'autres.</p> <p>ACADEMY221 vise \u00e0 fournir aux participants une solide compr\u00e9hension de la programmation en Python, ainsi que les comp\u00e9tences n\u00e9cessaires pour utiliser ce langage de programmation de mani\u00e8re efficace et professionnelle.</p>"},{"location":"#ce-que-vous-apprendrez","title":"Ce que vous apprendrez","text":"<ul> <li>Comprendre les bases de la programmation avec Python</li> <li>Ma\u00eetriser la programmation orient\u00e9e objet et structurer vos programmes Python comme un professionnel.</li> <li>Automatiser vos donn\u00e9es \u00e0 partir de sites Web \u00e0 l'aide de biblioth\u00e8ques de grattage Web telles que BeautifulSoup et Selenium.</li> <li>Interagir avec les API REST</li> <li>Comprendre des sujets complexes tels que les d\u00e9corateurs, les algorithmes et la programmation asynchrone en Python.</li> <li>Cr\u00e9er des applications de bureau</li> <li>Cr\u00e9er des applications web avec Django ou Flask</li> <li>Exercices avec des propositions de solutions</li> </ul>"},{"location":"#conclusion","title":"Conclusion","text":"<p>Nous esp\u00e9rons que cette pr\u00e9sentation vous a donn\u00e9 un aper\u00e7u de ce que vous pouvez attendre de notre formation Python et que vous serez int\u00e9ress\u00e9(e) par la suite de cette aventure passionnante dans le monde de la programmation. Nous sommes impatients de vous accueillir dans notre programme et de vous aider \u00e0 atteindre vos objectifs de d\u00e9veloppement Python.</p>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Accueil</li> <li>Accessibilit\u00e9</li> <li>Algorithmes</li> <li>Blog</li> </ul>"},{"location":"Accessibilite/1-introduction/","title":"Introduction","text":""},{"location":"Accessibilite/1-introduction/#introduction","title":"Introduction","text":"<p>L'accessibilt\u00e9 num\u00e9rique est un sujet extr\u00eament important car elle garantit un acc\u00e8s inclusive au web et \u00e0 la technologie \u00e0 tous les individus.</p> <p>Ce sujet devient chaque ann\u00e9e plus important pour les gouvernements et les individus. Les donn\u00e9es actuelles indiquent que plus de 15% de la population mondiale, soit 1 milliard de personnes, souffrent d'une forme de handicap.</p> <p>Les entreprises se rendent compte qu'elles doivent int\u00e9grer la planification et l'audit de l'accessibilit\u00e9 dans tous leurs processus de conception et de d\u00e9veloppement afin de vraiment rendre accessible les pages web \u00e0 tous les utilisateurs.</p>"},{"location":"Accessibilite/1-introduction/#quest-ce-que-laccessibilite-web","title":"Qu'est-ce que l'accessibilit\u00e9 Web","text":"<p>Voir une vid\u00e9o de sept minutes avec des exemples de la fa\u00e7on dont l'accessibilit\u00e9 est essentielle pour les personnes en situation de handicaps  et utile pour tout le monde dans diverses situations.</p> <p></p> <p>L'accessibilit\u00e9 num\u00e9rique signifie que les sites Web, les outils et les technologies sont con\u00e7us et d\u00e9velopp\u00e9s de mani\u00e8re \u00e0 ce que les personnes handicap\u00e9es puissent les utiliser. Plus pr\u00e9cis\u00e9ment, les gens peuvent :</p> <ul> <li>percevoir, comprendre, naviguer et interagir avec le Web</li> <li>contribuer au Web</li> </ul>"},{"location":"Accessibilite/1-introduction/#les-differents-handicaps","title":"Les diff\u00e9rents handicaps","text":"<p>L'accessibilit\u00e9 du Web englobe tous les handicaps qui affectent l'acc\u00e8s au Web, y compris :</p> <ul> <li>auditif</li> <li>cognitif</li> <li>neurologique</li> <li>physique</li> <li>parole</li> <li>visuel</li> </ul>"},{"location":"Accessibilite/1-introduction/#les-utilisateurs","title":"Les utilisateurs","text":"<p>L'accessibilit\u00e9 num\u00e9rique profite \u00e9galement aux personnes non handicap\u00e9es, par exemple :</p> <ul> <li>les personnes utilisant des t\u00e9l\u00e9phones portables, des montres intelligentes, des t\u00e9l\u00e9viseurs intelligents et d'autres appareils avec de petits \u00e9crans, diff\u00e9rents modes de saisie, etc.</li> <li>les personnes \u00e2g\u00e9es dont les capacit\u00e9s changent en raison du vieillissement</li> <li>les personnes ayant des \"handicaps temporaires\" comme un bras cass\u00e9 ou des lunettes perdues</li> <li>les personnes ayant des \u00ablimitations situationnelles\u00bb, comme en plein soleil ou dans un environnement o\u00f9 elles ne peuvent pas \u00e9couter de l'audio</li> <li>les personnes utilisant une connexion Internet lente, ou qui ont une bande passante limit\u00e9e ou co\u00fbteuse.</li> </ul> <p>Naviguer sur le web et utiliser et utiliser un smartphone tactile en \u00e9tant malvoyant ou aveugle...</p> <p>Et si vous testiez ?</p> <p>Mettez-vous \u00e0 la place de l'utilisateur </p> <p>Le RGAA regroupe 106 crit\u00e8res de contr\u00f4le sous forme de 13 th\u00e9matiques :</p>"},{"location":"Accessibilite/2-historique/","title":"Histoire d'accessibilit\u00e9","text":""},{"location":"Accessibilite/2-historique/#histoire-daccessibilite","title":"Histoire d'accessibilit\u00e9","text":"<p>Il est essentiel de comprendre d'o\u00f9 nous venons pour bien comprendre les r\u00e9gles et pourquoi elles sont en place aujourd'hui.</p> <p>Les lignes directives pour l'accessibilit\u00e9 num\u00e9rique ont d\u00e9j\u00e0 bien plus de 20 ans sur la fa\u00e7on de cr\u00e9er des sites web accessibles.</p> <p>\u00c0 l'\u00e9poque, nous pensions aux outils d'accessible comme des lunettes, des appareils auditifs, des fauteuils roulants ou des cannes pour r\u00e9pondre aux besoins quotidiens.</p> <p>Aujourd'hui, pouvoir visiter et utiliser des sites web est une n\u00e9cessit\u00e9, il est donc de notre responsabilit\u00e9 en tant que concepteurs et d\u00e9veloppeurs de garantir tout le monde d'y acc\u00e9der et utiliser chaque page web. </p> <p>Nous allons abord\u00e9 l'historique de l'acc\u00e9ssibilit\u00e9 num\u00e9rique pour les Etat-Unis, l\u00e0 o\u00f9 tout \u00e0 commencer, ensuite nous allons voir la strat\u00e9gie de l'Union Europ\u00e9nne pour r\u00e9pondre aux attentes de l'accessibilit\u00e9 et en fin la publication du r\u00e9f\u00e9rentiel g\u00e9n\u00e9ral d\u2019am\u00e9lioration de l\u2019accessibilit\u00e9 (RGAA) par la direction interminist\u00e9rielle du num\u00e9rique.</p>"},{"location":"Accessibilite/2-historique/#les-etats-unis","title":"Les Etats-Unis","text":"<p>Dans les ann\u00e9es 80 et 90, les ordinateurs et le web en g\u00e9n\u00e9ral n'en \u00e9taient qu'\u00e0 leurs d\u00e9buts. </p> <p>La loi sur les Am\u00e9ricains handicap\u00e9s (ADA) est devenue loi en 1990. L'ADA est une loi sur les droits civils qui interdit la discrimination \u00e0 l'encontre des personnes handicap\u00e9es dans tous les domaines de la vie publique, y compris les emplois, les \u00e9coles, les transports et tous les lieux publics et priv\u00e9s ouverts au grand public. Le but de la loi est de s'assurer que les personnes handicap\u00e9es ont les m\u00eames droits et opportunit\u00e9s que tout le monde. L'ADA accorde aux personnes handicap\u00e9es des protections des droits civils similaires \u00e0 celles fournies aux individus sur la base de la race, de la couleur, du sexe, de l'origine nationale, de l'\u00e2ge et de la religion. Il garantit l'\u00e9galit\u00e9 des chances pour les personnes handicap\u00e9es dans les logements publics, l'emploi, les transports, les services gouvernementaux nationaux et locaux et les t\u00e9l\u00e9communications. L'ADA est divis\u00e9e en cinq titres (ou sections) qui se rapportent \u00e0 diff\u00e9rents domaines de la vie publique.</p> <p>Cette loi a contribu\u00e9 les bases de ce qui doit \u00eatre l\u00e9galement accessibile dans les espaces publics. En 1998 l'article 508 a \u00e9t\u00e9 modifi\u00e9, il a \u00e9largi le libell\u00e9 pour inclure \u00e9galement les produits num\u00e9riques.</p> <p>En 1998, le web devenait rapidement une n\u00e9cessit\u00e9 dans la vie de de tous les jours et les personnes en situation de handicapes \u00e9taient naturellement frustr\u00e9es de ne pas pouvoir y acceder facilement. Le minit\u00e8re de la justice Am\u00e9ricaine a d\u00e9cid\u00e9 que les sites web sont en effet consid\u00e9r\u00e9s comme des espaces publics et doivent respecter les m\u00eames normes d'accessibilit\u00e9 attendues dans les espaces physiques.</p> <p>L'ADA a laiss\u00e9 les tribunaux individuels d\u00e9cider des pousuites en mati\u00e8re d'accessibilit\u00e9. De nombreuses victoires dans des poursuites o\u00f9 les entreprises Am\u00e9ricaines n'ont pas fourni une exp\u00e9rience utilisateur accessible sur leur site web.</p> <p>En 1999, la premi\u00e8re version des WCAG ont \u00e9t\u00e9 publi\u00e9es qui comprenaient \u00e0 l'origine 14 directives que les d\u00e9veloppeurs doivent suivre lors de la cr\u00e9ation et de la conception de sites web.</p> <p>Non seulement cela a-t-il contribu\u00e9 \u00e0 sensibiliser \u00e0 la conception de sites web inclusifs mais cela a \u00e9galement fond\u00e9 les bases de la mani\u00e8re d'y parvenir ou du moins d'\u00eatre plus inclusifs que ce qui \u00e9tait auparavant consid\u00e9r\u00e9 comme la norme des sites web dans les ann\u00e9es 1990.</p> <p>La premi\u00e8re version comprenait des directives telles que la cr\u00e9ation de tableaux qui se transforment gracieusement pour assister les lecteurs d'\u00e9cran et assurer l'accessibilit\u00e9 directe des interfaces utilisateur int\u00e9gr\u00e9es afin que les pages puissent \u00eatre facilement pilot\u00e9es par un clavier.</p> <p>En 2018, pr\u00e8s de 10 ans plus tard, les WCAG 2.0 ont \u00e9t\u00e9 publi\u00e9s et c'\u00e9tait vraiement un tout nouvel ensemble de directives. En moins de 10 ans, le web avait compl\u00e9tement chang\u00e9 et les utilisateurs avaient besoin de nouvelles attentes sur ce que signigie la conception web inclusive.</p> <p>Les quatre principales des WCAG 2.0 tournaient autour de la fa\u00e7on dont le contenu doit \u00eatre perceptible, exploitable, compr\u00e9hensible et robuste.</p> <p>En 2018, 10 autres ann\u00e9es se sont \u00e9coul\u00e9es, WCAG 2.1 a \u00e9t\u00e9 publi\u00e9 avec des d\u00e9tails suppl\u00e9mentaires pour chaque norme.</p> <p>Encore une fois, parce que le monde et la technologie avaient tellement chang\u00e9, cette mise \u00e0 jour \u00e9tait absolument n\u00e9cessaire.</p> <p>Le WCAG 2.1 se concentrait sp\u00e9cifiquement sur l'apport de conseils sur l'accessibilit\u00e9 du web sur mobile ainsi que sur l'assistance aux utilisateurs souffrant de troubles visuels et cognitifs.</p> <p>Voir les recommandations WCAG 2.1 </p> <p>Le WCAG 2.2 devait sortir au milieu de 2021 et encore une fois, \u00e9tendre les orientations de 2.1. Pour chacune des directives, il existe trois niveaux de conformit\u00e9 et ils sont \u00e9tiquet\u00e9s Niveau A, Niveau AA et Niveau AAA. Chaque niveau sup\u00e9rieur inclut la conformit\u00e9 des niveaux inf\u00e9rieurs. C'est-\u00e0-dire que le Niveau AA comprend le niveau A et le niveau AAA contient le niveau AA. Le niveau A repr\u00e9sente le niveau de conformit\u00e9 le plus bas et inclut les fonctionnalit\u00e9s d'accessibilit\u00e9 num\u00e9rique les plus \u00e9l\u00e9mentaires. Chaque page sur internet doit respecter ce niveau de conformit\u00e9 de base. Le niveau AA repr\u00e9sente un niveau de conformit\u00e9 moyen et comprend les obstacles les plus importants et les plus courants pour les utilisateurs handicap\u00e9s.</p> <p>Le niveau AAA repr\u00e9sente le plus haut niveau de conformit\u00e9 et d'accessibilit\u00e9.</p> <p>Voila, ce qui a chang\u00e9 au cours des 30 derni\u00e8res ann\u00e9es, o\u00f9 nous sommes pass\u00e9s de l'absence de lignes directives pour les contenus num\u00e9riques \u00e0 des entreprises poursuivies pour ne pas avoir de sites web accessibles. On fait un tour en Europe et voir ce qui se passe en France. </p>"},{"location":"Accessibilite/2-historique/#lunion-europeenne","title":"L'Union Europ\u00e9enne","text":"<p>En mars 2021, la Commission europ\u00e9enne a adopt\u00e9 la strat\u00e9gie relative aux droits des personnes handicap\u00e9es 2021-2030. Avec cette strat\u00e9gie d\u00e9cennale, la Commission europ\u00e9enne souhaite am\u00e9liorer la vie des personnes handicap\u00e9es en Europe et dans le monde.</p> <p>L'objectif est de garantir que les personnes handicap\u00e9es en Europe, quels que soient leur sexe, leur origine raciale ou ethnique, leur religion ou leurs convictions, leur \u00e2ge ou leur orientation sexuelle :</p> <ul> <li>jouissent de leurs droits humains,</li> <li>avoir des chances \u00e9gales,</li> <li>ont un acc\u00e8s \u00e9gal \u00e0 participer \u00e0 la soci\u00e9t\u00e9 et \u00e0 l'\u00e9conomie,</li> <li>sont capables de d\u00e9cider o\u00f9, comment et avec qui ils vivent,</li> <li>peuvent se d\u00e9placer librement dans l'UE, quels que soient leurs besoins d'assistance,</li> <li>ne subissent plus de discrimination.</li> </ul> <p>L'une des initiatives phares, une base de connaissances fournissant des informations et de bonnes pratiques en mati\u00e8re d\u2019accessibilit\u00e9 dans tous les secteurs (d\u2019ici \u00e0 la fin de 2022).</p> <p>Strat\u00e9gie relative aux droits des personnes handicap\u00e9es 2021-2030 </p>"},{"location":"Accessibilite/2-historique/#la-france","title":"La France","text":"<p>Pour faciliter la mise en \u0153uvre de l\u2019accessibilit\u00e9 num\u00e9rique, la direction interminist\u00e9rielle du num\u00e9rique (DINUM) \u00e9dite depuis 2009 le r\u00e9f\u00e9rentiel g\u00e9n\u00e9ral d\u2019am\u00e9lioration de l\u2019accessibilit\u00e9 \u2013 RGAA, cr\u00e9\u00e9 pour mettre en \u0153uvre l\u2019article 47 de la loi handicap de 2005 et son d\u00e9cret d\u2019application actualis\u00e9 en 2019. Il fait r\u00e9guli\u00e8rement l\u2019objet de nouvelles versions et mises \u00e0 jour pour s\u2019adapter aux \u00e9volutions du Web mais aussi aux changements de normes et r\u00e9glementations.</p> <p>La version 4 du RGAA a \u00e9t\u00e9 arr\u00eat\u00e9e conjointement par la ministre charg\u00e9e des personnes handicap\u00e9es et le ministre charg\u00e9 du num\u00e9rique le 20 septembre 2019. </p> <p>Elle est structur\u00e9e en 2 parties. </p> <ul> <li>La premi\u00e8re pr\u00e9sente les obligations \u00e0 respecter : elle s\u2019adresse aux juristes, aux r\u00e9f\u00e9rents accessibilit\u00e9 num\u00e9rique, aux managers et \u00e0 tous les professionnels du web et de l\u2019accessibilit\u00e9. </li> <li>La deuxi\u00e8me contient une liste de crit\u00e8res pour v\u00e9rifier la conformit\u00e9 d\u2019une page web : elle s\u2019adresse aux auditeurs RGAA.</li> </ul> <p>Pour conserver une correspondance la plus correcte possible avec les normes europ\u00e9enne et internationale de r\u00e9f\u00e9rence en accessibilit\u00e9 num\u00e9rique, une version 4.1 du RGAA a \u00e9t\u00e9 publi\u00e9e le 16 f\u00e9vrier 2021. </p> <p>R\u00e9f\u00e9rentiel G\u00e9n\u00e9ral d\u2019Am\u00e9lioration de l\u2019Accessibilit\u00e9 </p>"},{"location":"Accessibilite/3-rgaa/","title":"RGAA","text":""},{"location":"Accessibilite/3-rgaa/#rgaa","title":"RGAA","text":"<p>Le RGAA est le r\u00e9f\u00e9rentiel g\u00e9n\u00e9ral d\u2019am\u00e9lioration de l\u2019accessibilit\u00e9, publi\u00e9 par la direction interminist\u00e9rielle du num\u00e9rique. Le RGAA regroupe les r\u00e9gles de mise en oeuvre et une m\u00e9thode de v\u00e9rification en 13 th\u00e9matiques et 106 crit\u00e8res.</p>"},{"location":"Accessibilite/3-rgaa/#106-criteres-de-rgaa","title":"106 crit\u00e8res de RGAA","text":""},{"location":"Accessibilite/3-rgaa/#1-images","title":"1. Images","text":"<ul> <li> <p>Chaque image porteuse d\u2019information a-t-elle une alternative textuelle ?  Tests et r\u00e9f\u00e9rences du crit\u00e8re 1.1</p> </li> <li> <p>Chaque image de d\u00e9coration est-elle correctement ignor\u00e9e par les technologies d\u2019assistance ? Tests et r\u00e9f\u00e9rences du crit\u00e8re 1.2</p> </li> <li> <p>Pour chaque image porteuse d\u2019information ayant une alternative textuelle, cette alternative est-elle pertinente (hors cas particuliers) ? Tests et r\u00e9f\u00e9rences du crit\u00e8re 1.3</p> </li> <li> <p>Pour chaque image utilis\u00e9e comme CAPTCHA ou comme image-test, ayant une alternative textuelle, cette alternative permet-elle d\u2019identifier la nature et la fonction de l\u2019image ? Tests et r\u00e9f\u00e9rences du crit\u00e8re 1.4</p> </li> <li> <p>Pour chaque image utilis\u00e9e comme CAPTCHA, une solution d\u2019acc\u00e8s alternatif au contenu ou \u00e0 la fonction du CAPTCHA est-elle pr\u00e9sente ? Tests et r\u00e9f\u00e9rences du crit\u00e8re 1.5</p> </li> <li> <p>Chaque image porteuse d\u2019information a-t-elle, si n\u00e9cessaire, une description d\u00e9taill\u00e9e ? Tests et r\u00e9f\u00e9rences du crit\u00e8re 1.6</p> </li> <li> <p>Pour chaque image porteuse d\u2019information ayant une description d\u00e9taill\u00e9e, cette description est-elle pertinente ?  Tests et r\u00e9f\u00e9rences du crit\u00e8re 1.7</p> </li> <li> <p>Chaque image texte porteuse d\u2019information, en l\u2019absence d\u2019un m\u00e9canisme de remplacement, doit si possible \u00eatre remplac\u00e9e par du texte styl\u00e9. Cette r\u00e8gle est-elle respect\u00e9e (hors cas particuliers) ? Tests et r\u00e9f\u00e9rences du crit\u00e8re 1.8</p> </li> <li> <p>Chaque l\u00e9gende d\u2019image est-elle, si n\u00e9cessaire, correctement reli\u00e9e \u00e0 l\u2019image correspondante ?  Tests et r\u00e9f\u00e9rences du crit\u00e8re 1.9 </p> </li> </ul>"},{"location":"Accessibilite/3-rgaa/#2-cadres","title":"2. Cadres","text":"<ul> <li> <p>Chaque cadre a-t-il un titre de cadre ?  Tests et r\u00e9f\u00e9rences du crit\u00e8re 2.1</p> </li> <li> <p>Pour chaque cadre ayant un titre de cadre, ce titre de cadre est-il pertinent ? Tests et r\u00e9f\u00e9rences du crit\u00e8re 2.2</p> </li> </ul>"},{"location":"Accessibilite/3-rgaa/#couleurs","title":"Couleurs","text":"<ul> <li> <p>Dans chaque page web, l\u2019information ne doit pas \u00eatre donn\u00e9e uniquement par la couleur. Cette r\u00e8gle est-elle respect\u00e9e ?  Tests et r\u00e9f\u00e9rences du crit\u00e8re 3.1</p> </li> <li> <p>Dans chaque page web, le contraste entre la couleur du texte et la couleur de son arri\u00e8re-plan est-il suffisamment \u00e9lev\u00e9 (hors cas particuliers) ?  Tests et r\u00e9f\u00e9rences du crit\u00e8re 3.2</p> </li> <li> <p>Dans chaque page web, les couleurs utilis\u00e9es dans les composants d\u2019interface ou les \u00e9l\u00e9ments graphiques porteurs d\u2019informations sont-elles suffisamment contrast\u00e9es (hors cas particuliers) ?  Tests et r\u00e9f\u00e9rences du crit\u00e8re 3.3</p> </li> </ul>"},{"location":"Accessibilite/3-rgaa/#multimedia","title":"Multim\u00e9dia","text":"<ul> <li> <p>Chaque m\u00e9dia temporel pr\u00e9-enregistr\u00e9 a-t-il, si n\u00e9cessaire, une transcription textuelle ou une audiodescription (hors cas particuliers) ?  Tests et r\u00e9f\u00e9rences du crit\u00e8re 4.1</p> </li> <li> <p>Pour chaque m\u00e9dia temporel pr\u00e9-enregistr\u00e9 ayant une transcription textuelle ou une audiodescription synchronis\u00e9e, celles-ci sont-elles pertinentes (hors cas particuliers) ?  Tests et r\u00e9f\u00e9rences du crit\u00e8re 4.2</p> </li> <li> <p>Chaque m\u00e9dia temporel synchronis\u00e9 pr\u00e9-enregistr\u00e9 a-t-il, si n\u00e9cessaire, des sous-titres synchronis\u00e9s (hors cas particuliers) ?  Tests et r\u00e9f\u00e9rences du crit\u00e8re 4.3</p> </li> <li> <p>Pour chaque m\u00e9dia temporel synchronis\u00e9 pr\u00e9-enregistr\u00e9 ayant des sous-titres synchronis\u00e9s, ces sous-titres sont-ils pertinents ?  Tests et r\u00e9f\u00e9rences du crit\u00e8re 4.4</p> </li> <li> <p>Chaque m\u00e9dia temporel pr\u00e9-enregistr\u00e9 a-t-il, si n\u00e9cessaire, une audiodescription synchronis\u00e9e (hors cas particuliers) ?  Tests et r\u00e9f\u00e9rences du crit\u00e8re 4.5</p> </li> </ul>"},{"location":"Accessibilite/4-technologie/","title":"Technologies d'assistance","text":""},{"location":"Accessibilite/4-technologie/#technologies-dassistance","title":"Technologies d'assistance","text":"<p>Les technologies d'assistance telles que les lecteurs d'\u00e9cran, les logiciels d'agrandissement d'\u00e9cran, le suivi oculaire, etc. Ces technologies sont si importantes car elles permettent \u00e0 n'importe qui d'int\u00e9ragir avec un ordinateur quel que soit son handicap, qu'il soit temporaire, permanent ou situationnel.</p> <p>Il est conseill\u00e9 de se familiariser avec les lecteurs d'\u00e9cran ; vous devriez installer un lecteur d'\u00e9cran et exp\u00e9rimenter avec pour comprendre comment il marche.</p> <p>Nous verrons \u00e9galement des cinq technologies d'assistance les plus courantes et d'autres p\u00e9riph\u00e9riques d'entr\u00e9e alternatifs, et nous expliquerons comment les prendre en charge au mieux du point de vue de la conceptio et de la technologie.</p>"},{"location":"Accessibilite/4-technologie/#lecteurs-decran","title":"Lecteurs d'\u00e9cran","text":"<ul> <li>NVDA</li> <li>VoiceOver</li> <li>JAWS</li> <li>ChromeVox</li> </ul>"},{"location":"Accessibilite/4-technologie/#outils-de-zoom","title":"Outils de zoom","text":"<ul> <li>MAGic</li> <li>ZoomText</li> <li>Magnifier</li> </ul>"},{"location":"Accessibilite/4-technologie/#outils-automatises","title":"Outils automatis\u00e9s","text":"<ul> <li>Lighthouse</li> <li>WAVE</li> </ul>"},{"location":"Accessibilite/4-technologie/#outils-de-couleur","title":"Outils de couleur","text":"<ul> <li>WebAim Color Contrast</li> <li>WebAim Link Color Contrast</li> </ul>"},{"location":"Accessibilite/4-technologie/#autres-outils-utiles","title":"Autres outils utiles","text":"<ul> <li>HeadingMap</li> <li>Color Oracle</li> <li>Focus Indicator</li> <li>NerdeFocus</li> </ul> <p>Les lecteurs d'\u00e9cran</p> <ul> <li>JWAS (Windows)</li> <li>NVDA (Windows)</li> <li>ZoomText (Windows)</li> <li>ChromeVox(Windows)</li> <li>Dolphin Screen Reader (Windows)</li> <li>VoiceOver (macOS + iOS)</li> <li>Serotek System Access (Windows + macOS)</li> </ul> <p>Logiciels d'agrandissement d'\u00e9cran sont principalement utilis\u00e9s par les utilisateurs malvoyants, y compris un grand nombre d'utilisateurs \u00e2g\u00e9s.</p> <p>Voici les logiciels d'agrandissement d'\u00e9cran les plus populaires :</p> <ul> <li>Fusion Pro by JAWS (Windows)</li> <li>ZoomText Magnifier/Reader (Windowns)</li> <li>NVDA (Windows)</li> <li>SuperNova (Windows)</li> <li>ChromeVox (Windows)</li> <li>Zoom (macOS + iOS)</li> <li>Zoom It (macOS)</li> </ul> <p>Sturture documen html </p>"},{"location":"Accessibilite/5-structure/","title":"HTML et Accessibilit\u00e9","text":""},{"location":"Accessibilite/5-structure/#html-et-accessibilite","title":"HTML et Accessibilit\u00e9","text":"<p>Le HTML5 est utilis\u00e9 pour d\u00e9finir les diff\u00e9rentes zones de votre page web comme l'en\u2011t\u00eate, le menu de navigation, le contenu principal, etc. </p> <p>Exemple : <code>&lt;header&gt;, &lt;nav&gt;, &lt;main&gt;, &lt;aside&gt;, &lt;footer&gt;</code></p> <p>C'est un langage de balise, compos\u00e9 d'une s\u00e9rie d'\u00e9l\u00e9ment avec lesquels vous pouvez encadrer, envelopper ou baliser diff\u00e9rentes parties du contenu pour les faire appara\u00eetre ou agir d'une certaine mani\u00e8re. </p> <p>Une grande partie des contenus web peut \u00eatre rendue accessible simplement en s'assurant d'utiliser les \u00e9l\u00e9ments HTML appropri\u00e9s telle que WAI-ARIA.</p> <p>Commen\u00e7ons par se familiariser avec WAI-ARIA et savoir comment l'utiliser pour fournir une s\u00e9mantique suppl\u00e9mentaire utile afin d'am\u00e9liorer l'accessibilit\u00e9.</p>"},{"location":"Accessibilite/5-structure/#quest-ce-que-wai-aria","title":"Qu'est-ce que WAI-ARIA ?","text":"<p>WAI-ARIA est une sp\u00e9cification \u00e9crite par le W3C et d\u00e9finissant un ensemble d'attributs HTML suppl\u00e9mentaires pouvant \u00eatre appliqu\u00e9s aux \u00e9l\u00e9ments pour fournir une s\u00e9mantique suppl\u00e9mentaire et am\u00e9liorer l'accessibilit\u00e9 en cas de manque.</p>"},{"location":"Accessibilite/5-structure/#trois-caracteristiques-principales-sont-definies-dans-la-specification","title":"Trois caract\u00e9ristiques principales sont d\u00e9finies dans la sp\u00e9cification :","text":"<ul> <li>Les r\u00f4les : d\u00e9crivent diff\u00e9rentes structures de pages, telles que l'en\u2011t\u00eate, le menu de navigation, le contenu principal, etc.</li> </ul> <p>Exemple : Recommandation RGAA pour les attributs <code>role</code>: </p><pre><code>    &lt;header role=\"banner\"&gt;\n    &lt;nav role=\"navigation\"&gt;\n    &lt;main role =\"main\"&gt;\n    &lt;footer role=\"contentinfo\"&gt; \n</code></pre> Les attributs <code>role</code> doivent \u00eatre unique sur une page web sauf le r\u00f4le <code>navigation</code> qui peut \u00eatre utiliser pour les menus secondaires. <p>Exemple : Autres attributs <code>role</code> non n\u00e9cessaire pour le RGAA </p><pre><code>    &lt;aside role=\"complementary\"&gt;\n    &lt;section role=\"region\"&gt;\n    &lt;article role =\"article\"&gt;\n</code></pre> Les attributs r\u00f4les tr\u00e8s important : <code>role=search, role=form, role=tab</code>. <p>Il est conseill\u00e9 d'utiliser les balises s\u00e9mantiques et les attributs <code>role</code> pour am\u00e9liorer l'accessibilit\u00e9 num\u00e9rique.</p> <ul> <li>Les propri\u00e9t\u00e9s : peuvent \u00eatre utilis\u00e9s pour donner une signification suppl\u00e9mentaire ou une s\u00e9mantique. </li> </ul> <p>Par exemple, sp\u00e9cifie qu'une entr\u00e9e de formulaire doit \u00eatre renseign\u00e9e pour \u00eatre valide</p> <p><code>aria-required=\"true\"</code></p> <p>Autre exemple, mettre un ID sur un \u00e9l\u00e9ment, puis de le r\u00e9f\u00e9rencer en tant qu'\u00e9tiquette</p> <p><code>aria-labelledby=\"label\"</code> </p> <ul> <li>Les \u00e9tats : d\u00e9finissent les conditions actuelles des \u00e9l\u00e9ments.</li> </ul> <p>Exemple : signaler \u00e0 un lecteur d'\u00e9cran que l'entr\u00e9e de formulaire est actuellement d\u00e9sactiv\u00e9e</p> <p><code>aria-disabled=\"true\"</code></p>"},{"location":"Accessibilite/5-structure/#le-texte","title":"Le Texte","text":""},{"location":"Accessibilite/6-texte/","title":"Contenus textuels","text":""},{"location":"Accessibilite/6-texte/#contenus-textuels","title":"Contenus textuels","text":"<p>L'une des meilleures aides en accessibilit\u00e9 qu'un utilisateur de lecteur d'\u00e9cran peut avoir est une bonne structure des titres, paragraphes, listes, etc. </p> <p>Commen\u00e7ons par cr\u00e9er une page html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Page Accessibilit\u00e9&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Les informations suivantes sont importantes :</p> <ul> <li>L'attribut <code>lang</code> doit \u00eatre renseigner exemple <code>fr</code> pour le Fran\u00e7ais.</li> <li>Le meta <code>name=\"viewport\"</code> pour une page responsive (ordinateur, tablette, portable).</li> <li>Le title pour indiquer le titre de la page web.</li> </ul> <p>Cr\u00e9er le contenu de la page web </p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"fr\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Page Accessibilit\u00e9&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Mon titre&lt;/h1&gt;\n\n    &lt;p&gt;Ceci est la prem\u00e8re section de mon document.&lt;/p&gt;\n\n    &lt;p&gt;Je vais ajouter ici un autre paragraphe.&lt;/p&gt;\n\n    &lt;ol&gt;\n    &lt;li&gt;Voici&lt;/li&gt;\n    &lt;li&gt;une liste&lt;/li&gt;\n    &lt;li&gt;en HTML&lt;/li&gt;\n    &lt;/ol&gt;\n\n    &lt;h2&gt;Mon sous-titre&lt;/h2&gt;\n\n    &lt;p&gt;Ceci est la premi\u00e8re sous-section de mon document. J'aurais aim\u00e9 que les gens puissent trouver ce contenu!&lt;/p&gt;\n\n    &lt;h2&gt;Mon second sous-titre&lt;/h2&gt;\n\n    &lt;p&gt;Ceci est la seconde sous-section de mon document. Je pense qu'elle est plus int\u00e9ressante que la derni\u00e8re.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li>Un lecteur d'\u00e9cran peut lire \u00e0 voix haute chaque \u00e9l\u00e9ment au fur et \u00e0 mesure que vous progressez dans le contenu, vous notifiant ce qui est un paragraphe, ce qui est un titre, etc.</li> <li>Le lecteur d'\u00e9cran s'arr\u00eate apr\u00e8s chaque \u00e9l\u00e9ment, vous laissant aller \u00e0 n'importe quel endroit vous convenant.</li> <li>Vous pouvez sauter au pr\u00e9c\u00e9dent ou au prochain titre avec de nombreux lecteurs d'\u00e9cran.</li> <li>Vous pouvez aussi dresser une liste de tous les titres avec de nombreux lecteurs d'\u00e9crans, vous permettant de les utiliser comme une table des mati\u00e8res pratique pour trouver un contenu sp\u00e9cifique.</li> </ul>"},{"location":"Accessibilite/6-texte/#utiliser-un-langage-clair","title":"Utiliser un langage clair","text":"<p>Le langage que vous employez peut aussi affecter l'accessiblit\u00e9. En g\u00e9n\u00e9ral vous ne devriez pas utiliser un langage trop complexe, ni utiliser un jargon ou de l'argot inutiles. Eviter d'utiliser un langage et des caract\u00e8res qui ne sont pas lus clairement \u00e0 voix haute par le lecteur d'\u00e9cran. </p> <p>Par exemple :</p> <ul> <li>N'utilisez pas des tirets si vous le pouvez. Au lieu d'\u00e9crire 5\u20137, \u00e9crivez 5 \u00e0 7.</li> <li>Explicitez les abr\u00e9viations \u2014 au lieu d'\u00e9crire Jan, \u00e9crivez Janvier.</li> <li>Explicitez les acronymes, au moins une ou deux fois. Au lieu d'\u00e9crire \"HTML\" en premier lieu, \u00e9crivez Hypertext Markup Language.</li> </ul>"},{"location":"Algorithmes/Session_01/01_definition/","title":"1. D\u00e9finitions","text":""},{"location":"Algorithmes/Session_01/01_definition/#1-definitions","title":"1. D\u00e9finitions","text":"<p>Les algorithmes sont des proc\u00e9dures ou des ensembles de r\u00e8gles d\u00e9finies pour r\u00e9soudre des probl\u00e8mes ou accomplir des t\u00e2ches sp\u00e9cifiques. En programmation, un algorithme est une s\u00e9rie d'instructions bien d\u00e9finies, \u00e9tape par \u00e9tape, qui prennent des entr\u00e9es, effectuent des traitements sur ces entr\u00e9es et produisent des sorties.</p>"},{"location":"Algorithmes/Session_01/01_definition/#points-communs-entre-algorithmes-et-programmation","title":"Points communs entre algorithmes et programmation","text":"<p>Les algorithmes et la programmation sont deux concepts \u00e9troitement li\u00e9s en informatique, et ils partagent plusieurs points communs. </p> <p>Voici les principaux :</p>"},{"location":"Algorithmes/Session_01/01_definition/#resolution-de-problemes","title":"R\u00e9solution de probl\u00e8mes :","text":"<ul> <li>Algorithmes : Un algorithme est une solution d\u00e9taill\u00e9e et structur\u00e9e pour r\u00e9soudre un probl\u00e8me sp\u00e9cifique.</li> <li>Programmation : La programmation est le processus d'impl\u00e9mentation de ces solutions sous forme de code ex\u00e9cutable par un ordinateur.</li> </ul>"},{"location":"Algorithmes/Session_01/01_definition/#decomposition-en-etapes","title":"D\u00e9composition en \u00e9tapes :","text":"<ul> <li>Algorithmes : Les algorithmes d\u00e9composent une t\u00e2che complexe en une s\u00e9rie d'\u00e9tapes simples et bien d\u00e9finies.</li> <li>Programmation : En programmation, ces \u00e9tapes sont traduites en instructions que l'ordinateur peut comprendre et ex\u00e9cuter.</li> </ul>"},{"location":"Algorithmes/Session_01/01_definition/#efficacite-et-optimisation","title":"Efficacit\u00e9 et optimisation :","text":"<ul> <li>Algorithmes : Les algorithmes sont con\u00e7us pour \u00eatre efficaces en termes de temps de calcul et d'utilisation de la m\u00e9moire.</li> <li>Programmation : Les programmeurs cherchent \u00e0 optimiser le code pour que l'impl\u00e9mentation des algorithmes soit aussi rapide et \u00e9conome en ressources que possible.</li> </ul>"},{"location":"Algorithmes/Session_01/01_definition/#abstraction","title":"Abstraction :","text":"<ul> <li>Algorithmes : Les algorithmes utilisent des abstractions pour simplifier et g\u00e9n\u00e9raliser les solutions de mani\u00e8re \u00e0 ce qu'elles puissent \u00eatre appliqu\u00e9es \u00e0 divers cas.</li> <li>Programmation : La programmation utilise des abstractions sous forme de fonctions, de classes, et de modules pour organiser et g\u00e9rer la complexit\u00e9 du code.</li> </ul>"},{"location":"Algorithmes/Session_01/01_definition/#correctitude-et-validation","title":"Correctitude et validation :","text":"<ul> <li>Algorithmes : Les algorithmes doivent \u00eatre corrects, c'est-\u00e0-dire produire les r\u00e9sultats attendus pour toutes les entr\u00e9es possibles.</li> <li>Programmation : Le code doit \u00eatre test\u00e9 et valid\u00e9 pour s'assurer qu'il impl\u00e9mente correctement l'algorithme et fonctionne comme pr\u00e9vu dans toutes les situations.</li> </ul>"},{"location":"Algorithmes/Session_01/01_definition/#documentation-et-comprehension","title":"Documentation et compr\u00e9hension :","text":"<ul> <li>Algorithmes : La description d'un algorithme doit \u00eatre claire et compr\u00e9hensible, souvent accompagn\u00e9e de pseudocode ou de diagrammes.</li> <li>Programmation : Le code doit \u00eatre bien document\u00e9 avec des commentaires et une structure claire pour \u00eatre compr\u00e9hensible et maintenable.</li> </ul>"},{"location":"Algorithmes/Session_01/01_definition/#reutilisabilite","title":"R\u00e9utilisabilit\u00e9 :","text":"<ul> <li>Algorithmes : Les algorithmes bien con\u00e7us peuvent \u00eatre r\u00e9utilis\u00e9s dans diff\u00e9rents contextes et probl\u00e8mes.</li> <li>Programmation : En utilisant des concepts comme les biblioth\u00e8ques et les frameworks, le code peut \u00eatre r\u00e9utilis\u00e9 et partag\u00e9 \u00e0 travers diff\u00e9rents projets.</li> </ul>"},{"location":"Algorithmes/Session_01/02_types_d_algorithmes/","title":"2. Types d'algorithmes","text":""},{"location":"Algorithmes/Session_01/02_types_d_algorithmes/#2-types-dalgorithmes","title":"2. Types d'algorithmes","text":"<p>Les quatre principaux types d'algorithmes sont : la recherche, le tri, le calcul et la collecte.</p>"},{"location":"Algorithmes/Session_01/02_types_d_algorithmes/#21-principaux-types-dalgorithmes","title":"2.1 Principaux types d'algorithmes","text":""},{"location":"Algorithmes/Session_01/02_types_d_algorithmes/#1-algorithmes-de-recherche","title":"1. Algorithmes de recherche :","text":"<ul> <li>Recherche lin\u00e9aire : Parcourt chaque \u00e9l\u00e9ment de la liste jusqu'\u00e0 trouver l'\u00e9l\u00e9ment recherch\u00e9.</li> <li>Recherche binaire : Recherche un \u00e9l\u00e9ment dans une liste tri\u00e9e en divisant la liste en deux \u00e0 chaque \u00e9tape.</li> </ul>"},{"location":"Algorithmes/Session_01/02_types_d_algorithmes/#2-algorithmes-de-tri","title":"2. Algorithmes de tri :","text":"<ul> <li>Tri \u00e0 bulles (Bubble Sort) : Compare et \u00e9change les \u00e9l\u00e9ments adjacents pour les placer dans l'ordre.</li> <li>Tri par insertion (Insertion Sort) : Ins\u00e8re chaque \u00e9l\u00e9ment dans sa position correcte par rapport aux \u00e9l\u00e9ments d\u00e9j\u00e0 tri\u00e9s.</li> <li>Tri rapide (Quick Sort) : Utilise la m\u00e9thode de partition pour diviser et trier les sous-listes.</li> <li>Tri fusion (Merge Sort) : Divise la liste en sous-listes, les trie et les fusionne.</li> </ul>"},{"location":"Algorithmes/Session_01/02_types_d_algorithmes/#3-algorithmes-de-calcul","title":"3. Algorithmes de calcul :","text":"<p>Ces algorithmes effectuent des op\u00e9rations math\u00e9matiques complexes. Par exemple, trouver la moyenne, la m\u00e9diane, ou l'\u00e9cart-type d'une liste de nombres.</p>"},{"location":"Algorithmes/Session_01/02_types_d_algorithmes/#4-algorithmes-de-collecte","title":"4. Algorithmes de collecte :","text":"<p>Ces algorithmes collectent et agr\u00e8gent des donn\u00e9es selon des crit\u00e8res sp\u00e9cifiques. Par exemple, regrouper les contacts par ville ou par domaine professionnel.</p>"},{"location":"Algorithmes/Session_01/02_types_d_algorithmes/#22-utilisation-pour-organiser-une-liste-de-contacts","title":"2.2 Utilisation pour organiser une liste de contacts","text":"<p>Exemple de liste de contacts </p><pre><code>contacts = [\n    {\"nom\": \"Dupont\", \"prenom\": \"Jean\", \"telephone\": \"1234567890\"},\n    {\"nom\": \"Martin\", \"prenom\": \"Sophie\", \"telephone\": \"0987654321\"},\n    {\"nom\": \"Durand\", \"prenom\": \"Luc\", \"telephone\": \"1122334455\"}\n]\n</code></pre> <p>Algorithmes de tri</p> <p>Pour trier les contacts par nom de famille : </p><pre><code>def tri_par_nom(contact):\n    return contact['nom']\n\ncontacts_trie = sorted(contacts, key=tri_par_nom)\nprint(contacts_trie)\n</code></pre> <p>Algorithmes de recherche</p> <p>Pour rechercher un contact par nom : </p><pre><code>def recherche_par_nom(nom, contacts):\n    for contact in contacts:\n        if contact['nom'] == nom:\n            return contact\n    return None\n\ncontact = recherche_par_nom(\"Martin\", contacts)\nprint(contact)\n</code></pre> <p>Pour une recherche binaire (requiert que la liste soit tri\u00e9e) : </p><pre><code>def recherche_binaire(nom, contacts):\n    contacts_trie = sorted(contacts, key=lambda x: x['nom'])\n    gauche, droite = 0, len(contacts_trie) - 1\n    while gauche &lt;= droite:\n        milieu = (gauche + droite) // 2\n        if contacts_trie[milieu]['nom'] == nom:\n            return contacts_trie[milieu]\n        elif contacts_trie[milieu]['nom'] &lt; nom:\n            gauche = milieu + 1\n        else:\n            droite = milieu - 1\n    return None\n\ncontact = recherche_binaire(\"Martin\", contacts)\nprint(contact)\n</code></pre> <p>Algorithmes de calcul</p> <p>Pour calculer la longueur moyenne des pr\u00e9noms des contacts : </p><pre><code>def moyenne_longueur_prenom(contacts):\n    total_longueur = sum(len(contact['prenom']) for contact in contacts)\n    return total_longueur / len(contacts)\n\nmoyenne = moyenne_longueur_prenom(contacts)\nprint(moyenne)\n</code></pre> <p>Algorithmes de collecte</p> <p>Pour regrouper les contacts par la premi\u00e8re lettre de leur nom :</p> <pre><code>from collections import defaultdict\n\ndef regrouper_par_premiere_lettre(contacts):\n    groupe = defaultdict(list)\n    for contact in contacts:\n        premiere_lettre = contact['nom'][0].upper()\n        groupe[premiere_lettre].append(contact)\n    return groupe\n\ngroupe_contacts = regrouper_par_premiere_lettre(contacts)\nfor lettre, groupe in groupe_contacts.items():\n    print(f\"{lettre}: {groupe}\")\n</code></pre> <p>Ces exemples montrent comment diff\u00e9rents types d'algorithmes peuvent \u00eatre utilis\u00e9s pour organiser, rechercher, trier et analyser une liste de contacts, rendant les donn\u00e9es plus utilisables et accessibles.</p>"},{"location":"Algorithmes/Session_01/03_big_O/","title":"3. La notation Big-O","text":""},{"location":"Algorithmes/Session_01/03_big_O/#3-la-notation-big-o","title":"3. La notation Big-O","text":"<p>La notation Big-O, \u00e9galement appel\u00e9e notation O, est une notation utilis\u00e9e en informatique pour d\u00e9crire la complexit\u00e9 temporelle ou spatiale des algorithmes. Elle exprime la limite sup\u00e9rieure du temps de calcul ou de l'espace m\u00e9moire n\u00e9cessaire en fonction de la taille de l'entr\u00e9e. Cette notation permet de comparer l'efficacit\u00e9 des algorithmes et d'analyser leur performance, surtout pour les grandes entr\u00e9es.</p>"},{"location":"Algorithmes/Session_01/03_big_O/#31-principales-classes-de-complexite-en-notation-big-o","title":"3.1 Principales classes de complexit\u00e9 en notation Big-O :","text":""},{"location":"Algorithmes/Session_01/03_big_O/#1-o1-constant-time","title":"1. O(1) \u2013 Constant Time :","text":"<ul> <li>Description : L'ex\u00e9cution de l'algorithme prend un temps constant, quelle que soit la taille de l'entr\u00e9e.</li> <li>Exemple : Acc\u00e9der \u00e0 un \u00e9l\u00e9ment d'un tableau par son index.</li> </ul>"},{"location":"Algorithmes/Session_01/03_big_O/#2-olog-n-logarithmic-time","title":"2. O(log n) \u2013 Logarithmic Time :","text":"<ul> <li>Description : Le temps de l'algorithme cro\u00eet logarithmiquement avec la taille de l'entr\u00e9e.</li> <li>Exemple : Recherche binaire dans une liste tri\u00e9e.</li> </ul>"},{"location":"Algorithmes/Session_01/03_big_O/#3-on-linear-time","title":"3. O(n) \u2013 Linear Time :","text":"<ul> <li>Description : Le temps de l'algorithme cro\u00eet lin\u00e9airement avec la taille de l'entr\u00e9e.</li> <li>Exemple : Parcourir tous les \u00e9l\u00e9ments d'une liste.</li> </ul>"},{"location":"Algorithmes/Session_01/03_big_O/#4-on-log-n-linearithmic-time","title":"4. O(n log n) \u2013 Linearithmic Time :","text":"<ul> <li>Description : Le temps de l'algorithme est proportionnel \u00e0 n log n.</li> <li>Exemple : Tri rapide (Quick Sort) et tri fusion (Merge Sort).</li> </ul>"},{"location":"Algorithmes/Session_01/03_big_O/#5-on2-quadratic-time","title":"5. O(n\u00b2) \u2013 Quadratic Time :","text":"<ul> <li>Description : Le temps de l'algorithme cro\u00eet quadratiquement avec la taille de l'entr\u00e9e.</li> <li>Exemple : Tri \u00e0 bulles (Bubble Sort) et tri par insertion (Insertion Sort).</li> </ul>"},{"location":"Algorithmes/Session_01/03_big_O/#6-o2n-exponential-time","title":"6. O(2^n) \u2013 Exponential Time :","text":"<ul> <li>Description : Le temps de l'algorithme double \u00e0 chaque ajout d'un \u00e9l\u00e9ment \u00e0 l'entr\u00e9e.</li> <li>Exemple : Algorithmes de r\u00e9solution de probl\u00e8mes combinatoires comme le probl\u00e8me du voyageur de commerce (brute force).</li> </ul>"},{"location":"Algorithmes/Session_01/03_big_O/#7-on-factorial-time","title":"7. O(n!) \u2013 Factorial Time :","text":"<ul> <li>Description : Le temps de l'algorithme cro\u00eet de mani\u00e8re factorielle avec la taille de l'entr\u00e9e.</li> <li>Exemple : G\u00e9n\u00e9ration de toutes les permutations d'un ensemble.</li> </ul>"},{"location":"Algorithmes/Session_01/03_big_O/#32-exemples-et-explications","title":"3.2 Exemples et explications","text":""},{"location":"Algorithmes/Session_01/03_big_O/#exemple-1-recherche-lineaire","title":"Exemple 1 : Recherche lin\u00e9aire","text":"<pre><code>def recherche_lineaire(liste, cible):\n    for element in liste:\n        if element == cible:\n            return True\n    return False\n</code></pre> <ul> <li>Complexit\u00e9 : O(n)</li> <li>Explication : Dans le pire des cas, l'algorithme doit v\u00e9rifier chaque \u00e9l\u00e9ment de la liste une fois, donc le temps de calcul est proportionnel \u00e0 la taille de la liste.</li> </ul>"},{"location":"Algorithmes/Session_01/03_big_O/#exemple-2-tri-rapide-quick-sort","title":"Exemple 2 : Tri rapide (Quick Sort)","text":"<pre><code>def tri_rapide(liste):\n    if len(liste) &lt;= 1:\n        return liste\n    pivot = liste[len(liste) // 2]\n    gauche = [x for x in liste if x &lt; pivot]\n    milieu = [x for x in liste if x == pivot]\n    droite = [x for x in liste if x &gt; pivot]\n    return tri_rapide(gauche) + milieu + tri_rapide(droite)\n</code></pre> <ul> <li>Complexit\u00e9 : O(n log n) en moyenne, O(n\u00b2) dans le pire des cas.</li> <li>Explication : L'algorithme divise la liste en deux parties \u00e0 chaque \u00e9tape, et chaque division n\u00e9cessite un temps proportionnel \u00e0 la taille de la liste.</li> </ul>"},{"location":"Algorithmes/Session_01/03_big_O/#exemple-3-acces-a-un-element-dun-tableau","title":"Exemple 3 : Acc\u00e8s \u00e0 un \u00e9l\u00e9ment d'un tableau","text":"<pre><code>element = tableau[index]\n</code></pre> <ul> <li>Complexit\u00e9 : O(1)</li> <li>Explication : Acc\u00e9der directement \u00e0 un \u00e9l\u00e9ment d'un tableau par son index prend un temps constant, ind\u00e9pendamment de la taille du tableau.</li> </ul>"},{"location":"Algorithmes/Session_01/03_big_O/#en-resume","title":"En r\u00e9sum\u00e9","text":"<p>Pourquoi la notation Big-O est importante</p> <ul> <li>Comparaison d'algorithmes : Elle permet de comparer diff\u00e9rents algorithmes et de choisir le plus efficace pour une t\u00e2che donn\u00e9e.</li> <li>Analyse de performance : Elle aide \u00e0 pr\u00e9voir comment un algorithme se comportera \u00e0 grande \u00e9chelle, ce qui est crucial pour les applications n\u00e9cessitant un traitement de grandes quantit\u00e9s de donn\u00e9es.</li> <li>Optimisation : Comprendre la complexit\u00e9 des algorithmes permet aux d\u00e9veloppeurs de les optimiser et d'am\u00e9liorer les performances globales des logiciels.</li> </ul> <p>La notation Big-O est un outil essentiel en informatique pour \u00e9valuer et comparer les performances des algorithmes de mani\u00e8re th\u00e9orique et pratique.</p>"},{"location":"Off/","title":"Articles de Blog","text":""},{"location":"Off/#articles-de-blog","title":"Articles de Blog","text":"<p>It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).</p>"},{"location":"Off/Django/css/","title":"Comment d\u00e9ployer une application django sur python anywhere ?","text":""},{"location":"Off/Django/css/#comment-deployer-une-application-django-sur-python-anywhere","title":"Comment d\u00e9ployer une application django sur python anywhere ?","text":"<p>We hope you are all having fun and wish you all the best for the new year!</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>"},{"location":"Off/Django/css/#troisime-article-article-de-blog","title":"Troisime Article Article de blog","text":"<p>Where does it come from? Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32.</p> <p>The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.</p> <p>Where can I get some? There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.</p>"},{"location":"Off/Projets/","title":"Projet N\u00b01","text":""},{"location":"Off/Projets/#projet-n1","title":"Projet N\u00b01","text":""},{"location":"Off/Projets/#realiser-un-projet","title":"R\u00e9aliser un projet","text":""},{"location":"Off/Projets/Debutant/","title":"Exercice Simple en pyhon","text":""},{"location":"Off/Projets/Debutant/#exercice-simple-en-pyhon","title":"Exercice Simple en pyhon","text":"<p>!!! Exercice N\u00b0 1</p> <pre><code>=== \"Question\"\n\n    ``` markdown\n    Afficher \"Bonjour tout le monde!\"\n    ```\n\n=== \"R\u00e9ponse\"\n\n    ``` markdown\n    print(\"Bonjour, monde!\")\n    ```\n</code></pre> <p>!!! Exercice N\u00b0 2</p> <pre><code>=== \"Question\"\n\n    ``` markdown\n    Stocker votre nom dans une variable nom et afficher \"Bonjour, [nom]\"\n    ```\n\n=== \"R\u00e9ponse\"\n\n    ``` markdown\n    nom = \"Mbappe\"\n    print(\"Bonjour, \" + nom)\n    ```\n</code></pre> <p>!!! Exercice N\u00b0 3</p> <pre><code>=== \"Question\"\n\n    ``` markdown\n    Calculer la somme de deux nombres(5 et 3) et stocker le r\u00e9sultat dans une variable resultat.\n    ```\n\n=== \"R\u00e9ponse\"\n\n    ``` markdown\n    x = 5\n    y = 3\n    resultat = x + y\n    print(resultat)\n    ```\n</code></pre> <p>!!! Exercice N\u00b0 4</p> <pre><code>=== \"Question\"\n\n    ``` markdown\n    Demander \u00e0 l'utilisateur de saisir un nombre et afficher le r\u00e9sultat de la multiplication de ce nombre par 2\n    ```\n\n=== \"R\u00e9ponse\"\n\n    ``` markdown\n    x = input(\"Saisissez un nombre: \")\n    x = int(x)\n    resultat = x * 2\n    print(resultat)\n    ```\n</code></pre> <p>!!! Exercice N\u00b0 5</p> <pre><code>=== \"Question\"\n\n    ``` markdown\n    Utiliser une boucle pour afficher les nombres de 1 \u00e0 10\n    ```\n\n=== \"R\u00e9ponse\"\n\n    ``` markdown\n    for i in range(1, 11):\n        print(i)\n    ```\n</code></pre> <p>!!! Exercice N\u00b0 6</p> <pre><code>=== \"Question\"\n\n    ``` markdown\n    Utiliser une boucle pour afficher la somme des nombres de 1 \u00e0 10\n    ```\n\n=== \"R\u00e9ponse\"\n\n    ``` markdown\n    somme = 0\n    for i in range(1, 11):\n        somme += i\n    print(somme)\n    ```\n</code></pre> <p>!!! Exercice N\u00b0 7</p> <pre><code>=== \"Question\"\n\n    ``` markdown\n    Utiliser une boucle pour afficher les nombres pairs de 1 \u00e0 10\n    ```\n\n=== \"R\u00e9ponse\"\n\n    ``` markdown\n    for i in range(1, 11):\n    if i % 2 == 0:\n        print(i)\n    ```\n</code></pre> <p>!!! Exercice N\u00b0 8</p> <pre><code>=== \"Question\"\n\n    ``` markdown\n    Cr\u00e9er une fonction qui prend un nombre en param\u00e8tre et renvoie son carr\u00e9\n    ```\n\n=== \"R\u00e9ponse\"\n\n    ``` markdown\n    def carre(x):\n        return x * x\n\n    resultat = carre(5)\n    print(resultat)\n    ```\n</code></pre> <p>!!! Exercice N\u00b0 9</p> <pre><code>=== \"Question\"\n\n    ``` markdown\n    Utiliser une liste pour stocker 3 noms de votre choix et utiliser une boucle pour les afficher\n    ```\n\n=== \"R\u00e9ponse\"\n\n    ``` markdown\n    noms = [\"Olivier\", \"Marie\", \"Karim\"]\n    for nom in noms:\n        print(nom)\n    ```\n</code></pre> <p>!!! Exercice N\u00b0 10</p> <pre><code>=== \"Question\"\n\n    ``` markdown\n    Utiliser un dictionnaire pour stocker des informations sur des \u00e9tudiants (nom, \u00e2ge, note) et utiliser une boucle pour afficher au moins 3 \u00e9tudiants.\n    ```\n\n=== \"R\u00e9ponse\"\n\n    ``` markdown\n    etudiants = [\n    {\"nom\": \"John\", \"age\": 20, \"note\": 75},\n    {\"nom\": \"Marie\", \"age\": 22, \"note\": 82},\n    {\"nom\": \"Robert\", \"age\": 19, \"note\": 65}\n    ]\n\n    for etudiant in etudiants:\n        nom = etudiant[\"nom\"]\n        age = etudiant[\"age\"]\n        note = etudiant[\"note\"]\n        print(\"Nom: \" + nom + \",  Age: \" + str(age) + \",  Note: \" + str(note))\n    ```\n</code></pre>"},{"location":"Off/Projets/Debutant/coments/","title":"Les commentaires","text":""},{"location":"Off/Projets/Debutant/coments/#les-commentaires","title":"Les commentaires","text":"<p>En programmation, les commentaires sont des instructions coh\u00e9rentes avec le developpeur qui d\u00e9crivent ce que signifie un bloc de code. Les commentaires sont tr\u00e8s importants et vous devrez savoir comment les utiliser.</p> <p>Les commentaires peuvent \u00eatre inclus n'importe o\u00f9 et la meilleure pratique consiste \u00e0 \u00e9crire des commentaires pertinents au fur et \u00e0 mesure que vous proc\u00e9dez avec votre code.</p>"},{"location":"Off/Projets/Debutant/coments/#ecrire-des-commentaires","title":"Ecrire des commentaires","text":"<p>Les commentaires en python commencent par un caract\u00e8re #.</p> <p></p><pre><code>&gt;&gt;&gt; # Ecrire un commentaire\n&gt;&gt;&gt; print(\"Les commentaires en python commencent par un #.\")\nLes commentaires en python commencent par un #.\n</code></pre> Comme vous pouvez le voir, la fonction <code>print</code> est ex\u00e9cut\u00e9e alors que l'instruction de commentaire n'est pas pr\u00e9sent\u00e9."},{"location":"Off/Projets/Debutant/lists/","title":"Les Listes","text":""},{"location":"Off/Projets/Debutant/lists/#les-listes","title":"Les Listes","text":""},{"location":"Off/Projets/Debutant/lists/#definition","title":"D\u00e9finition","text":"<p>Les listes sont des s\u00e9quences ordonn\u00e9es pouvant contenir divers types d'objects. En d'autres termes, une liste est une collection d'\u00e9l\u00e9ments ordonn\u00e9s et modifiables.</p>"},{"location":"Off/Projets/Debutant/lists/#creer-une-liste","title":"Cr\u00e9er une liste","text":"<pre><code>Une liste de cha\u00eenes de caract\u00e8re\n&gt;&gt;&gt; ma_liste = [\"Mbabbe\", \"Ronaldo\", \"Neymar\", \"Benzema\"]\n\nUne liste de nombres\n&gt;&gt;&gt; ma_liste = [1, 2, 3, 4, 5, 7, 8, 9, 10]\n\nUne liste mixte de nombres et de cha\u00eene de caract\u00e8re\n&gt;&gt;&gt; ma_liste = [75, \"Paris\", 13, \"Marseille\", 69, \"Lyon\"]\n\nUne liste de listes\n&gt;&gt;&gt; ma_liste = [['Un', 'Deux', 'Trois'], ['Cinq', 'Six', 'Sept']]\n</code></pre> <p>Comme vous pouvez le voir, les \u00e9l\u00e9ments sont entre crochets, c'est-\u00e0-dire <code>[]</code> et chaque \u00e9l\u00e9ment est s\u00e9par\u00e9 par une virgule. Une liste peut contenir des types de donn\u00e9es tels que des cha\u00eenes, des entiers, des nombres flottante, etc. En plus de cela, les listes peuvent \u00e9galement \u00eatre imbriqu\u00e9es, c'est-\u00e0-dire que vous pouvez inclure une liste dans une liste.</p>"},{"location":"Off/Projets/Debutant/lists/#index","title":"Index","text":"<p>Les listes prennent en chargent l'indexation et le d\u00e9coupage en tranches, tout comme les cha\u00eenes de caract\u00e8re. L'index de liste est sa position. La num\u00e9rotation de l'index commence \u00e0 z\u00e9ro.</p> <pre><code>nom_de_ma_liste = ['Paris', 'Marseille', 'Lyon']\nindex_de_ma_liste  [0]        [1]          [2]\n</code></pre> <p>Donc, si nous voulons obtenir le premier \u00e9l\u00e9ment de la liste c'est-\u00e0-dire <code>75</code>, nous tapons le nom de la liste suivi de crochets et l'index z\u00e9ro.</p> <pre><code>&gt;&gt;&gt; ma_liste = [75, \"Paris\", 13, \"Marseille\", 69, \"Lyon\"]\n&gt;&gt;&gt; ma_liste[0]\n75\n</code></pre> <p>Ensuite, le quatri\u00e8me \u00e9l\u00e9ment <code>Marseille</code> est \u00e0 l'index trois</p> <pre><code>&gt;&gt;&gt; ma_liste = [75, \"Paris\", 13, \"Marseille\", 69, \"Lyon\"]\n&gt;&gt;&gt; ma_liste[3]\n'Marseille'\n</code></pre> <p>Les listes sont \u00e9galement modifiales apr\u00e8s leur cr\u00e9ation.</p> <p>Cr\u00e9er une liste vide puis ajouter chaque \u00e9l\u00e9ment en utilisant la m\u00e9thode append</p> <pre><code>&gt;&gt;&gt; jour_de_semaine = []\n&gt;&gt;&gt; jour_de_semaine.append('Lundi')\n&gt;&gt;&gt; jour_de_semaine.append('Mardi')\n&gt;&gt;&gt; jour_de_semaine.append('Mercredi')\n</code></pre> <p>Si nous ex\u00e9cutons la commande nous pouvons voir les trois \u00e9l\u00e9ments que nous avons ajout\u00e9s : Lundi, Mardi et Mercredi.</p> <pre><code>&gt;&gt;&gt; jour_de_semaine\n['Lundi', 'Mardi', 'Mercredi']\n</code></pre> <p>Pour supprimer un \u00e9l\u00e9ment vous pouvez utiliser la m\u00e9thode <code>remove</code> et transmettre la valeur. Par exemple supprimer <code>Monaco</code></p> <pre><code>&gt;&gt;&gt; ville = [\"Nice\", \"Marseille\", \"Monaco\"]\n&gt;&gt;&gt; ville.remove(\"Monaco\")\n&gt;&gt;&gt; ville\n['Nice', 'Marseille']\n</code></pre> <p>Vous pouvez supprimer un \u00e9l\u00e9ment par un index. Pour ce faire, utilisez le mot cl\u00e9 <code>del</code> suivi de l'indice de l'\u00e9l\u00e9ment</p> <p>Comment pouvons-nous v\u00e9rifier si un \u00e9l\u00e9ment est dans une liste ? En ulisant une instruction if comme dans l'exemple ci-dessous. Nous v\u00e9rions si le chiffre <code>1</code> est dans la liste d'afficher vrai.</p> <pre><code>&gt;&gt;&gt; if 1 in [1, 2, 3]:\n    print('True')\n\n\nTrue\n&gt;&gt;&gt;\n</code></pre>"},{"location":"Off/Projets/Debutant/lists/#boucle-for","title":"Boucle for","text":"<p>Nous pouvons utiliser la boucle for afficher chaque \u00e9l\u00e9ment de la liste</p> <pre><code>&gt;&gt;&gt; villes = [\"Nice\", \"Marseille\", \"Monaco\"]\n&gt;&gt;&gt; for ville in villes:\n    # l'int\u00e9rieur de la boucle est mis en retrait (l'indentation)\n    print(ville)\n\n\nNice       # premi\u00e8re boucle\nMarseille  # deuxi\u00e8me boucle\nMonaco     # troisi\u00e8me boucle\n&gt;&gt;&gt;\n</code></pre>"},{"location":"Off/Projets/Debutant/lists/#fonction-range","title":"Fonction range","text":"<p>La fonction range en Python g\u00e9n\u00e8re et retourne une s\u00e9quence de nombres entiers bas\u00e9 sur les arguments de la fonction. </p><pre><code>&gt;&gt;&gt; range(10)\nrange(0, 10)\n&gt;&gt;&gt; \n</code></pre> Une liste avec 10 entre parenth\u00e8ses, cr\u00e9e une s\u00e9quence de chiffres de 0 \u00e0 9. <pre><code>&gt;&gt;&gt; range(0, 10, 1)\n# La valeur de d\u00e9but est 0.\n# La valeur d'arr\u00eat est 10.\n# Le nombre de pas 1.\n&gt;&gt;&gt; \n</code></pre> Nous pouvons utiliser une boucle for comme nous l'avons vu auparavant avec la s\u00e9quence g\u00e9n\u00e9r\u00e9e par range. <pre><code>&gt;&gt;&gt; for i in range(11):\n    # Cela nous permet de boucler un certain nombre de fois.\n    print(i)\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</code></pre>"},{"location":"Off/Projets/Debutant/Avance/args/","title":"Coming soon","text":""},{"location":"Off/Projets/Debutant/Avance/intro/","title":"Intro","text":"<p>Que vous d\u00e9butiez en programmation ou que vous soyez un d\u00e9veloppeur exp\u00e9riment\u00e9, il est facile d'apprendre et d'utiliser le langage Python.</p> <p>Nous allons d\u00e9couvrir ensemble les fondamentaux jusqu'\u00e0 des concepts de programmations plus interm\u00e9diares et plus avanc\u00e9s.</p> <p>La documentation officile python.org.</p>"},{"location":"Off/Projets/Debutant/Avance/intro/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"Off/Projets/Debutant/Avance/intro/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Off/Projets/Debutant/Intermediaire/coming/","title":"Projet N\u00b01","text":""},{"location":"Off/Projets/Debutant/Intermediaire/coming/#projet-n1","title":"Projet N\u00b01","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"Off/Projets/Debutant/Intermediaire/coming/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"Off/Projets/Debutant/Intermediaire/coming/#project-layout","title":"Project layout","text":"<pre><code>`mkdocs.yml    # The configuration file.`\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\nmerci beauc\n</code></pre>"},{"location":"Off/Projets/Debutant/Intermediaire/coming/#project-pas","title":"Project Pas","text":"<pre><code>&gt;&gt;&gt; the_world_is_flat = True\n&gt;&gt;&gt; if the_world_is_flat:\n...     print(\"Be careful not to fall off!\")\n...\nBe careful not to fall &lt;off!&gt;&lt;/off!&gt;\n</code></pre> <p>Merci d'ecire ce sont</p> <pre><code>&gt;&gt;&gt; 17 / 3  # classic division returns a float\n5.666666666666667\n&gt;&gt;&gt;\n&gt;&gt;&gt; 17 // 3  # floor division discards the fractional part\n5\n&gt;&gt;&gt; 17 % 3  # the % operator returns the remainder of the division\n2\n&gt;&gt;&gt; 5 * 3 + 2  # floored quotient * divisor + remainder\n17\n</code></pre> <p>Dans l'exemple pr\u00e9c\u00e9dent, nous avons stock\u00e9 un nombre entier (int) dans la variable x, mais il est tout \u00e0 fait possible de stocker des floats, des cha\u00eenes de caract\u00e8res (string ou str) ou de nombreux autres types de variable que nous verrons par la suite :</p> <pre><code>&gt;&gt;&gt; y = 3.14\n&gt;&gt;&gt; y\n3.14\n&gt;&gt;&gt; a = \"bonjour\"\n&gt;&gt;&gt; a\n'bonjour'\n&gt;&gt;&gt; b = 'salut'\n&gt;&gt;&gt; b\n'salut'\n&gt;&gt;&gt; c = \"\"\"girafe\"\"\"\n&gt;&gt;&gt; c\n'girafe'\n&gt;&gt;&gt; d = '''lion'''\n&gt;&gt;&gt; d\n'lion'\n</code></pre>"},{"location":"Off/Projets/Debutant/Intermediaire/coming/#hello","title":"Hello","text":"<pre><code>$ python main.py\n\n---&gt; 100%\n\nProcessed 100 things.\n</code></pre>"},{"location":"Off/Projets/Debutant/Intermediaire/coming/#typer-progressbar","title":"Typer <code>progressbar</code>","text":"<p>You can use <code>typer.progressbar()</code> with a <code>with</code> statement, as in:</p> <pre><code>{!../docs_src/progressbar/tutorial003.py!}\n</code></pre> <p>!!! tip</p> <pre><code>users = [\"Camila\", \"Rick\", \"Morty\"]\nwith typer.progressbar(users) as progress:\n    for user in progress:\n        typer.echo(user)\n</code></pre> <p>Merci pour ce code</p> <p></p><pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> Ajouter ce code <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"Off/Projets/Difficile/projet/","title":"Projet Difficile","text":""},{"location":"Off/Projets/Difficile/projet/#projet-difficile","title":"Projet Difficile","text":""},{"location":"Off/Projets/Difficile/projet/#comin-soon","title":"Comin soon","text":""},{"location":"Off/Projets/Difficile/projet/#comin-soon_1","title":"Comin soon","text":""},{"location":"Off/Projets/Facile/projet/","title":"Utilisation de Python comme calculatrice","text":""},{"location":"Off/Projets/Facile/projet/#utilisation-de-python-comme-calculatrice","title":"Utilisation de Python comme calculatrice","text":"<p>Essayons quelques commandes Python simples. D\u00e9marrez l'interpr\u00e9teur et attendez l'invite principale, &gt;&gt;&gt;. (Cela ne devrait pas prendre longtemps.)</p>"},{"location":"Off/Projets/Facile/projet/#les-nombres","title":"Les nombres","text":"<p>L'interpr\u00e9teur agit comme une simple calculatrice : vous pouvez y taper une expression et il \u00e9crira la valeur. La syntaxe des expressions est simple : les op\u00e9rateurs <code>+, -, * et /</code> fonctionnent comme dans la plupart des autres langages; les parenth\u00e8ses <code>( ())</code> peuvent \u00eatre utilis\u00e9es pour le regroupement. Par exemple:</p> <pre><code>&gt;&gt;&gt; 2 + 2\n4\n&gt;&gt;&gt; 50 - 5*6\n20\n&gt;&gt;&gt; (50 - 5*6) / 4\n5.0\n&gt;&gt;&gt; 8 / 5  # division always returns a floating point number\n1.6\n</code></pre>"},{"location":"Off/Projets/Facile/projet/#les-variables","title":"Les variables","text":""},{"location":"Off/Projets/Moyen/projet/","title":"Projet Moyen","text":""},{"location":"Off/Projets/Moyen/projet/#projet-moyen","title":"Projet Moyen","text":""},{"location":"Off/Projets/Moyen/projet/#coming-soon","title":"Coming soon","text":""},{"location":"Off/index./","title":"Blog","text":""},{"location":"Off/posts/Section_00/0-Introduction/","title":"Introduction","text":""},{"location":"Off/posts/Section_00/0-Introduction/#introduction","title":"Introduction","text":"<p>Python est un langage de programmation populaire et puissant qui peut \u00eatre utilis\u00e9 pour une vari\u00e9t\u00e9 de t\u00e2ches, telles que la cr\u00e9ation de scripts, la construction de sites web, le d\u00e9veloppement de logiciels et la data science. Il est facile \u00e0 apprendre et \u00e0 comprendre, ce qui en fait un choix id\u00e9al pour les d\u00e9butants et les professionnels exp\u00e9riment\u00e9s.</p> <p>Cette formation en Python vous permettra de d\u00e9couvrir les fondamentaux du langage, tels que les variables, les boucles, les fonctions et les structures de donn\u00e9es. Vous apprendrez \u00e9galement comment utiliser les biblioth\u00e8ques populaires telles que NumPy, Pandas et Matplotlib pour manipuler et visualiser des donn\u00e9es.</p> <p>En plus de couvrir les concepts de base, cette formation vous donnera \u00e9galement une exp\u00e9rience pratique en utilisant Python pour r\u00e9soudre des probl\u00e8mes r\u00e9els. Vous aurez l'occasion de mettre en pratique vos comp\u00e9tences en cr\u00e9ant des projets concrets, tels que des programmes de calcul, des scripts de traitement de donn\u00e9es et des applications web.</p> <p>En suivant cette formation, vous serez en mesure de :</p> <ul> <li>Comprendre les concepts fondamentaux de Python</li> <li>\u00c9crire des scripts Python simples et efficaces</li> <li>Utiliser les biblioth\u00e8ques populaires pour manipuler et visualiser des donn\u00e9es</li> <li>Cr\u00e9er des projets concrets en utilisant les comp\u00e9tences acquises</li> </ul> <p>Cette formation est con\u00e7ue pour les d\u00e9butants, mais peut \u00e9galement \u00eatre b\u00e9n\u00e9fique pour les d\u00e9veloppeurs exp\u00e9riment\u00e9s qui souhaitent se familiariser avec Python. Il est \u00e9galement important de noter que Python est un outil tr\u00e8s important dans la data science, les sciences de l'IA et l'analyse de donn\u00e9es, donc ce cours est tr\u00e8s utile pour les personnes souhaitant entrer dans ces domaines.</p> <p>En conclusion, cette formation en Python vous donnera les comp\u00e9tences n\u00e9cessaires pour utiliser efficacement le langage dans diverses applications, et vous aidera \u00e0 devenir un d\u00e9veloppeur Python comp\u00e9tent.</p>"},{"location":"Off/posts/Section_00/1-Installation-Python/","title":"Installation Python","text":""},{"location":"Off/posts/Section_00/10-Sets/","title":"Les Sets","text":""},{"location":"Off/posts/Section_00/10-Sets/#les-sets","title":"Les Sets","text":"<p>Un ensemble est une collection d'\u00e9l\u00e9ments non ordonn\u00e9s et uniques en Python. Il est similaire \u00e0 une liste, mais les \u00e9l\u00e9ments d'un ensemble ne sont pas ordonn\u00e9s et ne peuvent pas \u00eatre dupliqu\u00e9s.</p> <p>Les ensembles sont cr\u00e9\u00e9s en pla\u00e7ant une s\u00e9quence d'\u00e9l\u00e9ments s\u00e9par\u00e9s par des virgules entre accolades <code>({})</code>.</p> <p>Voici un exemple d'ensemble en Python :</p> <pre><code>fruits = {'apple', 'banana', 'orange', 'mango'}\n</code></pre> <p>Comme les ensembles ne sont pas ordonn\u00e9s, vous ne pouvez pas acc\u00e9der \u00e0 leurs \u00e9l\u00e9ments \u00e0 l'aide d'un index. Au lieu de cela, vous pouvez utiliser l' inop\u00e9rateur pour v\u00e9rifier si un \u00e9l\u00e9ment se trouve dans un ensemble :</p> <pre><code>print('apple' in fruits)  # Output: True\nprint('kiwi' in fruits)   # Output: False\n</code></pre> <p>Vous pouvez ajouter des \u00e9l\u00e9ments \u00e0 un ensemble en utilisant la m\u00e9thode <code>add()</code> :</p> <pre><code>fruits.add('strawberry')\nprint(fruits)  # Output: {'apple', 'banana', 'orange', 'mango', 'strawberry'}\n</code></pre> <p>Vous pouvez supprimer des \u00e9l\u00e9ments d'un ensemble \u00e0 l'aide de la m\u00e9thode <code>remove()</code> :</p> <pre><code>fruits.remove('apple')\nprint(fruits)  # Output: {'banana', 'orange', 'mango', 'strawberry'}\n</code></pre> <p>Vous pouvez \u00e9galement effectuer des op\u00e9rations d'ensemble telles que l'union, l'intersection et la diff\u00e9rence \u00e0 l'aide des m\u00e9thodes ou op\u00e9rateurs correspondants :</p> <pre><code>vegetables = {'carrot', 'tomato', 'cabbage', 'potato'}\n\n# Union\nprint(fruits | vegetables)  # Output: {'banana', 'orange', 'mango', 'cabbage', 'potato', 'strawberry', 'carrot', 'tomato'}\n\n# Intersection\nprint(fruits &amp; vegetables)  # Output: set()\n\n# Difference\nprint(fruits - vegetables)  # Output: {'banana', 'orange', 'mango', 'strawberry'}\n</code></pre> <p>Les ensembles sont utiles pour stocker et manipuler des collections de donn\u00e9es o\u00f9 l'ordre des \u00e9l\u00e9ments n'est pas important et les doublons doivent \u00eatre \u00e9vit\u00e9s.</p> <p>Voici une liste de certaines m\u00e9thodes et op\u00e9rations courantes que vous pouvez utiliser avec les ensembles en Python :</p> <ul> <li>add(x): Ajoute un \u00e9l\u00e9ment x\u00e0 l'ensemble.</li> <li>clear(): Supprime tous les \u00e9l\u00e9ments de l'ensemble.</li> <li>copy(): renvoie une copie superficielle de l'ensemble.</li> <li>difference(other_set): Renvoie un nouvel ensemble qui contient les \u00e9l\u00e9ments qui sont dans l'ensemble mais pas dans other_set.</li> <li>difference_update(other_set): Supprime les \u00e9l\u00e9ments qui se trouvent dans other_setl'ensemble.</li> <li>discard(x): Supprime l'\u00e9l\u00e9ment xde l'ensemble, s'il est pr\u00e9sent.</li> <li>intersection(other_set): Renvoie un nouvel ensemble qui contient les \u00e9l\u00e9ments communs \u00e0 l'ensemble et other_set.</li> <li>intersection_update(other_set): Supprime les \u00e9l\u00e9ments qui ne sont pas communs \u00e0 l'ensemble et other_set.</li> <li>isdisjoint(other_set): Renvoie Truesi l'ensemble n'a aucun \u00e9l\u00e9ment en commun avec other_set, Falsesinon.</li> <li>issubset(other_set): Retourne Truesi l'ensemble est un sous-ensemble de other_set, Falsesinon.</li> <li>issuperset(other_set): Retourne Truesi l'ensemble est un sur-ensemble de other_set, Falsesinon.</li> <li>pop(): Supprime et renvoie un \u00e9l\u00e9ment arbitraire de l'ensemble.</li> <li>remove(x): Supprime l'\u00e9l\u00e9ment xde l'ensemble. S'il xn'est pas pr\u00e9sent, il l\u00e8ve un KeyError.</li> <li>symmetric_difference(other_set): Renvoie un nouvel ensemble qui contient les \u00e9l\u00e9ments</li> </ul>"},{"location":"Off/posts/Section_00/11-Booleens/","title":"Les Bool\u00e9ens","text":""},{"location":"Off/posts/Section_00/11-Booleens/#les-booleens","title":"Les Bool\u00e9ens","text":"<p>En Python, les bool\u00e9ens (ou bool) sont utilis\u00e9s pour repr\u00e9senter des valeurs logiques (vrai ou faux). Les constantes bool\u00e9ennes en Python sont \"True\" et \"False\". Ils peuvent \u00eatre utilis\u00e9s dans les op\u00e9rateurs de comparaison pour cr\u00e9er des expressions bool\u00e9ennes qui peuvent \u00eatre utilis\u00e9es dans les structures de contr\u00f4le de flux, comme les instructions \"if\" et \"while\".</p> <p>Voici quelques exemples d'utilisation des bool\u00e9ens en python: </p><pre><code># Stocker une valeur bool\u00e9enne dans une variable\nis_raining = True\nis_sunny = False\n\n# Utilisation dans une instruction conditionnelle\nif is_raining:\n    print(\"Il pleut\")\nelse:\n    print(\"Il ne pleut pas\")\n\n# Utilisation avec un op\u00e9rateur de comparaison\nx = 5\nprint(x == 5)  # affiche True\nprint(x &gt; 3)   # affiche True\n\n# Utilisation avec des op\u00e9rateurs bool\u00e9ens\nif is_raining and not is_sunny:\n    print(\"Il pleut, mais il fait pas beau\")\nelif is_raining or is_sunny:\n    print(\"Il pleut ou il fait beau\")\n</code></pre> <p>Il est important de noter que les valeurs bool\u00e9ennes sont \u00e9galement des sous-classes de la classe int en python, donc True est \u00e9quivalent \u00e0 1, et False \u00e9quivalent \u00e0 0. Il est possible de convertir n'importe quel objet en bool\u00e9en en utilisant la fonction <code>bool()</code> </p><pre><code>x = 5\nprint(bool(x)) # True\nx = 0\nprint(bool(x)) # False\nx = \"\"\nprint(bool(x)) # False\n</code></pre>"},{"location":"Off/posts/Section_00/12-Operateurs/","title":"Les Op\u00e9rateurs","text":""},{"location":"Off/posts/Section_00/12-Operateurs/#les-operateurs","title":"Les Op\u00e9rateurs","text":"<p>En Python, il existe diff\u00e9rents types d'op\u00e9rateurs qui permettent d'effectuer des op\u00e9rations arithm\u00e9tiques, de comparaison, d'affectation, logiques, d'appartenance, d'identit\u00e9 etc.</p>"},{"location":"Off/posts/Section_00/12-Operateurs/#operateurs-arithmetiques","title":"Op\u00e9rateurs arithm\u00e9tiques :","text":"<ul> <li>Addition : <code>+</code></li> <li>Soustraction : <code>-</code></li> <li>Multiplication : <code>*</code></li> <li>Division avec un nombre d\u00e9cimal : <code>/</code></li> <li>Modulo : <code>%</code></li> <li>Exponentiation : <code>**</code></li> <li>division avec un nombre positif : <code>//</code></li> </ul> <pre><code>x = 5\ny = 3\nprint(x + y)  # 8\nprint(x - y)  # 2\nprint(x * y)  # 15\nprint(x / y)  # 1.6666666666666667\nprint(x % y)  # 2\nprint(x ** y) # 125\nprint(x // y) # 1\n</code></pre>"},{"location":"Off/posts/Section_00/12-Operateurs/#operateurs-de-comparaison","title":"Op\u00e9rateurs de comparaison :","text":"<ul> <li>Egal : ==</li> <li>Diff\u00e9rent : !=</li> <li>Inf\u00e9rieur : &lt;</li> <li>Inf\u00e9rieur ou \u00e9gal : &lt;=</li> <li>Sup\u00e9rieur : &gt;</li> <li>Sup\u00e9rieur ou \u00e9gal : &gt;=</li> </ul> <pre><code>x = 5\ny = 3\nprint(x == y)  # False\nprint(x != y)  # True\nprint(x &lt; y)   # False\nprint(x &lt;= y)  # False\nprint(x &gt; y)   # True\nprint(x &gt;= y)  # True\n</code></pre>"},{"location":"Off/posts/Section_00/12-Operateurs/#operateurs-logiques","title":"Op\u00e9rateurs logiques :","text":"<ul> <li>And : and</li> <li>Or : or</li> <li>Not : not</li> </ul> <pre><code>x = True\ny = False\nprint(x and y) # False\nprint(x or y)  # True\nprint(not x)   # False\n</code></pre>"},{"location":"Off/posts/Section_00/12-Operateurs/#operateurs-daffectation","title":"Op\u00e9rateurs d'affectation :","text":"<ul> <li>Affectation : =</li> <li>Addition et affectation : +=</li> <li>Soustraction et affectation : -=</li> <li>Multiplication et affectation : *=</li> <li>Division et affectation : /=</li> <li>Modulo et affectation : %=</li> <li>Exponentiation et affectation : **=</li> <li>division positive et affectation : //= <pre><code>x = 5\nx += 3 # x = x + 3\nprint(x) # 8\nx *= 2 # x = x * 2\nprint(x) # 16\n</code></pre></li> </ul>"},{"location":"Off/posts/Section_00/12-Operateurs/#operateurs-specifique-en-python","title":"Operateurs sp\u00e9cifique en python","text":"<p>il existe des op\u00e9rateurs sp\u00e9cifiques en Python qui permettent de r\u00e9aliser des op\u00e9rations sp\u00e9cifiques. Voici quelques exemples :</p>"},{"location":"Off/posts/Section_00/12-Operateurs/#operateur-dappartenance-in-et-not-in","title":"Op\u00e9rateur d'appartenance : <code>in</code> et <code>not in</code>","text":"<ul> <li><code>in</code> permet de v\u00e9rifier si un \u00e9l\u00e9ment appartient \u00e0 une s\u00e9quence (liste, cha\u00eene de caract\u00e8res, tuple, etc.). Il retourne True si l'\u00e9l\u00e9ment est pr\u00e9sent dans la s\u00e9quence et False sinon.</li> <li><code>not in</code> permet de v\u00e9rifier si un \u00e9l\u00e9ment n'appartient pas \u00e0 une s\u00e9quence. Il retourne True si l'\u00e9l\u00e9ment n'est pas pr\u00e9sent dans la s\u00e9quence et False s'il y est. <pre><code>x = [1, 2, 3, 4, 5]\nprint(3 in x)  # True\nprint(6 in x)  # False\nprint(3 not in x)  # False\nprint(6 not in x)  # True\n</code></pre></li> </ul>"},{"location":"Off/posts/Section_00/12-Operateurs/#operateurs-didentite-is-et-is-not","title":"Op\u00e9rateurs d'identit\u00e9 : <code>is</code> et <code>is not</code>","text":"<ul> <li><code>is</code> permet de v\u00e9rifier si deux r\u00e9f\u00e9rences de variables pointent vers le m\u00eame objet. Il retourne <code>True</code> si les deux r\u00e9f\u00e9rences pointent vers le m\u00eame objet et <code>False</code> sinon.</li> <li><code>is not</code> permet de v\u00e9rifier si deux r\u00e9f\u00e9rences de variables ne pointent pas vers le m\u00eame objet. Il retourne <code>True</code> si les deux r\u00e9f\u00e9rences ne pointent pas vers le m\u00eame objet et <code>False</code> sinon. <pre><code>x = [1, 2, 3]\ny = x\nz = [1, 2, 3]\nprint(x is y)  # True\nprint(x is z)  # False\nprint(x is not y) # False\nprint(x is not z) # True\n</code></pre> Il est important de noter que l'op\u00e9rateur == comparant les valeurs des objets alors que is comparant les objets eux-m\u00eame.</li> </ul>"},{"location":"Off/posts/Section_00/12-Operateurs/#operateur-ternaire-x-if-c-else-y","title":"Op\u00e9rateur ternaire : <code>x if c else y</code>","text":"<ul> <li>Il permet de choisir entre x et y en fonction de la valeur bool\u00e9ene c. <pre><code>age = 25\nis_adult = True if age &gt;= 18 else False\nprint(is_adult) # True\n</code></pre></li> </ul>"},{"location":"Off/posts/Section_00/12-Operateurs/#operateur-de-deballage-demballage","title":"Op\u00e9rateur de d\u00e9ballage d'emballage <code>*</code>","text":"<ul> <li>Il permet de d\u00e9baller les \u00e9l\u00e9ments d'une liste ou d'un tuple et de les passer en param\u00e8tre d'une fonction. <pre><code>def add(x, y, z):\n    return x + y + z\nx = [1, 2, 3]\nprint(add(*x))  # 6\n</code></pre></li> </ul> <p>Ces op\u00e9rateurs et fonctionnalit\u00e9s sont tr\u00e8s utiles pour \u00e9crire des codes plus concis et plus lisible, ils permettent de simplifier les structures de contr\u00f4le de flux, les comparaisons et les affectations. Il est important de comprendre comment ils fonctionnent pour pouvoir les utiliser efficacement dans vos programmes.</p> <p>Il est \u00e9galement important de mentionner qu'il existe d'autres op\u00e9rateurs sp\u00e9cifique en python tels que les operateurs de bit (shift, AND, OR, NOT, XOR), operateur <code>lambda</code> pour cr\u00e9er des fonction anonymes, operateur <code>with</code> pour la gestion des contextes, <code>yield</code> pour la cr\u00e9ation des g\u00e9n\u00e9rateurs, et bien d'autres.</p>"},{"location":"Off/posts/Section_00/13-Instructions-conditionnelles/","title":"Conditions Python","text":""},{"location":"Off/posts/Section_00/13-Instructions-conditionnelles/#conditions-python","title":"Conditions Python","text":"<p>En Python, vous pouvez utiliser des ifinstructions pour ex\u00e9cuter un bloc de code uniquement si une certaine condition est remplie.</p> <p>Voici la syntaxe de base d'une ifinstruction en Python : </p><pre><code>if condition:\n  # code to execute if the condition is True\n</code></pre> <p>Le condition dans l' ifinstruction est une expression qui prend la valeur soit <code>True ou False</code>. Si la condition est True, le bloc de code sous l' ifinstruction est ex\u00e9cut\u00e9. Si la condition est False, le bloc de code est ignor\u00e9.</p> <p>Voici un exemple d' ifinstruction en Python : </p><pre><code>x = 10\n\nif x &gt; 5:\n  print(\"x is greater than 5\")  # Output: \"x is greater than 5\"\n</code></pre> <p>Vous pouvez \u00e9galement utiliser la elseclause pour sp\u00e9cifier un bloc de code \u00e0 ex\u00e9cuter si la condition est False: </p><pre><code>x = 3\n\nif x &gt; 5:\n  print(\"x is greater than 5\")\nelse:\n  print(\"x is not greater than 5\")  # Output: \"x is not greater than 5\n</code></pre> <p>Vous pouvez utiliser la elifclause pour sp\u00e9cifier des conditions suppl\u00e9mentaires \u00e0 v\u00e9rifier : </p><pre><code>x = 3\n\nif x &gt; 5:\n  print(\"x is greater than 5\")\nelif x &lt; 5:\n  print(\"x is less than 5\")  # Output: \"x is less than 5\"\nelse:\n  print(\"x is equal to 5\")\n</code></pre> <p>Vous pouvez utiliser n'importe quel type d'expression dans la condition d'une ifinstruction, tant qu'elle correspond \u00e0 une valeur bool\u00e9enne ( Trueou False). Vous pouvez \u00e9galement utiliser des op\u00e9rateurs logiques tels que and, oret notpour combiner plusieurs conditions.</p>"},{"location":"Off/posts/Section_00/14-Boucles-for/","title":"La Boucle for","text":""},{"location":"Off/posts/Section_00/14-Boucles-for/#la-boucle-for","title":"La Boucle for","text":"<p>La boucle for est utilis\u00e9e pour it\u00e9rer sur les \u00e9l\u00e9ments d'une s\u00e9quence (liste, cha\u00eene de caract\u00e8res, tuple, etc.) ou sur un it\u00e9rable (un objet qui peut \u00eatre utilis\u00e9 dans une boucle for). La syntaxe g\u00e9n\u00e9rale d'une boucle for est la suivante : </p><pre><code>for variable in it\u00e9rable:\n    # code \u00e0 ex\u00e9cuter pour chaque \u00e9l\u00e9ment de l'it\u00e9rable\n</code></pre> <p>It\u00e9ration sur les \u00e9l\u00e9ments d'une liste </p><pre><code>fruits = [\"pomme\", \"banane\", \"orange\"]\nfor fruit in fruits:\n    print(fruit)\n# affiche \"pomme\", \"banane\", \"orange\"\n</code></pre> <p>It\u00e9ration sur les \u00e9l\u00e9ments d'une cha\u00eene de caract\u00e8res </p><pre><code>mot = \"Bonjour\"\nfor letter in mot:\n    print(letter)\n# affiche \"B\", \"o\", \"n\", \"j\", \"o\", \"u\", \"r\"\n</code></pre> <p>It\u00e9ration sur les range d'un nombre </p><pre><code>for i in range(5):\n    print(i)\n#affiche 0 1 2 3 4\n</code></pre> <p>Il est possible d'utiliser la fonction enumerate() pour obtenir l'index et la valeur de chaque \u00e9l\u00e9ment dans une boucle for. </p><pre><code>fruits = [\"pomme\", \"banane\", \"orange\"]\nfor i, fruit in enumerate(fruits):\n    print(i, fruit)\n#affiche (0, 'pomme') (1, 'banane') (2, 'orange')\n</code></pre> <p>Il est \u00e9galement possible d'utiliser la boucle for pour it\u00e9rer sur des dictionnaires en utilisant les m\u00e9thodes items() ou keys(). </p><pre><code>person = {\"nom\": \"Dupont\", \"age\": 30, \"ville\": \"Paris\"}\nfor key in person:\n    print(key, person[key])\n#affiche 'nom' 'Dupont' ,'age' 30, 'ville' Paris\n</code></pre> <p>Il est possible d'utiliser les instruction break pour sortir d'une boucle for quand une certaine condition est remplie, ou continue pour passer \u00e0 l'it\u00e9ration suivante. </p><pre><code>for i in range(10):\n    if i == 5:\n        break\n    print(i)\n# affiche 0 1 2 3 4\n\nfor i in range(10):\n    if i % 2 == 0:\n        continue\n    print(i)\n# affiche 1 3 5 7 9\n</code></pre>"},{"location":"Off/posts/Section_00/15-Boucles-while/","title":"La Boucle While","text":""},{"location":"Off/posts/Section_00/15-Boucles-while/#la-boucle-while","title":"La Boucle While","text":"<p>La boucle <code>while</code> permet d'ex\u00e9cuter une suite d'instructions tant qu'une condition est vraie. La syntaxe g\u00e9n\u00e9rale d'une boucle while est la suivante : </p><pre><code>while condition:\n    # code \u00e0 ex\u00e9cuter tant que la condition est vraie\n</code></pre> <p>Utilisation de la boucle while pour compter les nombres impairs jusqu'\u00e0 10 </p><pre><code>i = 0\nwhile i &lt; 10:\n    i += 1\n    if i % 2 == 0:\n        continue\n    print(i)\n#affiche 1 3 5 7 9\n</code></pre> <p>Utilisation de while pour demander \u00e0 l'utilisateur de saisir un mot jusqu'\u00e0 ce qu'il saisisse 'stop' </p><pre><code>word = \"\"\nwhile word != \"stop\":\n    word = input(\"Entrez un mot (entrez 'stop' pour quitter): \")\n    print(\"Le mot saisi est : \", word)\n</code></pre> <p>Il est important de noter que si la condition est fausse d\u00e8s le d\u00e9part la boucle ne sera jamais ex\u00e9cut\u00e9e, il est donc important d'initialiser les variables qui servent pour la condition, pour s'assurer qu'elle sera vraie au moins une fois.</p> <p>Il est \u00e9galement possible d'utiliser les instruction <code>break</code> pour sortir d'une boucle <code>while</code> quand une certaine condition est remplie, ou <code>continue</code> pour passer \u00e0 l'it\u00e9ration suivante. Il est important d'utiliser ces instructions avec pr\u00e9caution pour \u00e9viter les boucles infinies qui bloque le programme. Il est recommand\u00e9 de mettre des conditions pour sortir de la boucle ou utiliser des compteurs pour limiter les tours de boucles.</p>"},{"location":"Off/posts/Section_00/16-Fonction-range/","title":"Le Fonction range","text":""},{"location":"Off/posts/Section_00/16-Fonction-range/#le-fonction-range","title":"Le Fonction range","text":"<p>La fonction <code>range()</code> permet de cr\u00e9er un objet it\u00e9rable contenant une s\u00e9quence de nombres. Elle prend un, deux ou trois arguments : * <code>range(stop)</code>: g\u00e9n\u00e8re une s\u00e9quence de nombres allant de 0 (inclus) \u00e0 <code>stop</code> (exclu). * <code>range(start, stop)</code>: g\u00e9n\u00e8re une s\u00e9quence de nombres allant de <code>start</code> (inclus) \u00e0 <code>stop</code> (exclu). * <code>range(start, stop, step)</code>: g\u00e9n\u00e8re une s\u00e9quence de nombres allant de <code>start</code> (inclus) \u00e0 stop (exclu), en sautant de <code>step</code> en <code>step</code>.</p> <p>G\u00e9n\u00e9rer une s\u00e9quence de nombres de 0 \u00e0 4 </p><pre><code>for i in range(5):\n    print(i) #affiche 0 1 2 3 4\n</code></pre> <p>G\u00e9n\u00e9rer une s\u00e9quence de nombres de 2 \u00e0 7 </p><pre><code>for i in range(2, 8):\n    print(i) #affiche 2 3 4 5 6 7\n</code></pre> <p>G\u00e9n\u00e9rer une s\u00e9quence de nombres de 1 \u00e0 10 en sautant de 2 en 2 </p><pre><code>for i in range(1, 11, 2):\n    print(i) #affiche 1 3 5 7 9\n</code></pre> <p>Il est important de noter que la fonction <code>range()</code> ne g\u00e9n\u00e8re pas tous les \u00e9l\u00e9ments de la s\u00e9quence en m\u00e9moire mais elle g\u00e9n\u00e8re les \u00e9l\u00e9ments au fur et \u00e0 mesure de l'it\u00e9ration, cela permet de g\u00e9n\u00e9rer des s\u00e9quences de nombres tr\u00e8s grandes sans manger toute la m\u00e9moire. Il est donc possible de l'utiliser en combinaison avec la boucle for pour it\u00e9rer sur des s\u00e9quences de nombres.</p>"},{"location":"Off/posts/Section_00/17-Fonctions/","title":"Les fonctions","text":""},{"location":"Off/posts/Section_00/17-Fonctions/#les-fonctions","title":"Les fonctions","text":"<p>En Python, les fonctions sont des blocs de code r\u00e9utilisables qui peuvent \u00eatre appel\u00e9s \u00e0 plusieurs endroits dans un programme. Les fonctions permettent de rendre le code plus lisible, maintenable et r\u00e9utilisable.</p> <p>La syntaxe g\u00e9n\u00e9rale pour d\u00e9clarer une fonction est la suivante : </p><pre><code>def nom_de_fonction(param\u00e8tres):\n    # bloc d'instructions\n</code></pre> <p>D\u00e9claration d'une fonction qui prend deux nombres en entr\u00e9e et renvoie leur somme </p><pre><code>def somme(a, b):\n    return a + b\n\n# Appel de la fonction\nresultat = somme(3, 4)\nprint(resultat) # affiche 7\n</code></pre> <p>D\u00e9claration d'une fonction sans param\u00e8tre </p><pre><code>def bonjour():\n    return \"Bonjour\"\n\nresultat = bonjour()\nprint(resultat) #affiche Bonjour\n</code></pre> <p>Il est possible de d\u00e9finir des valeurs par d\u00e9faut pour les param\u00e8tres d'une fonction : </p><pre><code>def somme(a, b=0):\n    return a + b\n\n# Appel de la fonction\nresultat = somme(3) # si on ne donne pas de valeur pour b il prend 0 comme valeur par d\u00e9faut\nprint(resultat) # affiche 3\n</code></pre> <p>Il est possible \u00e9galement de utiliser args et *kwargs pour passer un nombre variable de param\u00e8tre \u00e0 une fonction. </p><pre><code>def test_args_kwargs(*args, **kwargs):\n    print(args)\n    print(kwargs)\n\ntest_args_kwargs(1, 2, 3, a=1, b=2)\n# affiche (1, 2, 3) {'a': 1, 'b': 2}\n</code></pre> <p>Les fonctions en python ont un scope local qui est ind\u00e9pendant des variables d\u00e9finies dans d'autres parties du programme. Cela signifie que les variables d\u00e9clar\u00e9es dans une fonction ne sont accessibles qu'\u00e0 l'int\u00e9rieur de cette fonction et ne peuvent pas \u00eatre utilis\u00e9es \u00e0 l'ext\u00e9rieur de cette fonction.</p> <p>Cependant, il est possible d'acc\u00e9der aux variables d\u00e9clar\u00e9es \u00e0 l'ext\u00e9rieur d'une fonction en les d\u00e9clarant comme <code>global</code> \u00e0 l'int\u00e9rieur de la fonction. Il est aussi possible de retourner une ou plusieurs valeurs en utilisant l'instruction <code>return</code>.</p> <pre><code># d\u00e9claration de variable globale\nx = 10\n\ndef my_function():\n    # d\u00e9claration de variable locale\n    y = 5\n    # utilisation de variable locale\n    print(y)\n\n# appel de la fonction\nmy_function() # affiche 5\n\n# utilisation de variable globale\nprint(x) # affiche 10\n\n# utilisation de variable locale \u00e0 l'ext\u00e9rieur de la fonction\nprint(y) # provoque une erreur car y est une variable locale de la fonction my_function et n'est pas d\u00e9finie \u00e0 l'ext\u00e9rieur de cette fonction\n</code></pre>"},{"location":"Off/posts/Section_00/18-Comprehension-de-listes/","title":"Les compr\u00e9hension de listes","text":""},{"location":"Off/posts/Section_00/18-Comprehension-de-listes/#les-comprehension-de-listes","title":"Les compr\u00e9hension de listes","text":"<p>Les compr\u00e9hensions de listes en Python sont un moyen concis de cr\u00e9er des listes en utilisant une syntaxe simple. Il s'agit d'une technique de compr\u00e9hension de liste qui permet de cr\u00e9er une nouvelle liste en it\u00e9rant sur une autre liste (ou tout autre it\u00e9rable), en appliquant une fonction \u00e0 chaque \u00e9l\u00e9ment de celle-ci et en s\u00e9lectionnant les \u00e9l\u00e9ments qui satisfont une condition.</p> <p>Voici un exemple de compr\u00e9hension de liste qui cr\u00e9e une nouvelle liste contenant les carr\u00e9s des entiers de 0 \u00e0 9:</p> <pre><code>squares = [x**2 for x in range(10)]\nprint(squares)\n</code></pre> <p>La sortie sera : </p><pre><code>[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n</code></pre> <p>On peut \u00e9galement ajouter une condition pour filtrer les \u00e9l\u00e9ments de la liste d'origine en utilisant le mot-cl\u00e9 \"if\" : </p><pre><code>squares = [x**2 for x in range(10) if x % 2 == 0]\nprint(squares)\n</code></pre> <p>La sortie sera : </p><pre><code>[0, 4, 16, 36, 64]\n</code></pre> <p>Il est possible d'utiliser des compr\u00e9hensions de listes pour cr\u00e9er des listes \u00e0 partir de plusieurs it\u00e9rables en utilisant des expressions de compr\u00e9hension de listes imbriqu\u00e9es.</p> <p>Voici un exemple de compr\u00e9hension de listes imbriqu\u00e9es en Python : </p><pre><code>matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nflat_list = [x for row in matrix for x in row]\nprint(flat_list)\n</code></pre> <p>La sortie sera : </p><pre><code>[1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre> <p>Dans cet exemple, nous avons une matrice (liste de listes) et nous voulons cr\u00e9er une nouvelle liste qui contient tous les \u00e9l\u00e9ments de la matrice dans un ordre plat. Pour ce faire, nous utilisons une compr\u00e9hension de liste imbriqu\u00e9e. La premi\u00e8re compr\u00e9hension de liste (for row in matrix) it\u00e8re sur chaque ligne de la matrice, tandis que la seconde compr\u00e9hension de liste (for x in row) it\u00e8re sur chaque \u00e9l\u00e9ment de chaque ligne.</p> <p>Il est important de noter que l'ordre des boucles dans une compr\u00e9hension de listes imbriqu\u00e9es est important. Dans l'exemple ci-dessus, nous avons d'abord it\u00e9r\u00e9 sur les lignes de la matrice, puis sur les \u00e9l\u00e9ments de chaque ligne. Si nous avions invers\u00e9 l'ordre des boucles, nous aurions obtenu une liste qui contient d'abord tous les \u00e9l\u00e9ments de la premi\u00e8re colonne, puis tous les \u00e9l\u00e9ments de la seconde colonne, etc.</p>"},{"location":"Off/posts/Section_00/19-Fichiers/","title":"Les Fichiers","text":""},{"location":"Off/posts/Section_00/19-Fichiers/#les-fichiers","title":"Les Fichiers","text":"<p>Les fichiers en Python sont des ressources externes qui contiennent des donn\u00e9es telles que des textes, des images ou des vid\u00e9os. Pour acc\u00e9der \u00e0 ces donn\u00e9es, vous devez ouvrir un fichier en utilisant des fonctions de la biblioth\u00e8que standard de Python. Il existe deux modes d'ouverture de fichiers en Python : le mode lecture et le mode \u00e9criture.</p>"},{"location":"Off/posts/Section_00/19-Fichiers/#lire-un-fichier-en-utilisant-le-mode-lecture","title":"Lire un fichier en utilisant le mode lecture :","text":"<pre><code>with open('example.txt', 'r') as f:\n    print(f.read())\n</code></pre> <p>Dans cet exemple, nous utilisons la fonction open() pour ouvrir un fichier appel\u00e9 \"example.txt\" en mode lecture ('r'). La fonction read() est ensuite utilis\u00e9e pour lire le contenu du fichier et l'afficher \u00e0 l'\u00e9cran.</p>"},{"location":"Off/posts/Section_00/19-Fichiers/#ecrire-dans-un-fichier-en-utilisant-le-mode-ecriture","title":"Ecrire dans un fichier en utilisant le mode \u00e9criture :","text":"<pre><code>with open('example.txt', 'w') as f:\n    f.write(\"Hello World!\")\n</code></pre> <p>Dans cet exemple, nous utilisons la fonction <code>open()</code> pour ouvrir un fichier appel\u00e9 \"example.txt\" en mode \u00e9criture ('w'). La fonction <code>write()</code> est ensuite utilis\u00e9e pour \u00e9crire le texte \"Hello World!\" dans le fichier. Si le fichier n'existe pas, il sera cr\u00e9\u00e9. Si le fichier existe d\u00e9j\u00e0, son contenu pr\u00e9c\u00e9dent sera \u00e9cras\u00e9.</p> <p>Il est important de noter que lorsque vous utilisez <code>open()</code> on utilise g\u00e9n\u00e9ralement \"with\" pour g\u00e9rer la fermeture automatique du fichier. Cela permet de s'assurer que le fichier est ferm\u00e9 correctement m\u00eame en cas d'exception.</p>"},{"location":"Off/posts/Section_00/2-Terminal/","title":"D\u00e9couvrir le terminal","text":""},{"location":"Off/posts/Section_00/20-Expressions-lambda/","title":"Les Expressions Lambda","text":""},{"location":"Off/posts/Section_00/20-Expressions-lambda/#les-expressions-lambda","title":"Les Expressions Lambda","text":"<p>Les expressions lambda en Python sont un moyen de cr\u00e9er des fonctions anonymes, c'est-\u00e0-dire des fonctions sans nom. Ces fonctions peuvent \u00eatre utilis\u00e9es pour des t\u00e2ches simples et courtes, telles que des calculs simples ou des filtrages de listes.</p> <p>Voici un exemple d'utilisation d'une expression lambda pour cr\u00e9er une fonction qui prend un nombre en entr\u00e9e et le multiplie par 2 : </p><pre><code>double = lambda x: x*2\nprint(double(5)) # 10\n</code></pre> <p>Dans cet exemple, nous utilisons la syntaxe lambda pour cr\u00e9er une fonction anonyme qui prend un argument x et retourne x multipli\u00e9 par 2. Nous assignons ensuite cette fonction \u00e0 la variable \"double\" et utilisons ensuite cette variable pour appeler la fonction.</p> <p>Les expressions lambda peuvent \u00e9galement \u00eatre utilis\u00e9es avec des fonctions telles que <code>map()</code> et <code>filter()</code> pour effectuer des op\u00e9rations sur des listes.</p> <p>Voici un exemple d'utilisation d'une expression lambda avec la fonction <code>map()</code> pour doubler tous les \u00e9l\u00e9ments d'une liste: </p><pre><code>numbers = [1, 2, 3, 4, 5]\ndoubled_numbers = list(map(lambda x: x*2, numbers))\nprint(doubled_numbers) # [2, 4, 6, 8, 10]\n</code></pre> <p>Il est important de noter que les expressions lambda sont limit\u00e9es \u00e0 une seule instruction et doivent \u00eatre utilis\u00e9es pour des t\u00e2ches simples et courtes. Pour des t\u00e2ches plus complexes, il est pr\u00e9f\u00e9rable d'utiliser des fonctions normales d\u00e9finies avec la syntaxe <code>def</code>. Les fonctions d\u00e9finies avec def ont un nom et peuvent contenir plusieurs instructions, ce qui les rend plus faciles \u00e0 lire, \u00e0 comprendre et \u00e0 maintenir. Les fonctions d\u00e9finies avec def peuvent \u00e9galement \u00eatre r\u00e9utilis\u00e9es dans d'autres parties de votre code, ce qui n'est pas le cas pour les fonctions lambda qui sont g\u00e9n\u00e9ralement utilis\u00e9es pour des t\u00e2ches sp\u00e9cifiques et ponctuelles.</p>"},{"location":"Off/posts/Section_00/21-Programmation-Orientee-Objet/","title":"Programmation orient\u00e9e objet","text":""},{"location":"Off/posts/Section_00/21-Programmation-Orientee-Objet/#programmation-orientee-objet","title":"Programmation orient\u00e9e objet","text":""},{"location":"Off/posts/Section_00/21-Programmation-Orientee-Objet/#definition","title":"D\u00e9finition :","text":"<p>La programmation orient\u00e9e objet (POO) est un paradigme de programmation bas\u00e9 sur le concept d' <code>objets</code>, qui peut contenir des donn\u00e9es et du code qui manipulent ces donn\u00e9es. En Python, vous pouvez utiliser des techniques POO pour cr\u00e9er des classes et des objets, ce qui peut vous aider \u00e0 structurer votre code et \u00e0 le rendre plus r\u00e9utilisable et maintenable.</p>"},{"location":"Off/posts/Section_00/21-Programmation-Orientee-Objet/#definir-une-classe","title":"D\u00e9finir une classe","text":"<p>une classe est un mod\u00e8le qui d\u00e9finit les attributs et les comportements d'un groupe d'objets. Vous pouvez d\u00e9finir une classe en Python en utilisant le mot cl\u00e9 <code>class</code>, suivi du nom de la classe et de deux-points <code>:</code>. La d\u00e9finition de classe doit inclure une m\u00e9tode <code>__init__</code> appel\u00e9e lorsqu'un objet est cr\u00e9\u00e9 \u00e0 partir de la classe. Cette m\u00e9thode peut \u00eatre utilis\u00e9e pour d\u00e9finir les valeurs initiales des attributs de l'objet.</p> <p>Voici un exemple de d\u00e9finition de classe pour une simple classe <code>Person</code>:</p> <pre><code>class Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\n</code></pre>"},{"location":"Off/posts/Section_00/21-Programmation-Orientee-Objet/#creer-un-objet","title":"Cr\u00e9er un objet","text":"<p>Pour cr\u00e9er un objet \u00e0 partir d'une classe, vous pouvez utiliser le nom de la classe suivi de parenth\u00e8ses et transmettre tous les arguments requis \u00e0 la m\u00e9thode <code>__init__</code>. Cela cr\u00e9era un nouvel objet avec les valeurs d'attribut sp\u00e9cifi\u00e9es.</p> <p>Voici un exemple de cr\u00e9ation d'un objet \u00e0 partir de la Personclasse : </p><pre><code>p = Person(\"John\", 30)\nprint(p.name)  # prints \"John\"\nprint(p.age)   # prints 30\n</code></pre>"},{"location":"Off/posts/Section_00/21-Programmation-Orientee-Objet/#definir-des-methodes","title":"D\u00e9finir des m\u00e9thodes","text":"<p>Une m\u00e9thode est une fonction d\u00e9finie dans une classe et utilis\u00e9e pour effectuer une action sp\u00e9cifique sur les donn\u00e9es de l'objet. Vous pouvez d\u00e9finir une m\u00e9thode en utilisant le mot-cl\u00e9 <code>def</code>, suivi du nom de la m\u00e9thode et des arguments requis.</p> <p>Voici un exemple de d\u00e9finition d'une m\u00e9thode <code>greet()</code> pour la classe <code>Person</code> : </p><pre><code>class Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\n\n  def greet(self):\n    print(f\"Hello, my name is {self.name} and I am {self.age} years old.\")\n</code></pre>"},{"location":"Off/posts/Section_00/21-Programmation-Orientee-Objet/#heritage","title":"H\u00e9ritage","text":"<p>L'h\u00e9ritage est un moyen de cr\u00e9er une nouvelle classe qui est une version modifi\u00e9e d'une classe existante. La nouvelle classe est appel\u00e9e la sous-classe et la classe existante est la superclasse. La sous-classe peut h\u00e9riter des attributs et des m\u00e9thodes de la superclasse et peut \u00e9galement avoir ses propres attributs et m\u00e9thodes.</p> <p>Voici un exemple de d\u00e9finition d'une sous-classe qui h\u00e9rite de la classe <code>Person</code>: </p><pre><code>class Student(Person):\n  def __init__(self, name, age, student_id):\n    super().__init__(name, age)\n    self.student_id = student_id\n</code></pre>"},{"location":"Off/posts/Section_00/21-Programmation-Orientee-Objet/#le-polymorphisme","title":"Le polymorphisme","text":"<p>Le polymorphisme est un concept de la programmation orient\u00e9e objet (POO) qui permet \u00e0 une instance d'une classe d'\u00eatre utilis\u00e9e comme une instance d'une de ses sous-classes ou d'une classe parente. Il permet d'\u00e9crire des programmes plus flexibles et r\u00e9utilisables, car il permet de traiter des objets de diff\u00e9rentes classes de mani\u00e8re similaire.</p> <p>Il existe deux types de polymorphisme en POO : le polymorphisme statique et le polymorphisme dynamique.</p> <p>Le polymorphisme statique, \u00e9galement appel\u00e9 surcharge, se produit lorsque plusieurs m\u00e9thodes dans une classe ont le m\u00eame nom mais des signitures diff\u00e9rentes (nombre et type de param\u00e8tres). Lorsqu'une m\u00e9thode est appel\u00e9e, le compilateur d\u00e9termine la version appropri\u00e9e de la m\u00e9thode \u00e0 appeler en fonction des param\u00e8tres pass\u00e9s. </p><pre><code>class Animal:\n    def speak(self):\n        pass\n\nclass Dog(Animal):\n    def speak(self):\n        return \"Woof\"\n\nclass Cat(Animal):\n    def speak(self):\n        return \"Meow\"\n\nanimals = [Dog(), Cat(), Dog()]\nfor animal in animals:\n    print(animal.speak())\n# will print \"Woof\", \"Meow\", \"Woof\"\n</code></pre> <p>Le polymorphisme dynamique, \u00e9galement appel\u00e9 surcharge d'op\u00e9rateur, se produit lorsqu'une m\u00e9thode est appel\u00e9e sur un objet via une r\u00e9f\u00e9rence de classe g\u00e9n\u00e9rique. Le compilateur d\u00e9termine quelle version de la m\u00e9thode doit \u00eatre appel\u00e9e en ex\u00e9cutant le programme, en fonction de la classe r\u00e9elle de l'objet. </p><pre><code>class Dog:\n    def __init__(self, name):\n        self._name = name\n\n    def speak(self):\n        return \"Woof, my name is \" + self._name\n\nclass Cat:\n    def __init__(self, name):\n        self._name = name\n\n    def speak(self):\n        return \"Meow, my name is \" + self._name\n\nanimals = [Dog(\"Alex\"), Cat(\"Luna\"), Dog(\"Max\")]\nfor animal in animals:\n    print(animal.speak())\n# will print \"Woof, my name is Alex\",\"Meow, my name is Luna\", \"Woof, my name is Max\"\n</code></pre> <p>Il est important de noter que pour que le polymorphisme fonctionne, les m\u00e9thodes appel\u00e9es doivent avoir la m\u00eame signature (c'est-\u00e0-dire le m\u00eame nom et les m\u00eames param\u00e8tres) dans les classes enfant.</p> <p>Le polymorphisme est un des concepts fondamentaux de la POO, il permet une grande flexibilit\u00e9, la r\u00e9utilisabilit\u00e9 et la maintenance du code. Il permet de traiter des objets de diff\u00e9rentes classes de mani\u00e8re similaire, ce qui rend les programmes plus faciles \u00e0 \u00e9crire.</p>"},{"location":"Off/posts/Section_00/22-Modules-et-Packages/","title":"Les Modules et Packages","text":""},{"location":"Off/posts/Section_00/22-Modules-et-Packages/#les-modules-et-packages","title":"Les Modules et Packages","text":""},{"location":"Off/posts/Section_00/22-Modules-et-Packages/#les-modules","title":"Les modules","text":"<p>En Python, les modules sont des fichiers contenant des d\u00e9finitions de fonctions, de variables et d'autres types d'objets que l'on peut r\u00e9utiliser dans d'autres programmes. Les modules permettent de structurer le code en le s\u00e9parant en plusieurs fichiers, ce qui le rend plus facile \u00e0 comprendre et \u00e0 maintenir. Les modules Python sont cr\u00e9\u00e9s en enregistrant des scriptes dans un fichier avec l'extension <code>.py</code>.</p> <p>Il est possible d'utiliser les modules en utilisant l'instruction import. Par exemple, pour utiliser le module math, il suffit de taper import math en d\u00e9but de script. Il est \u00e9galement possible d'importer uniquement une partie des fonctions en utilisant l'instruction from suivi du nom du module, suivi de import suivi du nom des fonctions \u00e0 importer.</p> <p>Exemple : utilisation de la fonction <code>sqrt()</code> du module math pour calculer la racine carr\u00e9e d'un nombre </p><pre><code># importation du module math\nimport math\n\nnombre = 16\nracine_carr\u00e9e = math.sqrt(nombre)\nprint(racine_carr\u00e9e) # affiche 4.0\n\n# utilisation de la fonction pi du module math\nprint(math.pi) #affiche 3.141592653589793\n</code></pre> <p>Utilisation de la fonction sinus du module math </p><pre><code># importation du module math\nimport math\n\nangle = math.radians(30)\nsin_angle = math.sin(angle)\nprint(sin_angle)\n</code></pre> <p>Il est \u00e9galement possible de renommer le module lors de l'import pour \u00e9viter les conflits de noms  </p><pre><code>import math as m\nsin_angle = m.sin(m.radians(30))\nprint(sin_angle)\n</code></pre> <p>Les packages en Python sont un moyen de regrouper des modules en sous-dossiers pour une meilleure organisation de son code. Un package est simplement un r\u00e9pertoire qui contient un fichier <code>__init__.py</code> et peut contenir d'autres sous-dossiers qui contiennent des modules ou des sous-packages. Il est possible d'utiliser les packages en utilisant l'instruction import de mani\u00e8re hi\u00e9rarchique.</p> <p>Les modules tiers en python peuvent \u00eatre install\u00e9s en utilisant un gestionnaire de paquet comme pip. pip est un utilitaire qui permet d'installer des packages Python \u00e0 partir du registre central Python ou \u00e0 partir de dossiers locaux. Pour installer un module tiers, il suffit d'ouvrir une invite de commande ou un terminal, et de taper la commande <code>pip install &lt;nom_module&gt;</code>.</p> <p>Voici un exemple d'installation d'un module tiers requests:</p>"},{"location":"Off/posts/Section_00/23-Erreurs-et-Expressions/","title":"Les Erreurs et Expressions","text":""},{"location":"Off/posts/Section_00/24-Decorateurs/","title":"Les D\u00e9corateurs","text":""},{"location":"Off/posts/Section_00/24-Decorateurs/#les-decorateurs","title":"Les D\u00e9corateurs","text":"<p>Les d\u00e9corateurs en Python sont des fonctions ou des classes qui permettent de modifier ou d'\u00e9tendre le comportement d'autres fonctions ou classes. Ils permettent de rajouter de la logique suppl\u00e9mentaire \u00e0 une fonction existante sans avoir \u00e0 la modifier directement.</p> <p>Les d\u00e9corateurs sont utilis\u00e9s en ajoutant le symbole \"@\" suivi du nom du d\u00e9corateur avant la d\u00e9claration de la fonction ou de la classe \u00e0 d\u00e9corer.</p> <p>Il existe deux types de d\u00e9corateurs: les d\u00e9corateurs de fonctions et les d\u00e9corateurs de classes. Les d\u00e9corateurs de fonctions s'appliquent \u00e0 des fonctions, et les d\u00e9corateurs de classes s'appliquent \u00e0 des classes.</p> <p>Les d\u00e9corateurs sont utilis\u00e9s pour une vari\u00e9t\u00e9 de t\u00e2ches, comme : * La validation des entr\u00e9es d'une fonction * La mise en cache des r\u00e9sultats d'une fonction * La journalisation des appels \u00e0 une fonction * L'ajout de fonctionnalit\u00e9s suppl\u00e9mentaires \u00e0 une classe, comme les propri\u00e9t\u00e9s de lecture-seule.</p>"},{"location":"Off/posts/Section_00/24-Decorateurs/#decorateur-de-fonction","title":"D\u00e9corateur de fonction","text":"<pre><code>def my_decorator(func):\n    def wrapper(*args, **kwargs):\n        print(\"Before calling the function\")\n        result = func(*args, **kwargs)\n        print(\"After calling the function\")\n        return result\n    return wrapper\n\n@my_decorator\ndef add(a, b):\n    return a + b\n\nprint(add(1, 2))\n</code></pre> <p>Dans cet exemple, la fonction <code>my_decorator</code> est un d\u00e9corateur qui prend une fonction <code>func</code> en entr\u00e9e, et renvoie une fonction <code>wrapper</code> qui ex\u00e9cute des instructions suppl\u00e9mentaires avant et apr\u00e8s l'appel \u00e0 la fonction <code>func</code>. La fonction add est d\u00e9cor\u00e9e avec <code>my_decorator</code> en utilisant le symbole \"@\". Lorsque <code>add(1, 2)</code> est appel\u00e9, la fonction <code>wrapper</code> est ex\u00e9cut\u00e9e, ce qui affiche \"Before calling the function\", appelle <code>add(1, 2)</code> puis affiche \"After calling the function\".</p>"},{"location":"Off/posts/Section_00/24-Decorateurs/#decorateur-de-classe","title":"D\u00e9corateur de classe","text":"<pre><code>class MyDecorator:\n    def __init__(self, func):\n        self.func = func\n\n    def __call__(self, *args, **kwargs):\n        print(\"Before calling the function\")\n        result = self.func(*args, **kwargs)\n        print(\"After calling the function\")\n        return result\n\n@MyDecorator\ndef add(a, b):\n    return a + b\n\nprint(add(1, 2))\n</code></pre> <p>Dans cet exemple, la classe <code>MyDecorator</code> est utilis\u00e9e comme d\u00e9corateur en surchargeant la m\u00e9thode <code>__call__</code> . Lorsque <code>add(1, 2)</code> est appel\u00e9, l'objet <code>MyDecorator(add)</code> est cr\u00e9\u00e9 avec la fonction add en entr\u00e9e, puis <code>__call__</code> est appel\u00e9 avec les param\u00e8tres de <code>add(1,2)</code> et ex\u00e9cute les instructions suppl\u00e9mentaires avant et apr\u00e8s l'appel \u00e0 la fonction <code>add</code>.</p> <p>Il est important de noter que dans les deux exemples ci-dessus, la fonction <code>add</code> n'a pas besoin d'\u00eatre modifi\u00e9e pour ajouter la logique suppl\u00e9mentaire fournie par le d\u00e9corateur.</p> <p>En r\u00e9sum\u00e9, les d\u00e9corateurs sont un m\u00e9canisme en python permettant d'ajouter de la logique autour d'une fonction ou d'une classe sans alt\u00e9rer son code source, ceci permet de rendre le code plus lisible et de faciliter l'entretien.</p>"},{"location":"Off/posts/Section_00/25-Iterateurs-et-generateurs/","title":"Les It\u00e9rateurs et G\u00e9n\u00e9rateurs","text":""},{"location":"Off/posts/Section_00/25-Iterateurs-et-generateurs/#les-iterateurs-et-generateurs","title":"Les It\u00e9rateurs et G\u00e9n\u00e9rateurs","text":""},{"location":"Off/posts/Section_00/25-Iterateurs-et-generateurs/#les-iterateurs","title":"Les It\u00e9rateurs","text":"<p>Les it\u00e9rateurs en Python sont des objets qui permettent de parcourir des collections d'\u00e9l\u00e9ments, comme des listes, des tuples, des dictionnaires, etc. Ils sont utilis\u00e9s pour parcourir ces collections de mani\u00e8re efficace et s\u00fbre. Les it\u00e9rateurs sont utilis\u00e9s en conjonction avec les boucles for et les fonctions next<code>()</code> pour acc\u00e9der aux \u00e9l\u00e9ments d'une collection un par un.</p> <p>Il existe deux types d'it\u00e9rateurs en Python: les it\u00e9rateurs internes et les it\u00e9rateurs externes. Les it\u00e9rateurs internes sont int\u00e9gr\u00e9s aux objets de collection, tels que les listes et les tuples, et peuvent \u00eatre utilis\u00e9s avec les boucles <code>for</code>. Les it\u00e9rateurs externes sont des objets distincts qui peuvent \u00eatre cr\u00e9\u00e9s \u00e0 partir d'objets de collection, et doivent \u00eatre utilis\u00e9s avec les fonctions <code>next()</code> pour acc\u00e9der aux \u00e9l\u00e9ments d'une collection un par un.</p> <p>Voici un exemple d'utilisation d'un it\u00e9rateur interne avec une boucle for pour parcourir une liste : </p><pre><code>my_list = [1, 2, 3, 4, 5]\nfor element in my_list:\n    print(element)\n</code></pre> <p>Ce qui donne comme sortie : </p><pre><code>1\n2\n3\n4\n5\n</code></pre> <p>Voici un exemple d'utilisation d'un it\u00e9rateur externe avec la fonction next() pour parcourir un tuple : </p><pre><code>my_tuple = (1, 2, 3, 4, 5)\niterator = iter(my_tuple)\nprint(next(iterator)) # 1\nprint(next(iterator)) # 2\nprint(next(iterator)) # 3\nprint(next(iterator)) # 4\nprint(next(iterator)) # 5\n</code></pre> <p>Il est important de noter que lorsque on parcours les element avec la fonction <code>next()</code> lorsque on arrive a la fin de l'objet ( en l'occurence le tuple ) une exception \"StopIteration\" sera lev\u00e9e. Il est possible de g\u00e9rer cette exception en utilisant un constructeur try except.</p> <p>En r\u00e9sum\u00e9, les it\u00e9rateurs en Python sont des objets qui permettent de parcourir des collections d'\u00e9l\u00e9ments de mani\u00e8re efficace et s\u00fbre. Ils peuvent \u00eatre utilis\u00e9s avec les boucles for pour les it\u00e9rateurs internes ou les fonctions <code>next()</code> pour les it\u00e9rateurs externes. Les it\u00e9rateurs peuvent aider \u00e0 \u00e9conomiser de la m\u00e9moire et \u00e0 am\u00e9liorer les performances en parcourant les collections un \u00e9l\u00e9ment \u00e0 la fois plut\u00f4t que de charger toute la collection en m\u00e9moire.</p>"},{"location":"Off/posts/Section_00/25-Iterateurs-et-generateurs/#les-generateurs","title":"Les g\u00e9n\u00e9rateurs","text":"<p>Les g\u00e9n\u00e9rateurs en Python sont des objets qui permettent de cr\u00e9er des it\u00e9rateurs pour des s\u00e9quences de donn\u00e9es qui ne sont pas n\u00e9cessairement enti\u00e8rement charg\u00e9es en m\u00e9moire. Ils permettent de produire des \u00e9l\u00e9ments un par un au fur et \u00e0 mesure qu'ils sont demand\u00e9s, plut\u00f4t que de charger toute la s\u00e9quence de donn\u00e9es en m\u00e9moire avant de commencer \u00e0 l'it\u00e9rer. Les g\u00e9n\u00e9rateurs sont particuli\u00e8rement utiles pour traiter des s\u00e9quences de donn\u00e9es volumineuses ou infinies.</p> <p>Les g\u00e9n\u00e9rateurs peuvent \u00eatre cr\u00e9\u00e9s en utilisant des fonctions g\u00e9n\u00e9ratrices, qui sont des fonctions qui utilisent le mot cl\u00e9 yield pour renvoyer des valeurs \u00e0 chaque it\u00e9ration. Les fonctions g\u00e9n\u00e9ratrices ne s'ex\u00e9cutent pas tout de suite, mais produisent un g\u00e9n\u00e9rateur qui peut \u00eatre utilis\u00e9 pour produire les valeurs de la s\u00e9quence de donn\u00e9es au fur et \u00e0 mesure qu'elles sont demand\u00e9es.</p> <p>Voici un exemple de fonction g\u00e9n\u00e9ratrice qui produit les nombres de 0 \u00e0 9 : </p><pre><code>def my_generator():\n    for i in range(10):\n        yield i\n\ngen = my_generator()\nprint(next(gen)) # 0\nprint(next(gen)) # 1\nprint(next(gen)) # 2\n</code></pre> <p>Ici, la fonction <code>my_generator</code> est une fonction g\u00e9n\u00e9ratrice qui produit les nombres de 0 \u00e0 9 en utilisant une boucle for et le mot-cl\u00e9 yield. Lorsque la fonction est appel\u00e9e, elle ne s'ex\u00e9cute pas imm\u00e9diatement mais renvoie un g\u00e9n\u00e9rateur, qui peut \u00eatre stock\u00e9 dans la variable gen. Pour r\u00e9cup\u00e9rer les valeurs produites par le g\u00e9n\u00e9rateur, on utilise la fonction <code>next()</code> qui va retourner le prochaine \u00e9l\u00e9ment dans la s\u00e9quence.</p> <p>On peut aussi utiliser les g\u00e9n\u00e9rateurs avec les boucles for, qui vont automatiquement appeler next() pour chaque tour de boucle. </p><pre><code>gen = my_generator()\nfor number in gen:\n    print(number)\n</code></pre> <p>Ce qui donne la m\u00eame sortie qu'avant mais plus lisible.</p> <p>Il est important de noter que les g\u00e9n\u00e9rateurs n'ont qu'une seule direction, on ne peut pas remonter en arri\u00e8re pour r\u00e9cup\u00e9rer des valeurs pr\u00e9c\u00e9dentes apr\u00e8s les avoir \"pass\u00e9es\".</p> <p>En r\u00e9sum\u00e9, les g\u00e9n\u00e9rateurs en Python sont des objets qui permettent de cr\u00e9er des it\u00e9rateurs pour des s\u00e9quences de donn\u00e9es qui ne sont pas enti\u00e8rement charg\u00e9es en m\u00e9moire. Ils sont cr\u00e9\u00e9s en utilisant des fonctions g\u00e9n\u00e9ratrices qui utilisent le mot-cl\u00e9 yield pour renvoyer des valeurs \u00e0 chaque it\u00e9ration. Les g\u00e9n\u00e9rateurs permettent de produire des \u00e9l\u00e9ments un par un au fur et \u00e0 mesure qu'ils sont demand\u00e9s, plut\u00f4t que de charger toute la s\u00e9quence de donn\u00e9es en m\u00e9moire avant de commencer \u00e0 l'it\u00e9rer. Ils sont particuli\u00e8rement utiles pour traiter des s\u00e9quences de donn\u00e9es volumineuses ou infinies, car ils aident \u00e0 \u00e9conomiser de la m\u00e9moire et \u00e0 am\u00e9liorer les performances en ne chargeant qu'une partie de la s\u00e9quence de donn\u00e9es \u00e0 la fois.</p>"},{"location":"Off/posts/Section_00/26-Expressions-regulieres-et-parsing/","title":"Les Expr\u00e9ssions r\u00e9guli\u00e8res et parsing","text":""},{"location":"Off/posts/Section_00/26-Expressions-regulieres-et-parsing/#les-expressions-regulieres-et-parsing","title":"Les Expr\u00e9ssions r\u00e9guli\u00e8res et parsing","text":"<p>Les expressions r\u00e9guli\u00e8res (ou \"regex\" pour regular expressions en anglais) en Python sont un moyen puissant de rechercher, remplacer et manipuler des cha\u00eenes de caract\u00e8res. Les expressions r\u00e9guli\u00e8res utilisent des caract\u00e8res sp\u00e9ciaux pour d\u00e9crire des motifs dans les cha\u00eenes de caract\u00e8res. Python inclut une biblioth\u00e8que int\u00e9gr\u00e9e appel\u00e9e \"re\" pour travailler avec des expressions r\u00e9guli\u00e8res.</p> <p>Voici un exemple d'utilisation des expressions r\u00e9guli\u00e8res pour rechercher un motif dans une cha\u00eene de caract\u00e8res : </p><pre><code>import re\n\nstring = \"Hello World!\"\n\nmatch = re.search(\"World\", string)\nif match:\n    print(\"Found: \", match.group())\nelse:\n    print(\"Not found\")\n</code></pre> <p>Dans cet exemple, nous utilisons la fonction <code>search()</code> de la biblioth\u00e8que \"re\" pour rechercher le motif \"World\" dans la cha\u00eene de caract\u00e8res \"string\". La fonction renvoie un objet correspondant si elle trouve une correspondance, sinon elle renvoie None. Nous pouvons utiliser la m\u00e9thode <code>group()</code> de l'objet correspondant pour obtenir la correspondance trouv\u00e9e.</p> <p>Il existe d'autres fonctions pour utiliser les expressions r\u00e9guli\u00e8res comme <code>findall()</code> qui renvoie toutes les correspondances, <code>sub()</code> pour remplacer les correspondances ou <code>split()</code></p> <p>Les expressions r\u00e9guli\u00e8res utilisent \u00e9galement des caract\u00e8res sp\u00e9ciaux tels que ., *, +, ? pour d\u00e9crire des motifs plus complexes. </p> <p>Par exemple :  * le point <code>.</code> correspond \u00e0 n'importe quel caract\u00e8re,  * l'\u00e9toile <code>*</code> correspond \u00e0 z\u00e9ro ou plusieurs occurrences d'un caract\u00e8re,  * le plus <code>+</code> correspond \u00e0 une ou plusieurs occurrences d'un caract\u00e8re,  * le point d'interrogation <code>?</code> correspond \u00e0 z\u00e9ro ou une occurrence d'un caract\u00e8re.</p> <p>Il est important de noter que les expressions r\u00e9guli\u00e8res peuvent \u00eatre assez complexes \u00e0 comprendre et \u00e0 utiliser correctement, mais une fois ma\u00eetris\u00e9es, elles peuvent \u00eatre d'une grande aide pour manipuler des donn\u00e9es de texte de mani\u00e8re efficace et automatis\u00e9e. Il est donc recommand\u00e9 de consacrer du temps pour comprendre les concepts fondamentaux des expressions r\u00e9guli\u00e8res et de s'entra\u00eener \u00e0 les utiliser avant de les utiliser dans des projets r\u00e9els.</p>"},{"location":"Off/posts/Section_00/26-Objet-immuables-et-mutables/","title":"Les objets immuables et les objets mutables","text":""},{"location":"Off/posts/Section_00/26-Objet-immuables-et-mutables/#les-objets-immuables-et-les-objets-mutables","title":"Les objets immuables et les objets mutables","text":"<p>En Python, il existe deux types d'objets : les objets immuables et les objets mutables. Les objets immuables sont des objets dont les valeurs ne peuvent pas \u00eatre modifi\u00e9es une fois cr\u00e9\u00e9s, tandis que les objets mutables sont des objets dont les valeurs peuvent \u00eatre modifi\u00e9es apr\u00e8s leur cr\u00e9ation.</p> <p>Les objets immuables les plus courants sont les types de base tels que les nombres (int, float), les cha\u00eenes de caract\u00e8res (str), les tuples, etc.</p>"},{"location":"Off/posts/Section_00/26-Objet-immuables-et-mutables/#objet-immuable","title":"objet immuable","text":"<p>Voici un exemple d'utilisation d'un objet immuable : </p><pre><code>x = 3\ny = x\ny += 2\nprint(x) # affiche 3\n</code></pre> Dans cet exemple, l'affectation de y = x cr\u00e9e une nouvelle r\u00e9f\u00e9rence \u00e0 l'objet x, et l'instruction y += 2 cr\u00e9e un nouvel objet int avec la valeur 5. L'objet x n'est pas affect\u00e9 par cette op\u00e9ration et reste inchang\u00e9."},{"location":"Off/posts/Section_00/26-Objet-immuables-et-mutables/#les-objets-mutables","title":"Les objets mutables","text":"<p>Les objets mutables les plus courants sont les listes, les dictionnaires, et les ensembles.</p> <p>Voici un exemple d'utilisation d'un objet mutable : </p><pre><code>my_list = [1, 2, 3]\nmy_list_2 = my_list\nmy_list_2.append(4)\nprint(my_list) # affiche [1, 2, 3, 4]\n</code></pre> <p>Dans cet exemple, l'affectation de <code>my_list_2 = my_list</code> cr\u00e9e une nouvelle r\u00e9f\u00e9rence \u00e0 l'objet <code>my_list</code>, donc lorsque on utilise la m\u00e9thode <code>append(4)</code> sur <code>my_list_2</code>, l'objet <code>my_list</code> est \u00e9galement modifi\u00e9.</p> <p>Il est important de noter que les objets immuables sont g\u00e9n\u00e9ralement plus simples \u00e0 utiliser car ils sont plus s\u00fbrs et plus pr\u00e9visibles car ils ne peuvent pas \u00eatre modifi\u00e9s accidentellement. Par contre, les objets mutables sont plus flexibles et peuvent \u00eatre utilis\u00e9s pour des t\u00e2ches plus avanc\u00e9es, mais ils n\u00e9cessitent une attention accrue pour \u00e9viter les erreurs potentielles.</p>"},{"location":"Off/posts/Section_00/27-Logging/","title":"Logging","text":""},{"location":"Off/posts/Section_00/27-Logging/#logging","title":"Logging","text":"<p>La journalisation (ou \"logging\" en anglais) en Python est un m\u00e9canisme qui permet de suivre les \u00e9v\u00e9nements qui se produisent dans une application et de les enregistrer dans des fichiers de journal ou des consoles. Cela permet aux d\u00e9veloppeurs de suivre les erreurs, les avertissements et les informations de d\u00e9bogage, et de les utiliser pour r\u00e9soudre les probl\u00e8mes et am\u00e9liorer les performances de l'application.</p> <p>Python poss\u00e8de une biblioth\u00e8que int\u00e9gr\u00e9e pour la journalisation appel\u00e9e \"logging\". Voici un exemple simple d'utilisation de cette biblioth\u00e8que pour enregistrer un message de journalisation :</p> <pre><code>import logging\n\nlogging.basicConfig(filename='example.log', level=logging.DEBUG)\nlogging.debug('This is a debug message')\nlogging.info('This is an info message')\nlogging.warning('This is a warning message')\nlogging.error('This is an error message')\n</code></pre> <p>Dans cet exemple, nous utilisons la fonction <code>basicConfig()</code> pour configurer la journalisation en sp\u00e9cifiant le nom de fichier de journal \"example.log\" et le niveau de journalisation \u00e0 \"DEBUG\". Nous utilisons ensuite les fonctions <code>debug()</code>, <code>info()</code>, <code>warning()</code> et <code>error()</code> pour enregistrer des messages de journalisation de diff\u00e9rents niveaux.</p> <p>Il existe plusieurs niveaux de journalisation disponibles dans la biblioth\u00e8que \"logging\" : DEBUG, INFO, WARNING, ERROR, CRITICAL. Et il est possible de filtrer les messages en fonction de ces niveaux.</p> <p>Il est possible de configurer la journalisation pour envoyer les messages de journalisation vers des destinations sp\u00e9cifiques telles que des fichiers, des consoles, des e-mails ou des services de journalisation en nuage. Il est \u00e9galement possible de formater les messages de journalisation pour les adapter \u00e0 vos besoins.</p>"},{"location":"Off/posts/Section_00/28-PEP-8/","title":"PEP 8","text":""},{"location":"Off/posts/Section_00/28-PEP-8/#pep-8","title":"PEP 8","text":"<p>PEP 8 est une norme de style de codage pour Python qui fournit des conventions pour \u00e9crire du code Python de mani\u00e8re claire et coh\u00e9rente. Il inclut des r\u00e8gles pour la mise en forme du code, la longueur des lignes, les noms de variables, les commentaires, etc. Le but de PEP 8 est de rendre le code plus facile \u00e0 lire et \u00e0 maintenir pour tous les d\u00e9veloppeurs qui travaillent sur un projet.</p>"},{"location":"Off/posts/Section_00/28-PEP-8/#regles-de-pep-8","title":"R\u00e8gles de PEP 8 :","text":"<ul> <li>Utilisez des espaces autour des op\u00e9rateurs et apr\u00e8s les virgules.</li> <li>Utilisez des lignes vides pour s\u00e9parer les fonctions et les classes.</li> <li>Utilisez des noms de variables descriptifs et en minuscules, avec des tirets bas pour les s\u00e9parer les mots.</li> <li>Utilisez des commentaires pour expliquer le fonctionnement du code.</li> <li>Limiter la longueur des lignes \u00e0 79 caract\u00e8res.</li> </ul> <p>Il existe plusieurs outils pour v\u00e9rifier la conformit\u00e9 avec PEP 8, comme <code>flake8</code> ou <code>pylint</code>. Il est g\u00e9n\u00e9ralement utilis\u00e9 en conjonction avec un \u00e9diteur de code ou un IDE qui peut automatiquement identifier les erreurs de formatage et les corriger. Il est important de noter qu'il n'est pas n\u00e9cessaire de se conformer parfaitement \u00e0 PEP 8, il est important de maintenir la lisibilit\u00e9 et la compr\u00e9hension du code.</p> <p>Il est \u00e9galement bon de se rappeler que PEP 8 n'est pas seulement un ensemble de r\u00e8gles \u00e0 suivre, mais aussi une philosophie de codage. Il encourage l'\u00e9criture de code qui est facile \u00e0 lire et \u00e0 maintenir pour tous les d\u00e9veloppeurs qui travaillent sur un projet. En suivant les meilleures pratiques de PEP 8, vous pouvez am\u00e9liorer la qualit\u00e9 de votre code et faciliter la collaboration avec d'autres d\u00e9veloppeurs.</p>"},{"location":"Off/posts/Section_00/29-Fenetres-graphiques/","title":"Les Fen\u00eatres graphiques","text":""},{"location":"Off/posts/Section_00/29-Fenetres-graphiques/#les-fenetres-graphiques","title":"Les Fen\u00eatres graphiques","text":""},{"location":"Off/posts/Section_00/29-Fenetres-graphiques/#projet-en-cours","title":"Projet en cours","text":""},{"location":"Off/posts/Section_00/3-Variables/","title":"Les Variables","text":""},{"location":"Off/posts/Section_00/3-Variables/#les-variables","title":"Les Variables","text":"<p>Une variable en Python est un nom qui r\u00e9f\u00e8re \u00e0 une valeur stock\u00e9e en m\u00e9moire. Vous pouvez cr\u00e9er une variable en lui donnant un nom et en lui affectant une valeur en utilisant l'op\u00e9rateur d'affectation \"=\". Par exemple :</p> <pre><code>&gt;&gt;&gt; x = 10\n&gt;&gt;&gt; y = \"hello\"\n&gt;&gt;&gt; z = 3.14\n</code></pre> <p>Dans cet exemple, nous avons cr\u00e9\u00e9 trois variables : x, y et z. x contient la valeur enti\u00e8re 10, y contient la cha\u00eene de caract\u00e8res \"hello\" et z contient le nombre flottant 3.14.</p> <p>Il y a quelques r\u00e8gles \u00e0 respecter lors de la d\u00e9finition des noms de variables en Python :</p> <ul> <li>Les noms de variables ne peuvent pas commencer par un chiffre.</li> <li>Les noms de variables ne peuvent pas contenir de caract\u00e8res sp\u00e9ciaux, tels que \"!\" ou \"$\".</li> <li>Les noms de variables ne peuvent pas \u00eatre des mots-cl\u00e9s Python, tels que \"for\" ou \"while\".</li> <li>Les noms de variables doivent \u00eatre courts, pr\u00e9cis et repr\u00e9sentatifs de leur contenu.</li> </ul> <p>Il est recommand\u00e9 de suivre les conventions de nommage standard en Python, qui consistent \u00e0 utiliser des minuscules et des underscores (par exemple, my_variable) pour les noms de variables. Cela rend le code plus facile \u00e0 lire et \u00e0 maintenir.</p>"},{"location":"Off/posts/Section_00/3-Variables/#type-de-variable","title":"Type de variable","text":"<p>Vous pouvez \u00e9galement utiliser la fonction type() de Python pour v\u00e9rifier le type de donn\u00e9es d'une variable. Par exemple :</p> <pre><code>&gt;&gt;&gt; x = 10\n&gt;&gt;&gt; y = \"hello\"\n&gt;&gt;&gt; z = 3.14\n&gt;&gt;&gt; print(type(x))  # affiche \"&lt;class 'int'&gt;\"\n&gt;&gt;&gt; print(type(y))  # affiche \"&lt;class 'str'&gt;\"\n&gt;&gt;&gt; print(type(z))  # affiche \"&lt;class 'float'&gt;\"\n</code></pre> <p>Vous pouvez \u00e9galement changer le type de donn\u00e9es d'une variable en utilisant des fonctions de conversion de type, comme int(), float() et str(). Par exemple :</p> <pre><code>&gt;&gt;&gt; x = 10\n&gt;&gt;&gt; y = \"15\"\n&gt;&gt;&gt; z = 3.14\n&gt;&gt;&gt; a = int(y)  # a est maintenant une variable enti\u00e8re avec la valeur 15\n&gt;&gt;&gt; b = float(y)  # b est maintenant une variable flottante avec la valeur 15.0\n&gt;&gt;&gt; c = str(x)  # c est maintenant une variable cha\u00eene de caract\u00e8res avec la valeur \"10\"\n</code></pre>"},{"location":"Off/posts/Section_00/3-Variables/#exercices","title":"Exercices","text":"<p>Exercice 1 : Cr\u00e9ez une variable x contenant la valeur enti\u00e8re 5, une variable y contenant la valeur flottante 3.14 et une variable z contenant la cha\u00eene de caract\u00e8res \"Bonjour\". Affichez le type de chaque variable.</p> <p>Exercice 2 : Cr\u00e9ez une variable name contenant votre nom et une variable age contenant votre \u00e2ge. Affichez une cha\u00eene de caract\u00e8res de la forme \"Bonjour, je m'appelle <code>[nom]</code> et j'ai <code>[\u00e2ge]</code> ans\".</p> <p>Exercice 3 : Cr\u00e9ez une variable a contenant la valeur enti\u00e8re 5 et une variable b contenant la valeur enti\u00e8re 10. Cr\u00e9ez une variable c qui contient la somme de a et b. Affichez la valeur de c.</p>"},{"location":"Off/posts/Section_00/30-API/","title":"Les API","text":""},{"location":"Off/posts/Section_00/30-API/#les-api","title":"Les API","text":""},{"location":"Off/posts/Section_00/30-API/#definition-2","title":"D\u00e9finition 2","text":"<p>Une API, ou Interface de Programmation Applicative (Application Programming Interface en anglais), est un ensemble de r\u00e8gles et de protocoles qui permettent \u00e0 des logiciels de communiquer entre eux. Elle d\u00e9finit les m\u00e9thodes et les formats de donn\u00e9es \u00e0 utiliser pour l'\u00e9change d'informations.</p> <p>En Python, il existe de nombreuses biblioth\u00e8ques et frameworks qui fournissent des API pour faciliter l'int\u00e9gration de fonctionnalit\u00e9s sp\u00e9cifiques dans vos applications. Voici quelques exemples d'API couramment utilis\u00e9es en Python :</p>"},{"location":"Off/posts/Section_00/30-API/#api-de-requetes-http-avec-la-bibliotheque-requests","title":"API de requ\u00eates HTTP avec la biblioth\u00e8que <code>requests</code> :","text":"<pre><code>import requests\n\nresponse = requests.get('https://api.example.com/data')\ndata = response.json()\n</code></pre>"},{"location":"Off/posts/Section_00/30-API/#api-de-manipulation-de-fichiers-json-avec-la-bibliotheque-standard-json-2","title":"API de manipulation de fichiers JSON avec la biblioth\u00e8que standard json 2 :","text":"<pre><code>import json\n\ndata = {'name': 'John', 'age': 30}\njson_data = json.dumps(data)\n\n# Utilisation de l'API pour enregistrer les donn\u00e9es dans un fichier\nwith open('data.json', 'w') as file:\n    file.write(json_data)\n\n# Utilisation de l'API pour lire les donn\u00e9es depuis un fichier\nwith open('data.json', 'r') as file:\n    json_data = file.read()\n    data = json.loads(json_data)\n</code></pre>"},{"location":"Off/posts/Section_00/30-API/#api-de-manipulation-de-bases-de-donnees-relationnelles-avec-la-bibliotheque-sqlite3-integree-a-python","title":"API de manipulation de bases de donn\u00e9es relationnelles avec la biblioth\u00e8que sqlite3 (int\u00e9gr\u00e9e \u00e0 Python) :","text":"<pre><code>import sqlite3\n\n# Connexion \u00e0 une base de donn\u00e9es SQLite\nconn = sqlite3.connect('example.db')\n\n# Cr\u00e9ation d'une table\nconn.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)')\n\n# Insertion de donn\u00e9es\nconn.execute(\"INSERT INTO users (name, age) VALUES ('John', 30)\")\nconn.execute(\"INSERT INTO users (name, age) VALUES ('Alice', 25)\")\n\n# R\u00e9cup\u00e9ration des donn\u00e9es\ncursor = conn.execute('SELECT * FROM users')\nfor row in cursor:\n    print(row)\n\n# Fermeture de la connexion \u00e0 la base de donn\u00e9es\nconn.close()\n</code></pre> <p>Ces exemples illustrent diff\u00e9rents types d'API utilis\u00e9es en Python pour des t\u00e2ches telles que les requ\u00eates HTTP, la manipulation de donn\u00e9es JSON et l'interaction avec une base de donn\u00e9es SQLite. Il existe de nombreuses autres API pour une vari\u00e9t\u00e9 de domaines, tels que les r\u00e9seaux sociaux, les services de cloud, les services de messagerie, etc.</p>"},{"location":"Off/posts/Section_00/31-Conclusion/","title":"Conclusion","text":""},{"location":"Off/posts/Section_00/31-Conclusion/#conclusion","title":"Conclusion","text":"<p>En conclusion, cette formation en Python vous a donn\u00e9 une solide compr\u00e9hension des concepts fondamentaux du langage, ainsi que les comp\u00e9tences n\u00e9cessaires pour utiliser efficacement les biblioth\u00e8ques populaires pour manipuler et visualiser les donn\u00e9es. Vous avez \u00e9galement eu l'opportunit\u00e9 de mettre en pratique vos comp\u00e9tences en cr\u00e9ant des projets concrets, tels que des programmes de calcul, des scripts de traitement de donn\u00e9es et des applications web.</p> <p>Python est un langage de programmation polyvalent qui peut \u00eatre utilis\u00e9 pour une vari\u00e9t\u00e9 de t\u00e2ches, y compris la data science, l'IA et l'analyse de donn\u00e9es. En apprenant Python, vous avez ouvert de nombreuses opportunit\u00e9s pour votre carri\u00e8re professionnelle. Vous \u00eates maintenant en mesure de cr\u00e9er des scripts automatis\u00e9s pour simplifier les t\u00e2ches r\u00e9p\u00e9titives, de d\u00e9velopper des applications web interactives, d'analyser des donn\u00e9es pour prendre des d\u00e9cisions inform\u00e9es et de cr\u00e9er des mod\u00e8les d'IA pour r\u00e9soudre des probl\u00e8mes complexes.</p> <p>Avec les comp\u00e9tences acquises lors de cette formation, vous \u00eates maintenant pr\u00eat \u00e0 poursuivre vos \u00e9tudes en Python et \u00e0 continuer \u00e0 d\u00e9velopper vos comp\u00e9tences. Il existe de nombreux cours en ligne, livres et ressources en ligne pour continuer \u00e0 apprendre, alors continuez \u00e0 explorer et \u00e0 vous perfectionner.</p> <p>Enfin, je vous encourage \u00e0 continuer \u00e0 pratiquer et \u00e0 utiliser Python pour r\u00e9soudre des probl\u00e8mes r\u00e9els. C'est en r\u00e9solvant des probl\u00e8mes concrets que vous pourrez vous perfectionner et devenir un d\u00e9veloppeur Python comp\u00e9tent. N'h\u00e9sitez pas \u00e0 utiliser les comp\u00e9tences et les connaissances acquises dans cette formation pour cr\u00e9er des projets passionnants et innovants.</p>"},{"location":"Off/posts/Section_00/4-Commentaires/","title":"Les Commentaires","text":""},{"location":"Off/posts/Section_00/4-Commentaires/#les-commentaires","title":"Les Commentaires","text":"<p>En Python, les commentaires sont des lignes de code qui sont ignor\u00e9es par l'interpr\u00e9teur Python. Ils sont utilis\u00e9s pour expliquer le code et le rendre plus facile \u00e0 comprendre pour les autres personnes qui le lisent.</p> <p>Il existe deux types de commentaires en Python : * Les commentaires sur une seule ligne, qui commencent par le caract\u00e8re \"#\" :</p> <pre><code># Ceci est un commentaire sur une seule ligne\n</code></pre> <ul> <li>Les commentaires sur plusieurs lignes, qui sont entour\u00e9s par les caract\u00e8res triple guillemet (\"\"\" ou ''') : <pre><code>\"\"\"\nCeci est un commentaire\nsur plusieurs lignes.\nIl peut s'\u00e9tendre sur\nautant de lignes que n\u00e9cessaire.\n\"\"\"\n</code></pre></li> </ul> <p>Il est recommand\u00e9 d'ajouter des commentaires dans votre code pour expliquer ce que vous faites et pourquoi vous le faites. Cela rend le code plus facile \u00e0 comprendre et \u00e0 maintenir pour vous-m\u00eame et pour les autres personnes qui pourraient le lire.</p> <p>Voici un exemple de code avec des commentaires : </p><pre><code># Cette fonction calcule la somme de deux nombres\ndef add(x, y):\n    # On utilise l'op\u00e9rateur \"+\" pour additionner x et y\n    result = x + y\n    # On retourne le r\u00e9sultat\n    return result\n\n# On appelle la fonction avec les valeurs 10 et 20\nresult = add(10, 20)\n# On affiche le r\u00e9sultat\nprint(result)  # affiche 30\n</code></pre> <p>Il est \u00e9galement important de ne pas en abuser et de ne pas ajouter trop de commentaires inutiles. Un bon commentaire est concis, pr\u00e9cis et utile. Il doit aider \u00e0 comprendre le code, pas \u00e0 le rendre plus compliqu\u00e9.</p>"},{"location":"Off/posts/Section_00/5-Nombres/","title":"Les Nombres","text":""},{"location":"Off/posts/Section_00/5-Nombres/#les-nombres","title":"Les Nombres","text":"<p>En Python, il existe deux types de nombres : les nombres entiers (int) et les nombres \u00e0 virgule flottante (float).</p>"},{"location":"Off/posts/Section_00/5-Nombres/#les-nombres-entiers","title":"Les nombres entiers","text":"<p>Les nombres entiers sont des nombres entiers positifs ou n\u00e9gatifs, tels que -10, 0, 1, 2, etc. Ils sont repr\u00e9sent\u00e9s en Python par le type int.</p> <p>Voici quelques exemples de d\u00e9clarations de variables enti\u00e8res en Python : </p><pre><code>&gt;&gt;&gt; x = 10  # x est une variable enti\u00e8re avec la valeur 10\n&gt;&gt;&gt; y = -5  # y est une variable enti\u00e8re avec la valeur -5\n&gt;&gt;&gt; z = 0  # z est une variable enti\u00e8re avec la valeur 0\n</code></pre>"},{"location":"Off/posts/Section_00/5-Nombres/#les-nombres-decimaux","title":"Les nombres d\u00e9cimaux","text":"<p>Les nombres \u00e0 virgule flottante sont des nombres d\u00e9cimaux, tels que 3.14, -2.5, 0.0, etc. Ils sont repr\u00e9sent\u00e9s en Python par le type float.</p> <p>Voici quelques exemples de d\u00e9clarations de variables flottantes en Python : </p><pre><code>&gt;&gt;&gt; x = 3.14  # x est une variable flottante avec la valeur 3.14\n&gt;&gt;&gt; y = -2.5  # y est une variable flottante avec la valeur -2.5\n&gt;&gt;&gt; z = 0.0  # z est une variable flottante avec la valeur 0.0\n</code></pre>"},{"location":"Off/posts/Section_00/5-Nombres/#operations-mathematiques","title":"Op\u00e9rations math\u00e9matiques","text":"<p>Vous pouvez effectuer des op\u00e9rations math\u00e9matiques de base sur les nombres en Python, comme l'addition, la soustraction, la multiplication et la division. Voici quelques exemples : </p><pre><code>&gt;&gt;&gt; x = 10\n&gt;&gt;&gt; y = 3.14\n&gt;&gt;&gt; z = x + y  # z est une variable flottante avec la valeur 13.14\n&gt;&gt;&gt; a = x - y  # a est une variable flottante avec la valeur 6.86\n&gt;&gt;&gt; b = x * y  # b est une variable flottante avec la valeur 31.4\n&gt;&gt;&gt; c = x / y  # c est une variable flottante avec la valeur 3.1847133757961783\n</code></pre>"},{"location":"Off/posts/Section_00/5-Nombres/#convertir-une-variable","title":"Convertir une variable","text":"<p>Il est \u00e9galement possible de convertir des nombres de l'un de ces types \u00e0 l'autre en utilisant des fonctions de conversion de type, comme int() et float(). Par exemple : </p><pre><code>&gt;&gt;&gt; x = 10\n&gt;&gt;&gt; y = 3.14\n&gt;&gt;&gt; z = int(y)  # z est une variable enti\u00e8re avec la valeur 3\n&gt;&gt;&gt; a = float(x)  # a est une variable flottante avec la valeur 10.0\n</code></pre>"},{"location":"Off/posts/Section_00/6-Affichage/","title":"L'Affichage","text":""},{"location":"Off/posts/Section_00/6-Affichage/#laffichage","title":"L'Affichage","text":"<p>En Python, vous pouvez utiliser la fonction <code>print()</code> pour afficher du texte ou des valeurs sur la sortie standard (g\u00e9n\u00e9ralement la console).</p> <p>Voici quelques exemples d'utilisation de la fonction print() : </p><pre><code>&gt;&gt;&gt; print(\"Bonjour !\")  # affiche \"Bonjour !\"\n&gt;&gt;&gt; print(42)  # affiche 42\n&gt;&gt;&gt; print(3.14)  # affiche 3.14\n&gt;&gt;&gt; print(\"La r\u00e9ponse est\", 42)  # affiche \"La r\u00e9ponse est 42\"\n&gt;&gt;&gt; print(\"Pi vaut environ\", 3.14)  # affiche \"Pi vaut environ 3.14\"\n</code></pre> <p>La fonction <code>print()</code> accepte un ou plusieurs arguments, qui peuvent \u00eatre des cha\u00eenes de caract\u00e8res, des nombres ou d'autres types de donn\u00e9es. Elle les convertit en cha\u00eenes de caract\u00e8res et les affiche s\u00e9par\u00e9es par des espaces.</p> <p>Vous pouvez \u00e9galement utiliser la fonction <code>print()</code> pour afficher des r\u00e9sultats de calculs math\u00e9matiques : </p><pre><code>&gt;&gt;&gt; x = 10\n&gt;&gt;&gt; y = 3\n&gt;&gt;&gt; z = x / y\n&gt;&gt;&gt; print(\"Le r\u00e9sultat de\", x, \"/\", y, \"est\", z)  # affiche \"Le r\u00e9sultat de 10 / 3 est 3.3333333333333335\"\n</code></pre>"},{"location":"Off/posts/Section_00/6-Affichage/#function-format","title":"function format","text":"<p>Il est \u00e9galement possible de formatter l'affichage en utilisant la fonction <code>format()</code> de Python ou la syntaxe de formatage de cha\u00eene (f-string) introduite en Python 3.6. Voici quelques exemples : </p><pre><code>&gt;&gt;&gt; x = 10\n&gt;&gt;&gt; y = 3\n&gt;&gt;&gt; z = x / y\n&gt;&gt;&gt; print(\"Le r\u00e9sultat de {} / {} est {}\".format(x, y, z))  # affiche \"Le r\u00e9sultat de 10 / 3 est 3.3333333333333335\"\n</code></pre>"},{"location":"Off/posts/Section_00/6-Affichage/#formatage-de-chaine","title":"formatage de cha\u00eene","text":"<p>La syntaxe de formatage de cha\u00eene <code>(f-string)</code> est une syntaxe concise et pratique pour formatter l'affichage en Python. Elle permet de remplacer des placeholders dans une cha\u00eene de caract\u00e8res par des valeurs en utilisant la syntaxe {nom_de_variable} ou <code>{nom_de_variable:format}</code>. </p><pre><code>&gt;&gt;&gt; x = 10\n&gt;&gt;&gt; y = 3.14\n&gt;&gt;&gt; z = \"hello\"\n&gt;&gt;&gt; a = True\n&gt;&gt;&gt; b = [1, 2, 3]\n\n&gt;&gt;&gt; print(x, y, z)  # affiche \"10 3.14 hello\"\n&gt;&gt;&gt; print(f\"{x} {y} {z}\")  # affiche \"10 3.14 hello\"\n&gt;&gt;&gt; print(f\"{x=} {y=} {z=}\")  # affiche \"x=10 y=3.14 z='hello'\"\n&gt;&gt;&gt; print(f\"{a=} {b=}\")  # affiche \"a=True b=[1, 2, 3]\"\n</code></pre>"},{"location":"Off/posts/Section_00/7-Listes/","title":"C'est quoi une liste en python ?","text":""},{"location":"Off/posts/Section_00/7-Listes/#cest-quoi-une-liste-en-python","title":"C'est quoi une liste en python ?","text":"<p>Une liste est une collection d'\u00e9l\u00e9ments ordonn\u00e9s et modifiables. En Python, une liste est cr\u00e9\u00e9e en pla\u00e7ant une s\u00e9quence d'\u00e9l\u00e9ments s\u00e9par\u00e9s par des virgules entre crochets (<code>[]</code>).</p> <p>Voici un exemple de liste en Python : </p><pre><code>fruits = ['apple', 'banana', 'orange', 'mango']\n</code></pre> <p>Vous pouvez acc\u00e9der aux \u00e9l\u00e9ments d'une liste \u00e0 l'aide d'un index. Python utilise l'indexation de base z\u00e9ro, de sorte que le premier \u00e9l\u00e9ment de la liste a un index de 0, le deuxi\u00e8me \u00e9l\u00e9ment a un index de 1, et ainsi de suite. </p><pre><code>print(fruits[0])  # Output: 'apple'\nprint(fruits[2])  # Output: 'orange'\n</code></pre> <p>Vous pouvez \u00e9galement utiliser des index n\u00e9gatifs pour acc\u00e9der aux \u00e9l\u00e9ments \u00e0 partir de la fin de la liste. Par exemple, <code>fruits[-1]</code> fait r\u00e9f\u00e9rence au dernier \u00e9l\u00e9ment de la liste, <code>fruits[-2]</code>fait r\u00e9f\u00e9rence \u00e0 l'avant-dernier \u00e9l\u00e9ment, etc. </p><pre><code>print(fruits[-1])  # Output: 'mango'\nprint(fruits[-3])  # Output: 'banana'\n</code></pre> <p>Vous pouvez modifier les \u00e9l\u00e9ments d'une liste en affectant une nouvelle valeur \u00e0 un index : </p><pre><code>fruits[0] = 'kiwi'\nprint(fruits)  # Output: ['kiwi', 'banana', 'orange', 'mango']\n</code></pre> <p>Vous pouvez \u00e9galement ajouter de nouveaux \u00e9l\u00e9ments \u00e0 une liste en utilisant la m\u00e9thode <code>append()</code> : </p><pre><code>fruits.append('strawberry')\nprint(fruits)  # Output: ['kiwi', 'banana', 'orange', 'mango', 'strawberry']\n</code></pre> <p>Les listes en Python sont dynamiques et peuvent contenir des \u00e9l\u00e9ments de diff\u00e9rents types. Vous pouvez m\u00e9langer et assortir diff\u00e9rents types dans une seule liste. </p><pre><code>mixed = [1, 'hello', 3.14, True]\n</code></pre>"},{"location":"Off/posts/Section_00/8-Dictionnaires/","title":"Dictionnaires Python","text":""},{"location":"Off/posts/Section_00/8-Dictionnaires/#dictionnaires-python","title":"Dictionnaires Python","text":"<p>Un dictionnaire est une collection de paires cl\u00e9-valeur en Python. Il s'agit d'un type de donn\u00e9es non ordonn\u00e9 et modifiable qui vous permet de stocker et d'acc\u00e9der \u00e0 des donn\u00e9es \u00e0 l'aide de cl\u00e9s plut\u00f4t que d'index.</p> <p>Les dictionnaires sont cr\u00e9\u00e9s en pla\u00e7ant une liste de paires cl\u00e9-valeur s\u00e9par\u00e9es par des virgules entre accolades (<code>{}</code>). Les cl\u00e9s et les valeurs sont s\u00e9par\u00e9es par deux-points (<code>:</code>).</p> <p>Voici un exemple de dictionnaire en Python : </p><pre><code>person = {'name': 'John', 'age': 30, 'country': 'USA'}\n</code></pre> <p>Vous pouvez acc\u00e9der aux valeurs d'un dictionnaire \u00e0 l'aide des touches. </p><pre><code>print(person['name'])  # Output: 'John'\nprint(person['age'])   # Output: 30\n</code></pre> <p>Vous pouvez \u00e9galement utiliser la get()m\u00e9thode pour acc\u00e9der aux valeurs, qui renvoie une valeur par d\u00e9faut si la cl\u00e9 n'est pas trouv\u00e9e dans le dictionnaire. </p><pre><code>print(person.get('name'))  # Output: 'John'\nprint(person.get('income', 0))  # Output: 0\n</code></pre> <p>Vous pouvez modifier les valeurs d'un dictionnaire en affectant une nouvelle valeur \u00e0 une cl\u00e9. </p><pre><code>person['age'] = 35\nprint(person)  # Output: {'name': 'John', 'age': 35, 'country': 'USA'}\n</code></pre> <p>Vous pouvez ajouter de nouvelles paires cl\u00e9-valeur \u00e0 un dictionnaire \u00e0 l'aide de l'op\u00e9rateur d'affectation. </p><pre><code>person['income'] = 50000\nprint(person)  # Output: {'name': 'John', 'age': 35, 'country': 'USA', 'income': 50000}\n</code></pre> <p>Vous pouvez supprimer des paires cl\u00e9-valeur d'un dictionnaire \u00e0 l'aide de l'instruction <code>del</code> ou de la m\u00e9thode <code>pop()</code>. </p><pre><code>del person['income']\nprint(person)  # Output: {'name': '\n</code></pre> <p>Vous pouvez parcourir les cl\u00e9s, les valeurs ou les \u00e9l\u00e9ments d'un dictionnaire \u00e0 l'aide de la forboucle en Python.</p> <p>Pour parcourir les cl\u00e9s d'un dictionnaire, vous pouvez utiliser la m\u00e9thode <code>keys()</code> :</p> <pre><code>person = {\n  'name': 'John Smith',\n  'age': 30,\n  'city': 'New York'\n}\n\nfor key in person.keys():\n  print(key)  # Output: 'name', 'age', 'city'\n</code></pre> <p>Pour parcourir les valeurs d'un dictionnaire, vous pouvez utiliser la m\u00e9thode <code>values()</code> : </p><pre><code>for value in person.values():\n  print(value)  # Output: 'John Smith', 30, 'New York'\n</code></pre> <p>Pour parcourir les paires cl\u00e9-valeur d'un dictionnaire, vous pouvez utiliser la m\u00e9thode <code>items()</code> : </p><pre><code>for key, value in person.items():\n  print(key, value)  # Output: ('name', 'John Smith'), ('age', 30), ('city', 'New York')\n</code></pre> <p>Vous pouvez \u00e9galement utiliser la boucle <code>for</code> pour parcourir un dictionnaire en parcourant le dictionnaire lui-m\u00eame : </p><pre><code>for key in person:\n  print(key, person[key])  # Output: ('name', 'John Smith'), ('age', 30), ('city', 'New York')\n</code></pre>"},{"location":"Off/posts/Section_00/9-Tuples/","title":"Les Tuples","text":""},{"location":"Off/posts/Section_00/9-Tuples/#les-tuples","title":"Les Tuples","text":"<p>Un tuple est un type de s\u00e9quence immuable en Python. Cela signifie qu'une fois que vous avez cr\u00e9\u00e9 un tuple, vous ne pouvez pas modifier son contenu. Les tuples sont cr\u00e9\u00e9s en mettant une s\u00e9quence d'\u00e9l\u00e9ments s\u00e9par\u00e9s par des virgules entre parenth\u00e8ses (<code>()</code>).</p> <p>Voici un exemple de tuple en Python :</p> <pre><code>coordinates = (4, 5)\n</code></pre> <p>Vous pouvez acc\u00e9der aux \u00e9l\u00e9ments d'un tuple \u00e0 l'aide d'un index, comme avec une liste. Python utilise une indexation de base z\u00e9ro, de sorte que le premier \u00e9l\u00e9ment du tuple a un index de 0, le deuxi\u00e8me \u00e9l\u00e9ment a un index de 1, et ainsi de suite. </p><pre><code>print(coordinates[0])  # Output: 4\nprint(coordinates[1])  # Output: 5\n</code></pre> <p>Vous pouvez \u00e9galement utiliser des index n\u00e9gatifs pour acc\u00e9der aux \u00e9l\u00e9ments \u00e0 partir de la fin du tuple. Par exemple, <code>coordinates[-1]</code>fait r\u00e9f\u00e9rence au dernier \u00e9l\u00e9ment du tuple, <code>coordinates[-2]</code> fait r\u00e9f\u00e9rence \u00e0 l'avant-dernier \u00e9l\u00e9ment, etc. </p><pre><code>print(coordinates[-1])  # Output: 5\nprint(coordinates[-2])  # Output: 4\n</code></pre> <p>Les tuples peuvent contenir des \u00e9l\u00e9ments de diff\u00e9rents types, tout comme les listes. </p><pre><code>mixed = (1, 'hello', 3.14, True)\n</code></pre> <p>Une diff\u00e9rence entre les tuples et les listes est que les tuples sont immuables, ce qui signifie que vous ne pouvez pas modifier le contenu d'un tuple. Par exemple, vous ne pouvez pas affecter une nouvelle valeur \u00e0 un index ou ajouter un \u00e9l\u00e9ment \u00e0 un tuple. </p><pre><code># This will raise a TypeError\ncoordinates[0] = 10\n\n# This will also raise a TypeError\ncoordinates.append(6)\n</code></pre> <p>Les tuples sont souvent utilis\u00e9s pour stocker des donn\u00e9es qui ne doivent pas \u00eatre modifi\u00e9es, telles que des enregistrements de base de donn\u00e9es ou des configurations fixes. Ils sont \u00e9galement plus rapides que les listes, car ils n\u00e9cessitent moins de m\u00e9moire et sont plus efficaces pour y acc\u00e9der.</p>"},{"location":"Python/","title":"Apprendre Python","text":""},{"location":"Python/Section_01/01_Introduction/","title":"1. Introduction","text":""},{"location":"Python/Section_01/01_Introduction/#1-introduction","title":"1. Introduction","text":""},{"location":"Python/Section_01/01_Introduction/#a-python-et-a-son-ecosysteme","title":"A. Python et \u00e0 son \u00e9cosyst\u00e8me","text":"<p>Python est un langage de programmation de haut niveau, interpr\u00e9t\u00e9 et g\u00e9n\u00e9raliste, con\u00e7u avec l'objectif de maximiser la lisibilit\u00e9 du code. D\u00e9velopp\u00e9 pour la premi\u00e8re fois par Guido van Rossum et rendu public en 1991, Python a rapidement gagn\u00e9 en popularit\u00e9 dans divers secteurs gr\u00e2ce \u00e0 sa syntaxe claire et son mod\u00e8le de programmation qui favorise une \u00e9criture de code concise et compr\u00e9hensible.</p>"},{"location":"Python/Section_01/01_Introduction/#b-un-langage-de-programmation-polyvalent","title":"B. Un Langage de programmation Polyvalent","text":"<p>Python est connu pour sa polyvalence. Il est utilis\u00e9 dans une multitude de domaines, allant du d\u00e9veloppement web \u00e0 la science des donn\u00e9es, en passant par l'intelligence artificielle, l'automatisation, et bien plus encore. Cette large applicabilit\u00e9 est soutenue par une philosophie de conception qui souligne l'importance de la flexibilit\u00e9 et de la simplicit\u00e9. En raison de sa nature interpr\u00e9t\u00e9e, Python permet aux d\u00e9veloppeurs de tester rapidement de nouvelles id\u00e9es et de voir les r\u00e9sultats imm\u00e9diatement, ce qui en fait un outil id\u00e9al pour le prototypage rapide.</p>"},{"location":"Python/Section_01/01_Introduction/#c-lecosysteme-python","title":"C. L'\u00c9cosyst\u00e8me python","text":"<p>L'un des aspects les plus puissants de Python r\u00e9side dans son vaste \u00e9cosyst\u00e8me compos\u00e9 de biblioth\u00e8ques et de frameworks vari\u00e9s. Pour le d\u00e9veloppement web, des frameworks comme Django et Flask facilitent la cr\u00e9ation d'applications robustes et \u00e9volutives. En science des donn\u00e9es, des biblioth\u00e8ques telles que NumPy, pandas, et Matplotlib permettent de r\u00e9aliser des analyses complexes et de visualiser des donn\u00e9es de mani\u00e8re efficace. Pour l'intelligence artificielle et l'apprentissage automatique, des outils comme TensorFlow et scikit-learn offrent des fonctionnalit\u00e9s avanc\u00e9es pour concevoir et entra\u00eener des mod\u00e8les sophistiqu\u00e9s.</p>"},{"location":"Python/Section_01/01_Introduction/#d-la-communaute-python","title":"D. La communaut\u00e9 python","text":"<p>La communaut\u00e9 de d\u00e9veloppeurs Python est un autre pilier de la force de ce langage. Avec des millions de d\u00e9veloppeurs \u00e0 travers le monde, la communaut\u00e9 Python est active et accueillante. Des \u00e9v\u00e9nements r\u00e9guliers comme les PyCon, meetups locaux, et forums en ligne offrent des opportunit\u00e9s d'apprentissage continu et de collaboration. Le d\u00e9p\u00f4t de paquets Python (PyPI) joue \u00e9galement un r\u00f4le crucial, permettant aux utilisateurs de partager et d'acc\u00e9der \u00e0 des paquets logiciels d\u00e9velopp\u00e9s pour Python, ce qui enrichit encore l'\u00e9cosyst\u00e8me.</p>"},{"location":"Python/Section_01/01_Introduction/#en-resume","title":"En r\u00e9sum\u00e9","text":"<p>Python se distingue non seulement par sa syntaxe \u00e9l\u00e9gante et son code expressif mais aussi par un \u00e9cosyst\u00e8me riche et une communaut\u00e9 dynamique qui continuent de pousser ses capacit\u00e9s \u00e0 de nouveaux horizons. Que ce soit pour les d\u00e9butants en programmation ou pour les professionnels chevronn\u00e9s, Python offre les outils et les ressources n\u00e9cessaires pour r\u00e9ussir dans le monde de la technologie moderne.</p>"},{"location":"Python/Section_01/02_Intallation/","title":"2. Installation de python","text":""},{"location":"Python/Section_01/02_Intallation/#2-installation-de-python","title":"2. Installation de python","text":"<p>L'installation et la configuration de Python peuvent varier l\u00e9g\u00e8rement selon le syst\u00e8me d'exploitation. Dans ce cours, nous verrons toutes les \u00e9tapes pour installer Python sur Windows, macOS et Linux, en s'assurant que vous disposez d'un environnement de d\u00e9veloppement Python fonctionnel et pr\u00eat \u00e0 l'emploi.</p>"},{"location":"Python/Section_01/02_Intallation/#installation-sur-windows","title":"Installation sur Windows","text":"<ol> <li> <p>T\u00e9l\u00e9chargement :</p> <ul> <li>Rendez-vous sur le site officiel de Python \u00e0 python.org .</li> <li>Positionnez le curseur de la souris sur l'onglet Downloads en haut de l'\u00e9cran.</li> <li>T\u00e9l\u00e9chargez la derni\u00e8re version de Python recommand\u00e9e pour Windows.</li> </ul> </li> <li> <p>Ex\u00e9cution de l'installateur :</p> <ul> <li>Lancez l'ex\u00e9cutable t\u00e9l\u00e9charg\u00e9.</li> <li>Lorsque la fen\u00eatre appara\u00eet, cliquez sur l'option Customize installation.</li> <li>Cliquez sur le bouton Next</li> <li>Assurez-vous de cocher la case \"Add Python 3.x to PATH\" pour ajouter Python \u00e0 votre variable d'environnement PATH.</li> <li>Cliquez sur \"Install Now\".</li> </ul> </li> <li> <p>V\u00e9rification de l'installation:</p> <ul> <li>Ouvrez le Command Prompt (cmd) et tapez <code>python --version</code> pour confirmer que Python est correctement install\u00e9.</li> </ul> </li> </ol>"},{"location":"Python/Section_01/02_Intallation/#installation-sur-macos","title":"Installation sur macOS","text":"<ol> <li> <p>T\u00e9l\u00e9chargement :</p> <ul> <li>Rendez-vous sur le site officiel de Python \u00e0 python.org .</li> <li>Positionnez le curseur de la souris sur l'onglet Downloads en haut de l'\u00e9cran.</li> <li>T\u00e9l\u00e9chargez la derni\u00e8re version de Python recommand\u00e9e pour macOS.</li> </ul> </li> <li> <p>Ex\u00e9cution de l'installateur :</p> <ul> <li>Lancez l'ex\u00e9cutable t\u00e9l\u00e9charg\u00e9.</li> <li>Lorsque la fen\u00eatre appara\u00eet, cliquez sur le bouton Continuer.</li> <li>Cliquez sur le bouton Accepter pour poursuivre l'installation du logiciel, vous devez accepter les termes du contrat de licence du logiciel.</li> <li>Cliquez sur le bouton Installer, parfois la saisie d'un mot de passe est n\u00e9cessaire pour autoriser l'installation.</li> </ul> </li> <li> <p>V\u00e9rification de l'installation:</p> <ul> <li>Ouvrez le terminal et tapez <code>python --version</code> pour confirmer que Python est correctement install\u00e9.</li> </ul> </li> </ol>"},{"location":"Python/Section_01/02_Intallation/#installation-sur-linux","title":"Installation sur Linux","text":"<ol> <li>Installation sur Ubuntu/Debian:</li> <li>Ouvrez un terminal et mettez \u00e0 jour votre gestionnaire de paquets : <code>$sudo apt-get update &amp;&amp; sudo apt upgrade</code>.</li> <li>Installez Python avec : <code>sudo apt-get install python3</code>.</li> <li> <p>Une fois python installer, tapez la commande <code>exit()</code> pour sortir de l'interpr\u00e9teur.</p> </li> <li> <p>Installation sur Fedora/Red Hat:</p> </li> <li> <p>Ouvrez un terminal et tapez : sudo dnf install python3.</p> </li> <li> <p>V\u00e9rification de l'installation:</p> </li> <li>Dans le terminal, tapez python3 --version pour confirmer l'installation.</li> </ol>"},{"location":"Python/Section_01/03_Environnments_de_developpement/","title":"3. Les environnement de d\u00e9veloppement","text":""},{"location":"Python/Section_01/03_Environnments_de_developpement/#3-les-environnement-de-developpement","title":"3. Les environnement de d\u00e9veloppement","text":""},{"location":"Python/Section_01/03_Environnments_de_developpement/#quest-ce-quun-environnement-de-developpement","title":"Qu'est-ce qu'un Environnement de D\u00e9veloppement ?","text":"<p>Un environnement de d\u00e9veloppement (ou IDE, Integrated Development Environment) est un ensemble d'outils et de logiciels qui facilitent le d\u00e9veloppement, le test, le d\u00e9bogage et le d\u00e9ploiement des applications. Un environnement de d\u00e9veloppement peut inclure des \u00e9diteurs de code, des d\u00e9bogueurs, des gestionnaires de version, des \u00e9mulateurs, des frameworks et des biblioth\u00e8ques sp\u00e9cifiques \u00e0 un langage ou \u00e0 une plateforme.</p>"},{"location":"Python/Section_01/03_Environnments_de_developpement/#utilite-dun-environnement-de-developpement","title":"Utilit\u00e9 d'un environnement de d\u00e9veloppement","text":"<ol> <li>Productivit\u00e9 am\u00e9lior\u00e9e : Les outils int\u00e9gr\u00e9s comme la compl\u00e9tion de code, la syntaxe color\u00e9e et les raccourcis clavier am\u00e9liorent la vitesse et l'efficacit\u00e9 du codage.</li> <li>D\u00e9bogage efficace : Les d\u00e9bogueurs int\u00e9gr\u00e9s permettent de suivre et corriger les erreurs rapidement.</li> <li>Gestion de projet : Les outils de gestion de version (comme Git) et les syst\u00e8mes de build facilitent le suivi des modifications et la gestion des d\u00e9pendances.</li> <li>Collaboration : Les environnements de d\u00e9veloppement offrent souvent des int\u00e9grations avec des plateformes de collaboration comme GitHub ou GitLab, facilitant le travail en \u00e9quipe.</li> <li>Int\u00e9gration continue et d\u00e9ploiement : Les IDE modernes supportent des workflows d'int\u00e9gration continue et de d\u00e9ploiement continu.</li> </ol>"},{"location":"Python/Section_01/03_Environnments_de_developpement/#choisir-un-environnement-de-developpement","title":"Choisir un environnement de d\u00e9veloppement","text":"<p>Il existe plusieurs IDEs populaires pour le d\u00e9veloppement en Python, parmi lesquels :</p> <ul> <li>PyCharm : Un IDE puissant et populaire pour Python, avec des fonctionnalit\u00e9s avanc\u00e9es comme la compl\u00e9tion de code intelligente, le d\u00e9bogage, et l'int\u00e9gration avec les syst\u00e8mes de contr\u00f4le de version.</li> <li>Visual Studio Code : Un \u00e9diteur de code l\u00e9ger mais extensible avec de nombreuses extensions pour Python.</li> <li>Jupyter Notebook : Utilis\u00e9 principalement pour les travaux de science des donn\u00e9es et de machine learning.</li> <li>Spyder : Un IDE d\u00e9di\u00e9 \u00e0 la science des donn\u00e9es en Python.</li> </ul>"},{"location":"Python/Section_01/03_Environnments_de_developpement/#installation-et-configuration","title":"Installation et configuration","text":"<p>1. PyCharm :</p> <ul> <li>T\u00e9l\u00e9chargez et installez PyCharm depuis le site officiel.</li> <li>Cr\u00e9ez un nouveau projet Python en sp\u00e9cifiant l'emplacement de l'environnement virtuel ou de l'interpr\u00e9teur Python.</li> </ul> <p>2. Visual studio code :</p> <ul> <li>T\u00e9l\u00e9chargez et installez Visual Studio Code depuis le site officiel.</li> <li>Installez l'extension Python en allant dans l'onglet Extensions et en recherchant \"Python\".</li> <li>Configurez l'interpr\u00e9teur Python en utilisant <code>Ctrl + Shift + P</code> puis en recherchant \"Python: Select Interpreter\".</li> </ul> <p>3. Jupyter notebook :</p> <ul> <li>Installez Jupyter Notebook via pip :     <code>pip install notebook</code></li> <li>Lancez Jupyter Notebook :     <code>jupyter notebook</code></li> </ul>"},{"location":"Python/Section_01/03_Environnments_de_developpement/#exemple-pratique","title":"Exemple pratique","text":"<p>Cr\u00e9ation d'un Projet Python avec PyCharm</p> <ol> <li> <p>Cr\u00e9er un nouveau projet :</p> <ul> <li>Ouvrez PyCharm et choisissez \"Create New Project\".</li> <li>Sp\u00e9cifiez l'emplacement et l'interpr\u00e9teur Python \u00e0 utiliser.</li> </ul> </li> <li> <p>\u00c9crire du code :</p> <ul> <li>Cr\u00e9ez un nouveau fichier Python (ex : main.py) et \u00e9crivez votre code.</li> </ul> </li> <li> <p>Ex\u00e9cution et d\u00e9bogage :</p> <ul> <li>Cliquez sur le bouton d'ex\u00e9cution (triangle vert) pour ex\u00e9cuter votre script.</li> <li>Ajoutez des points d'arr\u00eat et utilisez le d\u00e9bogueur pour analyser le code.</li> </ul> </li> </ol> <p>En utilisant ces outils et m\u00e9thodes, vous pouvez structurer efficacement votre travail de d\u00e9veloppement, am\u00e9liorer la qualit\u00e9 de votre code, et collaborer plus facilement avec d'autres d\u00e9veloppeurs.</p>"},{"location":"Python/Section_01/04_Environnement_virtuel/","title":"4. Environnement virtuel","text":""},{"location":"Python/Section_01/04_Environnement_virtuel/#4-environnement-virtuel","title":"4. Environnement virtuel","text":"<p>En utilisant l'outil pycharm et cr\u00e9er un nouveau projet, notre environnement virutel a \u00e9t\u00e9 cr\u00e9e automatiquement. Et c'est quoi un environnement virtuel ? </p> <p>D\u00e9finition : Un environnement virtuel en Python est un espace isol\u00e9 o\u00f9 vous pouvez installer des paquets Python sp\u00e9cifiques \u00e0 un projet sans affecter les autres projets ou les paquets install\u00e9s globalement sur votre syst\u00e8me. Cela permet de g\u00e9rer diff\u00e9rentes versions de paquets et d\u2019\u00e9viter les conflits de d\u00e9pendances entre projets.</p>"},{"location":"Python/Section_01/04_Environnement_virtuel/#utilite-dun-environnement-virtuel","title":"Utilit\u00e9 d'un Environnement Virtuel","text":"<ol> <li>Isolation des D\u00e9pendances : Chaque projet peut avoir ses propres d\u00e9pendances sp\u00e9cifiques. Un environnement virtuel emp\u00eache les conflits de version de paquets entre projets.</li> <li>Reproductibilit\u00e9 : Facilite la reproduction de l\u2019environnement de d\u00e9veloppement sur d\u2019autres machines en utilisant des fichiers de configuration comme requirements.txt.</li> <li>Gestion de Versions : Permet d\u2019utiliser diff\u00e9rentes versions d\u2019un m\u00eame paquet dans diff\u00e9rents projets.</li> </ol>"},{"location":"Python/Section_01/04_Environnement_virtuel/#installation-dun-environnement-virtuel","title":"Installation d'un Environnement Virtuel","text":"<p>Pour cr\u00e9er et utiliser un environnement virtuel en Python, vous pouvez utiliser le module <code>venv</code> (inclus dans Python 3.3 et versions ult\u00e9rieures) ou <code>virtualenv</code> (disponible pour les versions ant\u00e9rieures et offrant plus de fonctionnalit\u00e9s).</p>"},{"location":"Python/Section_01/04_Environnement_virtuel/#utilisation-de-venv","title":"Utilisation de venv","text":"<ol> <li> <p>Installation : venv est inclus par d\u00e9faut dans Python 3.3 et versions ult\u00e9rieures, donc aucune installation suppl\u00e9mentaire n\u2019est n\u00e9cessaire.</p> </li> <li> <p>Cr\u00e9ation d'un Environnement Virtuel : <code>python -m venv venv</code></p> </li> <li> <p>Activation de l\u2019Environnement Virtuel :</p> <ul> <li>Sur Windows : <code>.\\venv\\Scripts\\activate</code></li> <li>Sur macOS et Linux : <code>source venv/bin/activate</code></li> </ul> </li> <li> <p>D\u00e9sactivation de l\u2019Environnement Virtuel :    <code>deactivate</code></p> </li> </ol>"},{"location":"Python/Section_01/04_Environnement_virtuel/#utilisation-de-virtualenv","title":"Utilisation de virtualenv","text":"<ol> <li> <p>Installation : <code>pip install virtualenv</code></p> </li> <li> <p>Cr\u00e9ation d'un Environnement Virtuel : <code>virtualenv venv</code></p> </li> <li> <p>Activation de l\u2019Environnement Virtuel :</p> <ul> <li>Sur Windows : <code>.\\venv\\Scripts\\activate</code></li> <li>Sur macOS et Linux : <code>source venv/bin/activate</code></li> </ul> </li> <li> <p>D\u00e9sactivation de l\u2019Environnement Virtuel :    <code>deactivate</code></p> </li> </ol>"},{"location":"Python/Section_01/04_Environnement_virtuel/#exemple-pratique","title":"Exemple Pratique","text":"<ol> <li> <p>Cr\u00e9er un Environnement Virtuel : <code>python -m venv venv</code></p> </li> <li> <p>Activer l\u2019Environnement Virtuel :</p> <ul> <li>Sur Windows : <code>.\\venv\\Scripts\\activate</code></li> <li>Sur macOS et Linux : <code>source venv/bin/activate</code></li> </ul> </li> <li> <p>Installer des Paquets :    <code>pip install requests flask</code></p> </li> <li> <p>G\u00e9n\u00e9rer un Fichier de D\u00e9pendances :    <code>pip freeze &gt; requirements.txt</code></p> </li> <li> <p>D\u00e9sactiver l\u2019Environnement Virtuel :    <code>deactivate</code></p> </li> </ol>"},{"location":"Python/Section_01/04_Environnement_virtuel/#en-resume","title":"En r\u00e9sum\u00e9","text":"<p>Ces \u00e9tapes vous permettent de travailler dans un environnement Python isol\u00e9, ce qui am\u00e9liore la gestion et la maintenance de vos projets Python.</p>"},{"location":"Python/Section_02/01_premiers_pas_avec_python/","title":"1. Premiers pas avec Python","text":""},{"location":"Python/Section_02/02_variables_et_types_de_donnees/","title":"2. Variables et Types de Donn\u00e9es","text":""},{"location":"Python/Section_03/1.%20Boucler-avec-while/","title":"Boucler avec while","text":""},{"location":"Python/Section_03/2.%20Boucler-avec-for/","title":"Boucler avec for","text":""},{"location":"Python/Section_04/1.%20Travailler-avec-les-Listes/","title":"Travailler avec les Listes","text":""},{"location":"Python/Section_04/2.%20Explorer-les-Dictionnaires/","title":"Explorer les Dictionnaires","text":""},{"location":"Python/Section_04/3.%20Utiliser-les-Tuples/","title":"Utiliser les Tuples","text":""},{"location":"Python/Section_04/4.%20Les-Sets-en-Python/","title":"Les Sets en Python","text":""},{"location":"Python/Section_04/5.%20Comprehensions-de-Liste/","title":"Compr\u00e9hensions de Liste","text":""},{"location":"Python/Section_05/1.%20Modules-en-Python/","title":"Modules en Python","text":""},{"location":"Python/Section_05/2.%20Packages-en-Python/","title":"Packages en Python","text":""},{"location":"Python/Section_06/1.%20Definir-des-Fonctions/","title":"D\u00e9finir des Fonctions","text":""},{"location":"Python/Section_06/2.%20Gestion-des-Erreurs/","title":"Gestion des Erreurs","text":""},{"location":"Python/Section_07/1.%20Introduction-a-la-POO/","title":"Introduction \u00e0 la POO","text":""},{"location":"Python/Section_07/2.%20Classes-et-Objets/","title":"Classes et Objets","text":""},{"location":"Python/Section_07/3.%20L%27heritage-et-le-Polymorphisme/","title":"L\u2019h\u00e9ritage et le Polymorphisme","text":""},{"location":"Python/Section_07/4.%20Encapsulation-et-Abstraction/","title":"Encapsulation et Abstraction","text":""},{"location":"Python/Section_08/1.%20Iterateurs-et-Generateurs/","title":"It\u00e9rateurs et G\u00e9n\u00e9rateurs","text":""},{"location":"Python/Section_08/2.%20Decorateurs-en-Python/","title":"D\u00e9corateurs en Python","text":""},{"location":"Python/Section_08/3.%20Le-module-Collections/","title":"Le module Collections","text":""},{"location":"Python/Section_08/4.%20Manipulation-de-Fichiers/","title":"Manipulation de Fichiers","text":""},{"location":"Python/Section_08/5.%20Expressions-Regulieres/","title":"Expressions R\u00e9guli\u00e8res","text":""},{"location":"Python/Section_09/1.%20Manipuler-des-Donnees-JSON/","title":"Manipuler des Donn\u00e9es JSON","text":""},{"location":"Python/Section_09/2.%20Base-de-Donnees-SQLite/","title":"Base de Donn\u00e9es SQLite","text":""},{"location":"Python/Section_09/3.%20Modules-Date-et-Temps/","title":"Modules Date et Temps","text":""},{"location":"Python/Section_09/4.%20Mathematiques-avec-Python/","title":"Math\u00e9matiques avec Python","text":""},{"location":"Python/Section_10/1.%20Tests-Unitaires/","title":"Tests Unitaires","text":""},{"location":"Python/Section_10/2.%20Developpement-Guide-par-les-Tests/","title":"D\u00e9veloppement Guid\u00e9 par les Tests","text":""},{"location":"Python/Section_10/3.%20Bonnes-Pratiques-en-Python/","title":"Bonnes Pratiques en Python","text":""},{"location":"Python/Section_11/1.%20Recapitulatif-et-Ressources/","title":"R\u00e9capitulatif et Ressources","text":""},{"location":"blog/","title":"Blog","text":""},{"location":"blog/Exercices/exercices_niveau_debutant/","title":"Niveau D\u00e9butant","text":""},{"location":"blog/Exercices/exercices_niveau_debutant/#niveau-debutant","title":"Niveau D\u00e9butant","text":"<p>Ces exercices permettent de comprendre la cr\u00e9ation, la manipulation et l'utilisation des variables dans diff\u00e9rents contextes.</p> <p>Exercice 1</p> SujetProposition de correction <p>Cr\u00e9ez deux variables :  une qui stocke votre pr\u00e9nom et une autre qui stocke votre \u00e2ge.  Affichez ces variables avec une phrase descriptive.</p> <pre><code>prenom = \"Youssouf\"\nage = 30\nprint(f\"Je m'appelle {prenom} et j'ai {age} ans.\")\n</code></pre> <p>Exercice 2</p> SujetProposition de correction <p>Cr\u00e9ez deux variables contenant chacune un nombre.  Additionnez ces deux nombres et affichez le r\u00e9sultat.</p> <pre><code>nombre1 = 5\nnombre2 = 8\nresultat = nombre1 + nombre2\nprint(\"Le r\u00e9sultat de l'addition est :\", resultat)\n</code></pre> <p>Exercice 3</p> SujetProposition de correction <p>Cr\u00e9ez deux variables contenant des cha\u00eenes de caract\u00e8res et concat\u00e9nez-les (les mettre bout \u00e0 bout) pour former une seule phrase compl\u00e8te.</p> <pre><code>partie1 = \"Bonjour, je suis \"\npartie2 = \"en train d'apprendre Python.\"\nphrase_complete = partie1 + partie2\nprint(phrase_complete)\n</code></pre> <p>Exercice 4</p> SujetProposition de correction <p>\u00c9crivez un script qui demande \u00e0 l'utilisateur de saisir son nom et son ann\u00e9e de naissance, puis calculez son \u00e2ge et affichez-le.</p> <pre><code>nom = input(\"Entrez votre nom : \")\nannee_naissance = int(input(\"Entrez votre ann\u00e9e de naissance : \"))\nage = 2024 - annee_naissance  # Remplacez 2024 par l'ann\u00e9e actuelle\nprint(f\"{nom}, vous avez {age} ans.\")\n</code></pre> <p>Exercice 5</p> SujetProposition de correction <p>Demandez \u00e0 l'utilisateur de saisir un nombre. Si ce nombre est positif, affichez \"Le nombre est positif\".  Si le nombre est z\u00e9ro, affichez \"Le nombre est z\u00e9ro\". Sinon, affichez \"Le nombre est n\u00e9gatif\".</p> <pre><code>nombre = int(input(\"Entrez un nombre : \"))\nif nombre &gt; 0:\n    print(\"Le nombre est positif.\")\nelif nombre == 0:\n    print(\"Le nombre est z\u00e9ro.\")\nelse:\n    print(\"Le nombre est n\u00e9gatif.\")\n</code></pre> <p>Exercice 6</p> SujetProposition de correction <p>\u00c9crivez un programme qui demande \u00e0 l'utilisateur d'entrer une lettre, puis d\u00e9termine si cette lettre est une voyelle ou une consonne.</p> <pre><code># Demander \u00e0 l'utilisateur d'entrer une lettre\nlettre = input(\"Entrez une lettre : \").lower()\n\n# V\u00e9rifier si la lettre est une voyelle ou une consonne\nif lettre in 'aeiou':\n    print(\"La lettre est une voyelle.\")\nelif lettre.isalpha():\n    print(\"La lettre est une consonne.\")\nelse:\n    print(\"Ce n'est pas une lettre valide.\")\n</code></pre> <p>Exercice 7</p> SujetProposition de correction <p>\u00c9crivez un programme pour afficher la table de multiplication de 1 \u00e0 10 pour un nombre donn\u00e9 par l'utilisateur.</p> <pre><code># Demander \u00e0 l'utilisateur d'entrer un nombre\nnombre = int(input(\"Entrez un nombre : \"))\n\n# Afficher la table de multiplication de 1 \u00e0 10 pour ce nombre\nprint(f\"Table de multiplication de {nombre} :\")\nfor i in range(1, 11):\n    print(f\"{nombre} x {i} = {nombre * i}\")\n</code></pre> <p>Exercice 8</p> SujetProposition de corrig\u00e9 <p>\u00c9crivez un programme qui demande \u00e0 l'utilisateur d'entrer son \u00e2ge, puis d\u00e9termine s'il est \u00e9ligible pour voter (l'\u00e2ge de vote est 18 ans ou plus).</p> <pre><code># Demander \u00e0 l'utilisateur d'entrer son \u00e2ge\nage = int(input(\"Entrez votre \u00e2ge : \"))\n\n# V\u00e9rifier l'admissibilit\u00e9 \u00e0 voter\nif age &gt;= 18:\n    print(\"Vous \u00eates \u00e9ligible pour voter.\")\nelse:\n    print(\"Vous n'\u00eates pas \u00e9ligible pour voter.\")\n</code></pre> <p>Exercice 9</p> SujetProposition de corrig\u00e9 <p>\u00c9crivez un programme pour cr\u00e9er liste de fruits : pomme, banane, cerise, orange, et mangue. Utiliser une boucle pour afficher chaque \u00e9l\u00e9ment de la liste</p> <pre><code># Liste de fruits\nfruits = [\"pomme\", \"banane\", \"cerise\", \"orange\", \"mangue\"]\n\n# Utiliser une boucle for pour afficher chaque \u00e9l\u00e9ment de la liste\nfor fruit in fruits:\n    print(fruit)\n</code></pre> <p>Exercice 10</p> SujetProposition de corrig\u00e9 <p>\u00c9crivez une fonction appel\u00e9e factorielle qui prend un nombre entier non n\u00e9gatif en argument et retourne sa factorielle.</p> <pre><code>def factorielle(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorielle(n - 1)\n\n# Exemple d'utilisation\nnombre = int(input(\"Entrez un nombre entier non n\u00e9gatif : \"))\nprint(f\"La factorielle de {nombre} est {factorielle(nombre)}.\")\n</code></pre>"},{"location":"blog/Python/decouvrir_le_langage_python/","title":"D\u00e9couvrir le langage Python","text":""},{"location":"blog/Python/decouvrir_le_langage_python/#decouvrir-le-langage-python","title":"D\u00e9couvrir le langage Python","text":"<p>Utiliser Replit.com pour apprendre le langage Python est une excellente id\u00e9e. Replit est une plateforme en ligne qui permet de coder directement dans le navigateur sans avoir besoin d'installer des outils de d\u00e9veloppement sur votre ordinateur. </p>"},{"location":"blog/Python/decouvrir_le_langage_python/#1-inscription-sur-replitcom","title":"1. Inscription sur Replit.com","text":"<p>Voici un guide \u00e9tape par \u00e9tape pour utiliser Replit.com afin d'apprendre Python :</p> <p>1. Cr\u00e9er un compte sur Replit</p> <ul> <li>Allez sur replit.com.</li> <li>Cliquez sur \"Sign Up\" pour cr\u00e9er un compte. Vous pouvez vous inscrire avec votre adresse e-mail, Google, GitHub ou Facebook.</li> </ul> <p>2. Cr\u00e9er un nouveau projet Python</p> <ul> <li>Une fois connect\u00e9, cliquez sur le bouton \"Create\" dans le coin sup\u00e9rieur droit de l'\u00e9cran.</li> <li>S\u00e9lectionnez \"Python\" dans la liste des langages disponibles.</li> <li>Donnez un nom \u00e0 votre projet et cliquez sur \"Create Repl\".</li> </ul> <p>3. Explorer l'interface de Replit</p> <ul> <li>Code Editor : C'est ici que vous allez \u00e9crire votre code Python.</li> <li>Console : La console est utilis\u00e9e pour voir la sortie de votre code.</li> <li>Files : \u00c0 gauche, vous pouvez g\u00e9rer vos fichiers et dossiers de projet.</li> <li>Packages : Vous pouvez installer des paquets Python en cliquant sur l'ic\u00f4ne des paquets \u00e0 gauche.</li> </ul> <p>4. \u00c9crire et ex\u00e9cuter votre premier programme Python</p> <ul> <li> <p>Dans l'\u00e9diteur de code, \u00e9crivez un simple programme Python. Par exemple :</p> <pre><code>print(\"Hello, World!\")\n</code></pre> </li> <li> <p>Cliquez sur le bouton \"Run\" en haut de l'\u00e9cran pour ex\u00e9cuter votre programme. </p> </li> </ul> <p>La sortie \"Hello, World!\" devrait appara\u00eetre dans la console.</p>"},{"location":"blog/Python/decouvrir_le_langage_python/#2-les-premiers-pas-en-python","title":"2. Les premiers pas en Python","text":"<p>Python est un langage de programmation populaire et puissant qui peut \u00eatre utilis\u00e9 pour une vari\u00e9t\u00e9 de t\u00e2ches, telles que la cr\u00e9ation de scripts, la construction de sites web, le d\u00e9veloppement de logiciels et la data science. Il est facile \u00e0 apprendre et \u00e0 comprendre, ce qui en fait un choix id\u00e9al pour les d\u00e9butants et les professionnels exp\u00e9riment\u00e9s.</p>"},{"location":"blog/Python/decouvrir_le_langage_python/#21-les-chaines-de-caracteres","title":"2.1 Les chaines de caract\u00e8res","text":"<p>Les variables peuvent stocker des cha\u00eenes de caract\u00e8res (strings). Une cha\u00eene de caract\u00e8res est une s\u00e9quence de caract\u00e8res entour\u00e9e de guillemets simples (<code>'</code>) ou doubles (<code>\"</code>).</p> <p>D\u00e9clarer une variable string :</p> <p>Une variable string peut \u00eatre cr\u00e9\u00e9e en lui assignant une valeur de type cha\u00eene de caract\u00e8res.</p> <p>Exemples :</p> <ol> <li> <p>D\u00e9claration : </p><pre><code>player_name = \"Kylian\"\n</code></pre> </li> <li> <p>Afficher la valeur d'une variable string :</p> <p>Utilisez la fonction <code>print()</code> pour afficher la valeur de la variable : </p><pre><code>print(player_name)\n</code></pre> <ul> <li>La sortie sera : <code>Kylian</code></li> </ul> </li> <li> <p>Modifier la valeur d'une variable string :</p> <p>Vous pouvez changer la valeur d'une variable string \u00e0 tout moment : </p><pre><code>player_name = \"Neymar\"\nprint(player_name)\n</code></pre> <ul> <li>La sortie sera : <code>Neymar</code></li> </ul> </li> </ol> <p>Op\u00e9rations sur les Strings :</p> <p>Vous pouvez effectuer plusieurs op\u00e9rations sur les strings, comme la concat\u00e9nation, la r\u00e9p\u00e9tition, et bien plus.</p> <ol> <li> <p>Concat\u00e9nation :     Vous pouvez combiner plusieurs strings en utilisant l'op\u00e9rateur <code>+</code> :     </p><pre><code>first_name = \"Kylian\"\nlast_name = \"Mbapp\u00e9\"\nfull_name = first_name + \" \" + last_name\nprint(full_name)\n</code></pre> <ul> <li>La sortie sera : <code>Kylian Mbapp\u00e9</code></li> </ul> </li> <li> <p>R\u00e9p\u00e9tition :     Vous pouvez r\u00e9p\u00e9ter une string en utilisant l'op\u00e9rateur <code>*</code> :     </p><pre><code>chant = \"Allez les bleus! \"\nprint(chant * 3)\n</code></pre> <ul> <li>La sortie sera : <code>Allez les bleus! Allez les bleus! Allez les bleus!</code></li> </ul> </li> <li> <p>Acc\u00e9der \u00e0 des caract\u00e8res sp\u00e9cifiques :</p> <p>Vous pouvez acc\u00e9der \u00e0 un caract\u00e8re sp\u00e9cifique dans une string en utilisant des indices. Les indices commencent \u00e0 0. </p><pre><code>team = \"Paris\"\nprint(team[0])  # Affiche le premier caract\u00e8re 'P'\nprint(team[1])  # Affiche le deuxi\u00e8me caract\u00e8re 'a'\n</code></pre> </li> <li> <p>Longueur d'une string :</p> <p>Utilisez la fonction <code>len()</code> pour obtenir la longueur d'une string : </p><pre><code>name = \"Mbapp\u00e9\"\nprint(len(name))\n</code></pre> <ul> <li>La sortie sera : <code>6</code></li> </ul> </li> </ol> <p>Ces exemples montrent comment utiliser et manipuler des cha\u00eenes de caract\u00e8res en Python. Continuez \u00e0 pratiquer en essayant de cr\u00e9er des variables string, en les modifiant, et en effectuant diff\u00e9rentes op\u00e9rations sur elles.</p>"},{"location":"blog/Python/decouvrir_le_langage_python/#22-les-nombres","title":"2.2 Les nombres","text":"<p>En Python, les variables peuvent \u00e9galement stocker des nombres, qu'ils soient entiers ou \u00e0 virgule flottante (d\u00e9cimaux). </p> <p>Exemples simples pour vous aider \u00e0 comprendre comment les utiliser :</p> <p>Les Nombres Entiers (int) : Les nombres entiers sont des nombres sans d\u00e9cimales. Ils peuvent \u00eatre positifs ou n\u00e9gatifs \"1, 6, 4, -7, 9, 9\".</p> <p>Exemples :</p> <ol> <li> <p>D\u00e9clarer une variable enti\u00e8re :     </p><pre><code>kylian_number = 7\n</code></pre> </li> <li> <p>Afficher la valeur d'une variable enti\u00e8re :     </p><pre><code>print(kylian_number)\n</code></pre> <ul> <li>La sortie sera : <code>7</code></li> </ul> </li> <li> <p>Modifier la valeur d'une variable enti\u00e8re :     </p><pre><code>kylian_number = 10\nprint(kylian_number)\n</code></pre> <ul> <li>La sortie sera : <code>10</code></li> </ul> </li> </ol> <p>Les Nombres Flottants (float) : Les nombres flottants sont des nombres avec des d\u00e9cimales. Ils permettent de repr\u00e9senter des valeurs plus pr\u00e9cises.</p> <p>Exemples :</p> <ol> <li> <p>D\u00e9clarer une variable flottante :     </p><pre><code>profile = 1.75\n</code></pre> </li> <li> <p>Afficher la valeur d'une variable flottante :     </p><pre><code>print(profile)\n</code></pre> <ul> <li>La sortie sera : <code>1.75</code></li> </ul> </li> <li> <p>Modifier la valeur d'une variable flottante :     </p><pre><code>number_height = 1.80\nprint(number_height)\n</code></pre> <ul> <li>La sortie sera : <code>1.80</code></li> </ul> </li> </ol> <p>En suivant ces exemples, vous pouvez facilement manipuler des nombres entiers et des nombres flottants dans vos programmes Python.</p>"},{"location":"blog/Python/decouvrir_le_langage_python/#23-les-booleens","title":"2.3 Les bool\u00e9ens","text":"<p>Une valeur bool\u00e9enne (bool) repr\u00e9sente l'un des deux \u00e9tats : <code>True</code> (vrai) ou <code>False</code> (faux). Les bool\u00e9ens sont souvent utilis\u00e9s dans les conditions et les boucles pour contr\u00f4ler le flux du programme.</p> <p>D\u00e9clarer une variable bool\u00e9enne :</p> <p>Une variable bool\u00e9enne peut \u00eatre cr\u00e9\u00e9e en lui assignant une valeur de <code>True</code> ou <code>False</code>.</p> <p>Exemples : 1. D\u00e9claration : </p><pre><code>is_winning = True\nis_playing = False\n</code></pre> <ol> <li> <p>Afficher la valeur d'une variable bool\u00e9enne :</p> <p>Utilisez la fonction <code>print()</code> pour afficher la valeur de la variable : </p><pre><code>print(is_winning)\nprint(is_playing)\n</code></pre> <ul> <li>La sortie sera : <code>True</code> puis <code>False</code></li> </ul> </li> <li> <p>Modifier la valeur d'une variable bool\u00e9enne :</p> <p>Vous pouvez changer la valeur d'une variable bool\u00e9enne \u00e0 tout moment : </p><pre><code>is_winning = False\nis_playing = True\nprint(is_winning)\nprint(is_playing)\n</code></pre> - La sortie sera : <code>False</code> puis <code>True</code> </li> </ol> <p>Utilisation des Bool\u00e9ens dans les Conditions</p> <p>Les bool\u00e9ens sont souvent utilis\u00e9s dans les structures de contr\u00f4le comme les instructions <code>if</code>, <code>elif</code>, et <code>else</code>.</p> <ol> <li> <p>Condition simple : </p><pre><code>is_world_cup_final = True\n\nif is_world_cup_final:\n    print(\"C'est la finale de la Coupe du Monde!\")\nelse:\n    print(\"Ce n'est pas la finale de la Coupe du Monde.\")\n</code></pre> <ul> <li>La sortie sera : <code>C'est la finale de la Coupe du Monde!</code></li> </ul> </li> <li> <p>Condition avec comparaison :</p> <p>Vous pouvez utiliser des op\u00e9rateurs de comparaison pour obtenir des valeurs bool\u00e9ennes : </p><pre><code>goals_kylian = 98\ngoals_neymar = 42\n\nis_kylian_winning = goals_kylian &gt; goals_neymar\nprint(is_kylian_winning)\n</code></pre> <ul> <li>La sortie sera : <code>True</code></li> </ul> </li> <li> <p>Combinaison de conditions :</p> <p>Vous pouvez combiner plusieurs conditions en utilisant les op\u00e9rateurs <code>and</code>, <code>or</code>, et <code>not</code> : </p><pre><code>goals_france = 3\ngoals_brazil = 0\n\nis_france_winner = goals_france &gt; goals_brazil\nis_coupe_du_monde = True\n\nif is_france_winner and is_coupe_du_monde:\n    print(\"La France a gagn\u00e9 la Coupe du Monde!\")\nelse:\n    print(\"La France n'a pas gagn\u00e9 la Coupe du Monde.\")\n</code></pre> <ul> <li>La sortie sera : <code>La France a gagn\u00e9 la Coupe du Monde!</code></li> </ul> </li> </ol> <p>Ces exemples montrent comment utiliser et manipuler des variables bool\u00e9ennes en Python, en utilisant des exemples sportifs pertinents comme Kylian Mbapp\u00e9, Neymar, et la Coupe du Monde.</p>"},{"location":"blog/Python/decouvrir_le_langage_python/#24-les-listes","title":"2.4 Les listes","text":"<p>En Python, une liste est une collection ordonn\u00e9e de valeurs, qui peuvent \u00eatre de diff\u00e9rents types (nombres, cha\u00eenes de caract\u00e8res, bool\u00e9ens, etc.). Les listes sont tr\u00e8s flexibles et permettent de stocker plusieurs \u00e9l\u00e9ments dans une seule variable.</p> <p>D\u00e9clarer une liste : Une liste peut \u00eatre cr\u00e9\u00e9e en pla\u00e7ant des valeurs entre crochets <code>[]</code>, s\u00e9par\u00e9es par des virgules.</p> <p>Exemples :</p> <ol> <li> <p>D\u00e9claration d'une liste de joueurs : </p><pre><code>joueurs = [\"Kylian Mbapp\u00e9\", \"Neymar\", \"Lionel Messi\"]\n</code></pre> </li> <li> <p>Afficher la liste enti\u00e8re :</p> <p>Utilisez la fonction <code>print()</code> pour afficher la liste : </p><pre><code>print(joueurs)\n</code></pre> <ul> <li>La sortie sera : <code>['Kylian Mbapp\u00e9', 'Neymar', 'Lionel Messi']</code></li> </ul> </li> <li> <p>Acc\u00e9der \u00e0 des \u00e9l\u00e9ments sp\u00e9cifiques :</p> <p>Vous pouvez acc\u00e9der \u00e0 un \u00e9l\u00e9ment en utilisant son index (les indices commencent \u00e0 0) : </p><pre><code>print(joueurs[0])  # Affiche 'Kylian Mbapp\u00e9'\nprint(joueurs[2])  # Affiche 'Lionel Messi'\n</code></pre> </li> <li> <p>Modifier un \u00e9l\u00e9ment de la liste :</p> <p>Vous pouvez changer la valeur d'un \u00e9l\u00e9ment en utilisant son index : </p><pre><code>joueurs[1] = \"Cristiano Ronaldo\"\nprint(joueurs)\n</code></pre> <ul> <li>La sortie sera : <code>['Kylian Mbapp\u00e9', 'Cristiano Ronaldo', 'Lionel Messi']</code></li> </ul> </li> </ol> <p>Op\u00e9rations Courantes sur les Listes</p> <ol> <li> <p>Ajouter des \u00e9l\u00e9ments \u00e0 une liste :</p> <p>Vous pouvez ajouter des \u00e9l\u00e9ments \u00e0 la fin de la liste en utilisant la m\u00e9thode <code>append()</code> : </p><pre><code>joueurs.append(\"Paul Pogba\")\nprint(joueurs)\n</code></pre> <ul> <li>La sortie sera : <code>['Kylian Mbapp\u00e9', 'Cristiano Ronaldo', 'Lionel Messi', 'Paul Pogba']</code></li> </ul> </li> <li> <p>Ins\u00e9rer des \u00e9l\u00e9ments \u00e0 une position sp\u00e9cifique :</p> <p>Utilisez la m\u00e9thode <code>insert()</code> pour ajouter un \u00e9l\u00e9ment \u00e0 une position sp\u00e9cifique : </p><pre><code>joueurs.insert(1, \"Antoine Griezmann\")\nprint(joueurs)\n</code></pre> <ul> <li>La sortie sera : <code>['Kylian Mbapp\u00e9', 'Antoine Griezmann', 'Cristiano Ronaldo', 'Lionel Messi', 'Paul Pogba']</code></li> </ul> </li> <li> <p>Supprimer des \u00e9l\u00e9ments de la liste :</p> <p>Utilisez la m\u00e9thode <code>remove()</code> pour supprimer un \u00e9l\u00e9ment par sa valeur : </p><pre><code>joueurs.remove(\"Cristiano Ronaldo\")\nprint(joueurs)\n</code></pre> <ul> <li>La sortie sera : <code>['Kylian Mbapp\u00e9', 'Antoine Griezmann', 'Lionel Messi', 'Paul Pogba']</code></li> </ul> <p>Ou utilisez la m\u00e9thode <code>pop()</code> pour supprimer un \u00e9l\u00e9ment par son index : </p><pre><code>joueurs.pop(2)\nprint(joueurs)\n</code></pre> <ul> <li>La sortie sera : <code>['Kylian Mbapp\u00e9', 'Antoine Griezmann', 'Paul Pogba']</code></li> </ul> </li> <li> <p>Longueur de la liste :</p> <p>Utilisez la fonction <code>len()</code> pour obtenir le nombre d'\u00e9l\u00e9ments dans la liste : </p><pre><code>print(len(joueurs))\n</code></pre> <ul> <li>La sortie sera : <code>3</code></li> </ul> </li> <li> <p>Parcourir une liste :</p> <p>Utilisez une boucle <code>for</code> pour parcourir et afficher chaque \u00e9l\u00e9ment de la liste : </p><pre><code>for joueur in joueurs:\n    print(joueur)\n</code></pre> <ul> <li>La sortie sera :   <pre><code>Kylian Mbapp\u00e9\nAntoine Griezmann\nPaul Pogba\n</code></pre></li> </ul> </li> </ol> <p>Ces exemples montrent comment utiliser et manipuler des listes en Python.</p>"},{"location":"blog/Python/decouvrir_le_langage_python/#25-les-dictionnaires","title":"2.5 Les dictionnaires","text":"<p>Un dictionnaire est une collection non ordonn\u00e9e de paires cl\u00e9-valeur. Chaque cl\u00e9 dans un dictionnaire doit \u00eatre unique, mais les valeurs peuvent \u00eatre de n'importe quel type et peuvent \u00eatre dupliqu\u00e9es.</p> <p>D\u00e9clarer un dictionnaire :</p> <p>Un dictionnaire peut \u00eatre cr\u00e9\u00e9 en pla\u00e7ant des paires cl\u00e9-valeur entre des accolades <code>{}</code>, s\u00e9par\u00e9es par des virgules.</p> <p>Exemples :</p> <ol> <li> <p>D\u00e9claration d'un dictionnaire : </p><pre><code>joueur_info = {\n    \"nom\": \"Kylian Mbapp\u00e9\",\n    \"\u00e2ge\": 22,\n    \"\u00e9quipe\": \"Paris Saint-Germain\",\n    \"buts\": 27\n}\n</code></pre> </li> <li> <p>Afficher le dictionnaire entier :</p> <p>Utilisez la fonction <code>print()</code> pour afficher le dictionnaire : </p><pre><code>print(joueur_info)\n</code></pre> <ul> <li>La sortie sera : <code>{'nom': 'Kylian Mbapp\u00e9', '\u00e2ge': 22, '\u00e9quipe': 'Paris Saint-Germain', 'buts': 27}</code></li> </ul> </li> <li> <p>Acc\u00e9der \u00e0 des valeurs sp\u00e9cifiques :</p> <p>Vous pouvez acc\u00e9der \u00e0 une valeur en utilisant sa cl\u00e9 : </p><pre><code>print(joueur_info[\"nom\"])  # Affiche 'Kylian Mbapp\u00e9'\nprint(joueur_info[\"buts\"])  # Affiche 27\n</code></pre> </li> <li> <p>Modifier une valeur :</p> </li> </ol> <p>Vous pouvez changer la valeur d'une cl\u00e9 sp\u00e9cifique :     </p><pre><code>joueur_info[\"buts\"] = 30\nprint(joueur_info)\n</code></pre> <pre><code>- La sortie sera : `{'nom': 'Kylian Mbapp\u00e9', '\u00e2ge': 22, '\u00e9quipe': 'Paris Saint-Germain', 'buts': 30}`\n</code></pre> <p>Op\u00e9rations Courantes sur les Dictionnaires</p> <ol> <li> <p>Ajouter une nouvelle paire cl\u00e9-valeur :</p> <p>Vous pouvez ajouter une nouvelle paire cl\u00e9-valeur en assignant une valeur \u00e0 une nouvelle cl\u00e9 : </p><pre><code>joueur_info[\"position\"] = \"Attaquant\"\nprint(joueur_info)\n</code></pre> <ul> <li>La sortie sera : <code>{'nom': 'Kylian Mbapp\u00e9', '\u00e2ge': 22, '\u00e9quipe': 'Paris Saint-Germain', 'buts': 30, 'position': 'Attaquant'}</code></li> </ul> </li> <li> <p>Supprimer une paire cl\u00e9-valeur :</p> <p>Utilisez la m\u00e9thode <code>pop()</code> pour supprimer une paire cl\u00e9-valeur par sa cl\u00e9 : </p><pre><code>joueur_info.pop(\"\u00e2ge\")\nprint(joueur_info)\n</code></pre> <ul> <li>La sortie sera : <code>{'nom': 'Kylian Mbapp\u00e9', '\u00e9quipe': 'Paris Saint-Germain', 'buts': 30, 'position': 'Attaquant'}</code></li> </ul> </li> <li> <p>Longueur du dictionnaire :</p> <p>Utilisez la fonction <code>len()</code> pour obtenir le nombre de paires cl\u00e9-valeur dans le dictionnaire : </p><pre><code>print(len(joueur_info))\n</code></pre> <ul> <li>La sortie sera : <code>4</code></li> </ul> </li> <li> <p>Parcourir un dictionnaire :</p> <p>Utilisez une boucle <code>for</code> pour parcourir et afficher chaque cl\u00e9 et valeur du dictionnaire : </p><pre><code>for cl\u00e9, valeur in joueur_info.items():\n    print(f\"{cl\u00e9}: {valeur}\")\n</code></pre> <ul> <li>La sortie sera :   <pre><code>nom: Kylian Mbapp\u00e9\n\u00e9quipe: Paris Saint-Germain\nbuts: 30\nposition: Attaquant\n</code></pre></li> </ul> </li> <li> <p>V\u00e9rifier si une cl\u00e9 existe :</p> <p>Utilisez l'op\u00e9rateur <code>in</code> pour v\u00e9rifier si une cl\u00e9 existe dans le dictionnaire : </p><pre><code>if \"nom\" in joueur_info:\n    print(\"Le nom du joueur est:\", joueur_info[\"nom\"])\n</code></pre> </li> </ol> <p>Ces exemples montrent comment utiliser et manipuler des dictionnaires en Python.</p>"},{"location":"blog/Python/decouvrir_le_langage_python/#27-les-sets","title":"2.7 Les sets","text":"<p>En Python, un set est une collection non ordonn\u00e9e et non index\u00e9e d'\u00e9l\u00e9ments uniques. Les sets sont utiles pour stocker des \u00e9l\u00e9ments distincts et effectuer des op\u00e9rations math\u00e9matiques comme l'union, l'intersection, et la diff\u00e9rence.</p> <p>D\u00e9clarer un set :</p> <p>Un set peut \u00eatre cr\u00e9\u00e9 en pla\u00e7ant des \u00e9l\u00e9ments entre accolades <code>{}</code>, s\u00e9par\u00e9s par des virgules.</p> <p>Exemples :</p> <ol> <li> <p>D\u00e9claration d'un set : </p><pre><code>players = {\"Kylian Mbapp\u00e9\", \"Neymar\", \"Lionel Messi\"}\n</code></pre> </li> <li> <p>Afficher le set entier :</p> <p>Utilisez la fonction <code>print()</code> pour afficher le set : </p><pre><code>print(players)\n</code></pre> <ul> <li>La sortie peut \u00eatre dans n'importe quel ordre : <code>{'Neymar', 'Lionel Messi', 'Kylian Mbapp\u00e9'}</code></li> </ul> </li> <li> <p>Ajouter un \u00e9l\u00e9ment \u00e0 un set :</p> <p>Utilisez la m\u00e9thode <code>add()</code> pour ajouter un \u00e9l\u00e9ment : </p><pre><code>players.add(\"Cristiano Ronaldo\")\nprint(players)\n</code></pre> <ul> <li>La sortie sera : <code>{'Neymar', 'Lionel Messi', 'Kylian Mbapp\u00e9', 'Cristiano Ronaldo'}</code></li> </ul> </li> <li> <p>Supprimer un \u00e9l\u00e9ment d'un set :</p> <p>Utilisez la m\u00e9thode <code>remove()</code> pour supprimer un \u00e9l\u00e9ment : </p><pre><code>players.remove(\"Neymar\")\nprint(players)\n</code></pre> <ul> <li>La sortie sera : <code>{'Lionel Messi', 'Kylian Mbapp\u00e9', 'Cristiano Ronaldo'}</code></li> </ul> </li> </ol> <p>Op\u00e9rations Courantes sur les Sets</p> <ol> <li> <p>Union de deux sets :</p> <p>L'union de deux sets retourne un nouveau set contenant tous les \u00e9l\u00e9ments uniques des deux sets. </p><pre><code>players_france = {\"Kylian Mbapp\u00e9\", \"Antoine Griezmann\"}\nplayers_brazil = {\"Neymar\", \"Thiago Silva\"}\n\nall_players = players_france.union(players_brazil)\nprint(all_players)\n</code></pre> <ul> <li>La sortie sera : <code>{'Kylian Mbapp\u00e9', 'Antoine Griezmann', 'Neymar', 'Thiago Silva'}</code></li> </ul> </li> <li> <p>Intersection de deux sets :</p> <p>L'intersection de deux sets retourne un nouveau set contenant les \u00e9l\u00e9ments communs aux deux sets. </p><pre><code>all_players = {\"Kylian Mbapp\u00e9\", \"Neymar\", \"Lionel Messi\", \"Cristiano Ronaldo\"}\ntop_scorers = {\"Kylian Mbapp\u00e9\", \"Lionel Messi\"}\n\ncommon_players = all_players.intersection(top_scorers)\nprint(common_players)\n</code></pre> <ul> <li>La sortie sera : <code>{'Kylian Mbapp\u00e9', 'Lionel Messi'}</code></li> </ul> </li> <li> <p>Diff\u00e9rence de deux sets :</p> <p>La diff\u00e9rence de deux sets retourne un nouveau set contenant les \u00e9l\u00e9ments du premier set qui ne sont pas dans le deuxi\u00e8me set. </p><pre><code>all_players = {\"Kylian Mbapp\u00e9\", \"Neymar\", \"Lionel Messi\", \"Cristiano Ronaldo\"}\nretired_players = {\"Cristiano Ronaldo\"}\n\nactive_players = all_players.difference(retired_players)\nprint(active_players)\n</code></pre> <ul> <li>La sortie sera : <code>{'Kylian Mbapp\u00e9', 'Neymar', 'Lionel Messi'}</code></li> </ul> </li> <li> <p>V\u00e9rifier l'appartenance d'un \u00e9l\u00e9ment \u00e0 un set :</p> <p>Utilisez l'op\u00e9rateur <code>in</code> pour v\u00e9rifier si un \u00e9l\u00e9ment appartient \u00e0 un set : </p><pre><code>if \"Kylian Mbapp\u00e9\" in players:\n    print(\"Kylian Mbapp\u00e9 fait partie des joueurs.\")\n</code></pre> <ul> <li>La sortie sera : <code>Kylian Mbapp\u00e9 fait partie des joueurs.</code></li> </ul> </li> <li> <p>Parcourir un set :</p> <p>Utilisez une boucle <code>for</code> pour parcourir et afficher chaque \u00e9l\u00e9ment du set : </p><pre><code>for player in players:\n    print(player)\n</code></pre> <ul> <li>La sortie sera :   <pre><code>Kylian Mbapp\u00e9\nLionel Messi\nCristiano Ronaldo\n</code></pre></li> </ul> </li> </ol> <p>Ces exemples montrent comment utiliser et manipuler des sets en Python.</p>"},{"location":"blog/Python/decouvrir_le_langage_python/#28-les-tuples","title":"2.8 Les tuples","text":"<p>Un tuple est une collection ordonn\u00e9e et immuable (c'est-\u00e0-dire qu'une fois cr\u00e9\u00e9, il ne peut pas \u00eatre modifi\u00e9). Les tuples sont utiles pour stocker des groupes de valeurs h\u00e9t\u00e9rog\u00e8nes et garantir que les donn\u00e9es restent inchang\u00e9es.</p> <p>D\u00e9clarer un tuple :</p> <p>Un tuple peut \u00eatre cr\u00e9\u00e9 en pla\u00e7ant des \u00e9l\u00e9ments entre parenth\u00e8ses <code>()</code>.</p> <p>Exemples :</p> <ol> <li> <p>D\u00e9claration d'un tuple : </p><pre><code>player_info = (\"Kylian Mbapp\u00e9\", 22, \"Paris Saint-Germain\")\n</code></pre> </li> <li> <p>Afficher le tuple entier :</p> <p>Utilisez la fonction <code>print()</code> pour afficher le tuple : </p><pre><code>print(player_info)\n</code></pre> <ul> <li>La sortie sera : <code>('Kylian Mbapp\u00e9', 22, 'Paris Saint-Germain')</code></li> </ul> </li> <li> <p>Acc\u00e9der \u00e0 des \u00e9l\u00e9ments sp\u00e9cifiques :</p> <p>Vous pouvez acc\u00e9der \u00e0 un \u00e9l\u00e9ment en utilisant son index (les indices commencent \u00e0 0) : </p><pre><code>print(player_info[0])  # Affiche 'Kylian Mbapp\u00e9'\nprint(player_info[2])  # Affiche 'Paris Saint-Germain'\n</code></pre> </li> </ol> <p>Op\u00e9rations Courantes sur les Tuples</p> <ol> <li> <p>Longueur du tuple :</p> <p>Utilisez la fonction <code>len()</code> pour obtenir le nombre d'\u00e9l\u00e9ments dans le tuple : </p><pre><code>print(len(player_info))\n</code></pre> <ul> <li>La sortie sera : <code>3</code></li> </ul> </li> <li> <p>Concat\u00e9ner des tuples :</p> <p>Vous pouvez concat\u00e9ner deux tuples en utilisant l'op\u00e9rateur <code>+</code> : </p><pre><code>player_stats = (30, 10)  # buts, passes d\u00e9cisives\nfull_player_info = player_info + player_stats\nprint(full_player_info)\n</code></pre> <ul> <li>La sortie sera : <code>('Kylian Mbapp\u00e9', 22, 'Paris Saint-Germain', 30, 10)</code></li> </ul> </li> <li> <p>D\u00e9compacter un tuple :</p> <p>Vous pouvez d\u00e9compacter (ou \"unpack\") un tuple en assignant ses \u00e9l\u00e9ments \u00e0 des variables individuelles : </p><pre><code>name, age, team = player_info\nprint(name)  # Affiche 'Kylian Mbapp\u00e9'\nprint(age)   # Affiche 22\nprint(team)  # Affiche 'Paris Saint-Germain'\n</code></pre> </li> <li> <p>V\u00e9rifier l'appartenance d'un \u00e9l\u00e9ment \u00e0 un tuple :</p> <p>Utilisez l'op\u00e9rateur <code>in</code> pour v\u00e9rifier si un \u00e9l\u00e9ment appartient \u00e0 un tuple : </p><pre><code>if \"Kylian Mbapp\u00e9\" in player_info:\n    print(\"Kylian Mbapp\u00e9 fait partie des informations du joueur.\")\n</code></pre> <ul> <li>La sortie sera : <code>Kylian Mbapp\u00e9 fait partie des informations du joueur.</code></li> </ul> </li> <li> <p>Parcourir un tuple :</p> <p>Utilisez une boucle <code>for</code> pour parcourir et afficher chaque \u00e9l\u00e9ment du tuple : </p><pre><code>for info in player_info:\n    print(info)\n</code></pre> <ul> <li>La sortie sera :   <pre><code>Kylian Mbapp\u00e9\n22\nParis Saint-Germain\n</code></pre></li> </ul> </li> <li> <p>Indexation et slicing :</p> </li> </ol> <p>Vous pouvez acc\u00e9der \u00e0 une portion d'un tuple en utilisant la notation de slicing : </p><pre><code>print(player_info[1:])  # Affiche (22, 'Paris Saint-Germain')\n</code></pre> <p>Ces exemples montrent comment utiliser et manipuler des tuples en Python, en utilisant des exemples sportifs pertinents pour rendre les concepts plus compr\u00e9hensibles.</p>"},{"location":"blog/Python/decouvrir_le_langage_python/#29-la-boucle-for","title":"2.9 La boucle <code>for</code>","text":"<p>La boucle <code>for</code> est utilis\u00e9e pour parcourir une s\u00e9quence (comme une liste, un tuple, un dictionnaire, un set ou une cha\u00eene de caract\u00e8res) et ex\u00e9cuter un bloc de code pour chaque \u00e9l\u00e9ment de cette s\u00e9quence.</p> <p>Syntaxe de base d'une boucle <code>for</code> : </p><pre><code>for element in sequence:\n    # bloc de code \u00e0 ex\u00e9cuter pour chaque \u00e9l\u00e9ment\n</code></pre> <p>Exemple</p> <ol> <li> <p>Parcourir une liste </p><pre><code>players = [\"Kylian Mbapp\u00e9\", \"Neymar\", \"Lionel Messi\"]\n\nfor player in players:\n    print(player)\n</code></pre> </li> <li> <p>La sortie sera : </p><pre><code>Kylian Mbapp\u00e9\nNeymar\nLionel Messi\n</code></pre> </li> <li> <p>Parcourir un tuple : </p><pre><code>player_info = (\"Kylian Mbapp\u00e9\", 22, \"Paris Saint-Germain\")\n\nfor info in player_info:\n    print(info)\n</code></pre> </li> <li> <p>La sortie sera : </p><pre><code>Kylian Mbapp\u00e9\n22\nParis Saint-Germain\n</code></pre> </li> </ol>"},{"location":"blog/Python/decouvrir_le_langage_python/#210-la-boucle-while","title":"2.10 La boucle <code>while</code>","text":"<p>La boucle <code>while</code> permet de r\u00e9p\u00e9ter l'ex\u00e9cution d'un bloc de code tant qu'une condition donn\u00e9e est <code>True</code>. La boucle <code>while</code> est particuli\u00e8rement utile lorsque vous ne savez pas \u00e0 l'avance combien de fois le bloc de code doit \u00eatre ex\u00e9cut\u00e9.</p> <p>Syntaxe de base d'une boucle <code>while</code> : </p><pre><code>while condition:\n    # bloc de code \u00e0 ex\u00e9cuter tant que la condition est vraie\n</code></pre> <p>Exemples :</p> <ol> <li> <p>Boucle while simple : </p><pre><code>i = 0\nwhile i &lt; 5:\n    print(i)\n    i += 1\n</code></pre> </li> <li> <p>La sortie sera : </p><pre><code>0\n1\n2\n3\n4\n</code></pre> </li> <li> <p>Utiliser une boucle while pour calculer la somme des premiers nombres entiers : </p><pre><code>n = 10\nsum = 0\ni = 1\n\nwhile i &lt;= n:\n    sum += i\n    i += 1\n\nprint(f\"La somme des premiers {n} nombres entiers est {sum}\")\n</code></pre> </li> <li> <p>La sortie sera : La somme des premiers 10 nombres entiers est 55</p> </li> <li> <p>Utiliser une boucle while avec une condition complexe : </p><pre><code>score = 0\nmax_score = 100\n\nwhile score &lt; max_score:\n    score += 10\n    print(f\"Le score actuel est {score}\")\n</code></pre> </li> <li> <p>La sortie sera :  </p><pre><code>Le score actuel est 10\nLe score actuel est 20\nLe score actuel est 30\nLe score actuel est 40\nLe score actuel est 50\nLe score actuel est 60\nLe score actuel est 70\nLe score actuel est 80\nLe score actuel est 90\nLe score actuel est 100\n</code></pre> </li> </ol> <p>Boucle while avec une Condition d'Arr\u00eat</p> <p>Il est important de s'assurer que la condition de la boucle while deviendra False \u00e0 un moment donn\u00e9 pour \u00e9viter une boucle infinie.</p> <ol> <li> <p>Boucle 'while' avec une condition d'arr\u00eat : </p><pre><code>balance = 1000  # solde initial\ntarget_balance = 2000\ninterest_rate = 0.05  # taux d'int\u00e9r\u00eat annuel\nyears = 0\n\nwhile balance &lt; target_balance:\n    balance += balance * interest_rate\n    years += 1\n\nprint(f\"Il faudra {years} ans pour atteindre un solde de {target_balance} euros.\")\n</code></pre> </li> <li> <p>La sortie sera : 'Il faudra 15 ans pour atteindre un solde de 2000 euros'. </p> </li> </ol> <p>Utilisation de break et continue dans une Boucle while</p> <p>Les instructions break et continue peuvent \u00eatre utilis\u00e9es pour contr\u00f4ler le flux d'ex\u00e9cution \u00e0 l'int\u00e9rieur d'une boucle while.</p> <ol> <li> <p>Utiliser 'break' pour sortir de la boucle : </p><pre><code>i = 0\nwhile i &lt; 10:\n    if i == 5:\n        break\n    print(i)\n    i += 1\n</code></pre> </li> <li> <p>La sortie sera : </p><pre><code>0\n1\n2\n3\n4\n</code></pre> </li> <li> <p>Utiliser continue pour sauter \u00e0 l'it\u00e9ration suivante : </p><pre><code>i = 0\nwhile i &lt; 10:\n    i += 1\n    if i % 2 == 0:\n        continue\n    print(i)\n</code></pre> </li> <li> <p>La sortie sera :  </p><pre><code>1\n3\n5\n7\n9\n</code></pre> </li> </ol> <p>Ces exemples montrent comment utiliser la boucle while en Python, en illustrant les concepts de base et les pratiques courantes pour rendre les boucles plus efficaces et compr\u00e9hensibles.</p>"},{"location":"blog/Python/decouvrir_le_langage_python/#en-resume","title":"En r\u00e9sum\u00e9","text":"<p>Utiliser des tutoriels et des ressources \u00e9ducatives</p> <p>Replit offre plusieurs ressources pour apprendre Python :</p> <ul> <li>Replit Teams for Education : Il y a des cours gratuits que vous pouvez suivre. Vous pouvez acc\u00e9der \u00e0 ces cours en cliquant sur \"Teams\" dans le menu principal.</li> <li>Communaut\u00e9 : Replit a une communaut\u00e9 active o\u00f9 les utilisateurs partagent des projets et des tutoriels. Vous pouvez acc\u00e9der \u00e0 la communaut\u00e9 en cliquant sur \"Community\" dans le menu principal.</li> <li>Docs et Tutoriels : Replit propose une documentation d\u00e9taill\u00e9e et des tutoriels que vous pouvez consulter. Allez sur docs.replit.com pour trouver plus d'informations.</li> </ul> <p>Pratiquer avec des exercices et des projets</p> <p>Pour am\u00e9liorer vos comp\u00e9tences en Python, il est crucial de pratiquer r\u00e9guli\u00e8rement. Voici quelques id\u00e9es :</p> <ul> <li>Exercices : Essayez de r\u00e9soudre des exercices de codage sur des sites comme LeetCode, HackerRank, ou CodeWars.</li> <li>Projets : Cr\u00e9ez de petits projets comme une calculatrice, un jeu simple, ou un scraper web. Cela vous aidera \u00e0 appliquer ce que vous avez appris de mani\u00e8re pratique.</li> </ul> <p>Collaborer et partager</p> <p>Replit permet de collaborer en temps r\u00e9el avec d'autres utilisateurs. Vous pouvez inviter des amis ou des coll\u00e8gues \u00e0 rejoindre votre projet et coder ensemble.</p> <ul> <li>Cliquez sur \"Invite\" en haut \u00e0 droite de votre projet.</li> <li>Entrez l'adresse e-mail des personnes avec qui vous souhaitez collaborer.</li> </ul> <p>Utiliser les fonctionnalit\u00e9s avanc\u00e9es</p> <p>Replit propose plusieurs fonctionnalit\u00e9s avanc\u00e9es, comme l'utilisation de Git pour le contr\u00f4le de version, l'int\u00e9gration continue, et le d\u00e9ploiement d'applications web. Explorer ces fonctionnalit\u00e9s peut \u00eatre tr\u00e8s b\u00e9n\u00e9fique \u00e0 mesure que vous progressez.</p> <p>En suivant ces \u00e9tapes, vous pourrez utiliser Replit.com de mani\u00e8re efficace pour apprendre et ma\u00eetriser Python. Bon apprentissage !</p>"},{"location":"blog/Python/entretien_technique_python/","title":"Entretien technique Python","text":""},{"location":"blog/Python/entretien_technique_python/#entretien-technique-python","title":"Entretien technique Python","text":""},{"location":"blog/Python/entretien_technique_python/#comment-se-demarquer-lors-dun-test-technique","title":"Comment se d\u00e9marquer lors d'un test technique ?","text":"<p>Pour r\u00e9ussir un entretien technique en Python, il est crucial de d\u00e9montrer une compr\u00e9hension approfondie des caract\u00e9ristiques du langage, d'appliquer des pratiques de codage efficaces et d'utiliser des fonctions Python avanc\u00e9es de mani\u00e8re appropri\u00e9e. Voici quelques concepts et techniques sp\u00e9cifiques qui pourraient vous aider \u00e0 vous d\u00e9marquer :</p> <p>range() contre enumerate()</p> <p>range() est souvent utilis\u00e9 pour g\u00e9n\u00e9rer une s\u00e9quence de nombres, ce qui est utile pour it\u00e9rer sur des boucles for par indices.</p> <pre><code>for i in range(5):\n    print(i)  # Affiche les nombres de 0 \u00e0 4\n</code></pre> <p>enumerate() est utile pour obtenir \u00e0 la fois l'index et la valeur des \u00e9l\u00e9ments lors de l'it\u00e9ration sur une liste, ce qui am\u00e9liore la clart\u00e9 et l'efficacit\u00e9.</p> <pre><code>noms = [\"Karim\", \"Youssouf\", \"Moussa\"]\nfor index, nom in enumerate(noms):\n    print(f\"{index}: {nom}\")\n</code></pre> <p>Compr\u00e9hensions de listes et fonctions int\u00e9gr\u00e9es sur les listes</p> <p>Les compr\u00e9hensions de listes offrent une mani\u00e8re concise de cr\u00e9er des listes.</p> <pre><code>carres = [x**2 for x in range(10)]\n</code></pre> <p>Python fournit \u00e9galement plusieurs fonctions int\u00e9gr\u00e9es utiles pour travailler avec des listes, telles que map(), filter(), et sum().</p> <pre><code>impairs = sum(x for x in range(10) if x % 2 != 0)  # Somme des nombres impairs jusqu'\u00e0 9\n</code></pre> <p>print() et point d'arr\u00eat()</p> <p>print() est la fonction de base pour afficher des informations, mais il est essentiel de ne pas en abuser dans le code professionnel.</p> <p>Pour d\u00e9boguer, utilisez les points d'arr\u00eat (breakpoint()) qui sont plus professionnels et permettent d'inspecter l'\u00e9tat du programme sans perturber la sortie.</p> <pre><code>x = \"test\"\nbreakpoint()  # Permet une interaction interactive \u00e0 ce point dans le code\nprint(x)\n</code></pre> <p>f-string</p> <p>Les f-strings, introduites dans Python 3.6, fournissent un moyen simple et efficace de formater des cha\u00eenes de caract\u00e8res.</p> <pre><code>nom = \"Moustapha\"\nmessage = f\"Bonjour, {nom}!\"\nprint(message)  # Affiche \"Bonjour, Moustapha!\"\n</code></pre> <p>Tri</p> <p>Le tri est une op\u00e9ration courante. Utiliser sorted() pour les tris qui ne modifient pas la liste originale, ou .sort() pour modifier la liste originale.</p> <pre><code>liste = [3, 1, 4, 1, 5, 9, 2]\nliste_sorted = sorted(liste)  # Retourne une nouvelle liste tri\u00e9e\nliste.sort()  # Trie la liste sur place\n</code></pre> <p>Tri avec des crit\u00e8res personnalis\u00e9s</p> <pre><code># Tri des noms par leur derni\u00e8re lettre\nnoms = [\"Oumar\", \"Moussa\", \"Salif\"]\nnoms.sort(key=lambda x: x[-1])\nprint(noms)  # ['Moussa', 'Salif', 'Oumar']\n</code></pre>"},{"location":"blog/Python/entretien_technique_python/#concepts-avances-en-python","title":"Concepts Avanc\u00e9s en Python","text":"<p>Ensembles, G\u00e9n\u00e9rateurs, Dictionnaires et Collections, ces structures de donn\u00e9es et mod\u00e8les sont cruciaux pour \u00e9crire un code Python efficace et optimal. Examinons chacun d'eux avec des exemples de code pour mieux comprendre leurs usages et avantages.</p> <p>Ensembles</p> <p>Les ensembles (set en Python) sont des collections non ordonn\u00e9es d'\u00e9l\u00e9ments uniques. Ils sont parfaits pour les op\u00e9rations de membres comme tester l'appartenance, \u00e9liminer les doublons et effectuer des op\u00e9rations math\u00e9matiques comme des unions, intersections, et diff\u00e9rences.</p> <pre><code>mon_ensemble = {1, 2, 3, 4, 5}\nmon_ensemble.add(6)  # Ajoute un \u00e9l\u00e9ment\nprint(mon_ensemble)  # Affiche {1, 2, 3, 4, 5, 6}\n</code></pre> <p>G\u00e9n\u00e9rateurs</p> <p>Les g\u00e9n\u00e9rateurs fournissent une m\u00e9thode pour cr\u00e9er des it\u00e9rateurs de mani\u00e8re efficace en utilisant le mot-cl\u00e9 yield, ce qui permet de g\u00e9n\u00e9rer des s\u00e9quences de valeurs sans les charger enti\u00e8rement en m\u00e9moire.</p> <pre><code>def compteur(max):\n    n = 0\n    while n &lt; max:\n        yield n\n        n += 1\n\nfor i in compteur(5):\n    print(i)  # Affiche les nombres de 0 \u00e0 4\n</code></pre> <p>Dictionnaires et collections.defaultdict</p> <p>Les dictionnaires sont des structures de donn\u00e9es cl\u00e9-valeur. </p> <p>collections.defaultdict est une sous-classe qui fournit une valeur par d\u00e9faut pour les cl\u00e9s qui n'ont pas encore \u00e9t\u00e9 d\u00e9finies. </p><pre><code>from collections import defaultdict\ndico_defaut = defaultdict(int)  # int() retourne 0\ndico_defaut['cl\u00e9'] += 1\nprint(dico_defaut['cl\u00e9'])  # Affiche 1\n</code></pre> <p>collections.Counter est un outil sp\u00e9cialis\u00e9 pour compter des objets hashables. Tr\u00e8s utile pour compter des occurrences d'\u00e9l\u00e9ments. </p><pre><code>from collections import Counter\ncompteur = Counter('banana')\nprint(compteur)  # Affiche Counter({'a': 3, 'n': 2, 'b': 1})\n</code></pre> <p>collections.deque est une liste optimis\u00e9e pour les insertions et suppressions rapides des deux extr\u00e9mit\u00e9s. </p><pre><code>from collections import deque\nd = deque('ghi')  # Cr\u00e9e deque(['g', 'h', 'i'])\nd.append('j')\nd.appendleft('f')\nprint(d)  # Affiche deque(['f', 'g', 'h', 'i', 'j'])\n</code></pre> <p>Les namedtuples permettent d'acc\u00e9der aux champs par nom en plus de l'index, rendant votre code plus lisible par rapport aux tuples normaux. </p><pre><code>from collections import namedtuple\nPoint = namedtuple('Point', ['x', 'y'])\npt = Point(1, 2)\nprint(pt.x, pt.y)  # Affiche 1 2\n</code></pre>"},{"location":"blog/Python/entretien_technique_python/#exploration-des-modules-python","title":"Exploration des modules Python","text":"<p>Python offre plusieurs modules puissants qui facilitent des t\u00e2ches sp\u00e9cifiques en programmation. Voici une pr\u00e9sentation de quelques-uns de ces modules cl\u00e9s et leur utilisation.</p> <p>Module de cha\u00eene (string)</p> <p>Le module string fournit des constantes et des fonctions pour manipuler les objets de type str.</p> <pre><code>import string\n\n# Acc\u00e9der \u00e0 des constantes utiles\nprint(string.ascii_letters)  # abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\nprint(string.digits)         # 0123456789\n\n# Utiliser des fonctions sp\u00e9cifiques\ns = 'hello world'\nprint(string.capwords(s))    # Hello World\n</code></pre> <p>Module itertools</p> <p>Le module itertools est utilis\u00e9 pour cr\u00e9er et manipuler des it\u00e9rateurs complexes de mani\u00e8re efficace. Il offre une vari\u00e9t\u00e9 de fonctions qui permettent de combiner, grouper, et filtrer des donn\u00e9es.</p> <pre><code>import itertools\n\n# Combiner des \u00e9l\u00e9ments de deux listes\nfor pair in itertools.product([1, 2], ['a', 'b']):\n    print(pair)  # (1, 'a'), (1, 'b'), (2, 'a'), (2, 'b')\n\n# G\u00e9n\u00e9rer des permutations\nfor perm in itertools.permutations([1, 2, 3]):\n    print(perm)  # (1, 2, 3), (1, 3, 2), etc.\n</code></pre> <p>Module outils fonctionnels (functools)</p> <p>Le module functools est utilis\u00e9 pour cr\u00e9er des fonctions de haut niveau, c'est-\u00e0-dire des fonctions qui agissent sur ou retournent d'autres fonctions. Les fonctions les plus souvent utilis\u00e9es sont reduce(), partial(), et lru_cache().</p> <pre><code>import functools\n\n# R\u00e9duire une liste pour calculer le produit total\nresult = functools.reduce(lambda x, y: x * y, [1, 2, 3, 4])  # 24\n\n# Utiliser partial pour fixer certains arguments de la fonction\nbase_two = functools.partial(int, base=2)\nprint(base_two('10010'))  # 18\n</code></pre> <p>Module doctest</p> <p>Le module doctest permet de d\u00e9tecter des tests dans les docstrings et de les ex\u00e9cuter pour v\u00e9rifier qu'ils produisent les r\u00e9sultats attendus. C'est un moyen pratique de documenter et tester simultan\u00e9ment.</p> <pre><code>def add(a, b):\n    \"\"\"\n    &gt;&gt;&gt; add(2, 3)\n    5\n    \"\"\"\n    return a + b\n\nimport doctest\ndoctest.testmod()  # Ex\u00e9cute automatiquement les tests dans les docstrings\n</code></pre> <p>D\u00e9clarations assert</p> <p>Les assertions sont des v\u00e9rifications au runtime qui lancent une exception si la condition test\u00e9e est fausse. Elles sont utiles pour s'assurer que des conditions attendues sont remplies au cours de l'ex\u00e9cution du programme.</p> <pre><code>def diviser(a, b):\n    assert b != 0, \"Le d\u00e9nominateur ne doit pas \u00eatre z\u00e9ro\"\n    return a / b\n\ndiviser(10, 2)  # Fonctionne\ndiviser(10, 0)  # L\u00e8ve AssertionError: Le d\u00e9nominateur ne doit pas \u00eatre z\u00e9ro\n</code></pre>"},{"location":"blog/Python/entretien_technique_python/#en-resume","title":"En r\u00e9sum\u00e9","text":"<p>Pour vous d\u00e9marquer lors d'un test technique en Python :</p> <ol> <li>Ma\u00eetrisez les bases : Assurez-vous de comprendre parfaitement les structures de donn\u00e9es de base, les algorithmes, et les idiomes de Python.</li> <li>Pratiquez le code propre : \u00c9crivez du code clair et bien structur\u00e9. Utilisez des noms de variables significatifs et divisez les probl\u00e8mes complexes en fonctions ou classes plus petites.</li> <li>Optimisez votre code : Passez de solutions na\u00efves \u00e0 des solutions plus optimales en expliquant vos choix.</li> <li>Pr\u00e9parez des questions avanc\u00e9es : Soyez pr\u00eat \u00e0 discuter de sujets plus avanc\u00e9s tels que le multithreading, les d\u00e9corateurs, et la gestion de la m\u00e9moire.</li> <li>R\u00e9visez les m\u00e9thodes int\u00e9gr\u00e9es : Connaissez les fonctions et m\u00e9thodes int\u00e9gr\u00e9es qui peuvent simplifier ou acc\u00e9l\u00e9rer votre code.</li> <li>Pr\u00e9parez des exemples de tests : Soyez pr\u00eat \u00e0 \u00e9crire des tests pour votre code lors de l'entretien. Cela montre votre attention au d\u00e9tail et votre engagement envers la qualit\u00e9 du code.</li> </ol>"},{"location":"blog/Python/fonctionnalites_essentielles_du_langage/","title":"Programmation Objet en Python","text":""},{"location":"blog/Python/fonctionnalites_essentielles_du_langage/#programmation-objet-en-python","title":"Programmation Objet en Python","text":""},{"location":"blog/Python/fonctionnalites_essentielles_du_langage/#les-fonctions","title":"Les fonctions","text":"<p>Pour couvrir les concepts des fonctions, des modules et des packages en Python, nous allons explorer chaque sujet un par un avec des exemples pratiques.</p> <p>D\u00e9finition : Une fonction est un bloc de code r\u00e9utilisable qui effectue une t\u00e2che sp\u00e9cifique. Voici comment cr\u00e9er et appeler une fonction en Python.</p> <pre><code>def greet(name):\n    return f\"Hello, {name}!\"\n\n# Appel de la fonction\nprint(greet(\"Alice\"))\n</code></pre> <p>Une fonction peut retourner plusieurs valeurs en utilisant des tuples.</p> <pre><code>def get_name_and_age():\n    name = \"Alice\"\n    age = 30\n    return name, age\n\n# Appel de la fonction\nname, age = get_name_and_age()\nprint(f\"Name: {name}, Age: {age}\")\n</code></pre> <p>Python permet de d\u00e9finir des fonctions qui acceptent plusieurs variables d'arguments.</p> <pre><code>def sum_all(*numbers):\n    return sum(numbers)\n\n# Appel de la fonction\nprint(sum_all(1, 2, 3, 4))\n</code></pre> <p>Les fonctions peuvent avoir des param\u00e8tres par d\u00e9faut et peuvent \u00eatre appel\u00e9es avec des arguments nomm\u00e9s.</p> <pre><code>def greet(name, greeting=\"Hello\"):\n    return f\"{greeting}, {name}!\"\n\n# Appel de la fonction\nprint(greet(\"Alice\"))\nprint(greet(\"Bob\", greeting=\"Hi\"))\n</code></pre>"},{"location":"blog/Python/fonctionnalites_essentielles_du_langage/#les-modules","title":"Les modules","text":"<p>D\u00e9finition : Un module est un fichier contenant du code Python que vous pouvez importer et r\u00e9utiliser dans d'autres scripts.</p> <p>Vous pouvez importer des modules en utilisant l'instruction import. </p><pre><code>import math\n\n# Utilisation d'un module\nprint(math.sqrt(16))\n</code></pre> <p>Vous pouvez \u00e9galement importer des fonctions sp\u00e9cifiques \u00e0 partir d'un module. </p><pre><code>from math import sqrt\n\n# Utilisation d'une fonction import\u00e9e\nprint(sqrt(25))\n</code></pre>"},{"location":"blog/Python/fonctionnalites_essentielles_du_langage/#les-packages","title":"Les packages","text":"<p>D\u00e9finition :  Un package est un r\u00e9pertoire contenant plusieurs modules et un fichier sp\u00e9cial <code>__init__.py</code>.</p> <p>Exemple de cr\u00e9ation de package</p> <ol> <li>Cr\u00e9ez un r\u00e9pertoire nomm\u00e9 mypackage.</li> <li>Ajoutez un fichier <code>__init__.py</code> dans mypackage.</li> <li>Ajoutez un module mymodule.py dans mypackage.</li> </ol> <p>Structure du package: </p><pre><code>mypackage/\n    __init__.py\n    mymodule.py\n</code></pre> <p>Contenu de mymodule.py </p><pre><code>def say_hello(name):\n    return f\"Hello, {name}!\"\n</code></pre> <p>Utilisation du package: </p><pre><code>from mypackage.mymodule import say_hello\n\nprint(say_hello(\"Ousmane\"))\n</code></pre>"},{"location":"blog/Python/fonctionnalites_essentielles_du_langage/#programmation-orientee-objet","title":"Programmation Orient\u00e9e Objet","text":"<p>D\u00e9finition : La programmation orient\u00e9e objet (POO) est une fa\u00e7on de structurer le code en regroupant les donn\u00e9es et les comportements connexes dans des objets. Voici les principaux concepts et techniques de la POO en Python.</p> <p>La conception de classe</p> <p>Une classe est un mod\u00e8le pour cr\u00e9er des objets. Elle d\u00e9finit les attributs et les m\u00e9thodes que les objets cr\u00e9\u00e9s \u00e0 partir de cette classe auront. </p><pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def greet(self):\n        return f\"Hello, my name is {self.name} and I am {self.age} years old.\"\n</code></pre> Les attributs sont des variables qui appartiennent \u00e0 une classe. Les m\u00e9thodes sont des fonctions d\u00e9finies au sein d'une classe. <p>Les constructeurs et les destructeurs</p> <p>Le constructeur <code>__init__</code> initialise les objets. Le destructeur <code>__del__</code> nettoie les objets avant qu'ils ne soient d\u00e9truits.</p> <pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        print(f\"{self.name} is created.\")\n\n    def __del__(self):\n        print(f\"{self.name} is deleted.\")\n</code></pre> <p>L'encapsulation</p> <p>L'encapsulation cache les d\u00e9tails internes d'une classe. Les attributs sont g\u00e9n\u00e9ralement priv\u00e9s et accessibles via des m\u00e9thodes publiques.</p> <pre><code>class Person:\n    def __init__(self, name, age):\n        self._name = name\n        self._age = age\n\n    def get_name(self):\n        return self._name\n\n    def set_name(self, name):\n        self._name = name\n\n    def get_age(self):\n        return self._age\n\n    def set_age(self, age):\n        if age &lt; 0:\n            raise ValueError(\"Age cannot be negative\")\n        self._age = age\n</code></pre> <p>Cr\u00e9er une instance de classe signifie cr\u00e9er un objet bas\u00e9 sur cette classe.</p> <pre><code>person1 = Person(\"Ousmane\", 30)\nprint(person1.greet())\n</code></pre> <p>Les variables de classe sont partag\u00e9es par toutes les instances. Les m\u00e9thodes de classe sont d\u00e9finies \u00e0 l'aide du d\u00e9corateur <code>@classmethod</code>.</p> <pre><code>class Person:\n    population = 0\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        Person.population += 1\n\n    @classmethod\n    def get_population(cls):\n        return cls.population\n</code></pre> <p>L\u2019h\u00e9ritage</p> <p>L'h\u00e9ritage permet \u00e0 une classe de h\u00e9riter les attributs et m\u00e9thodes d'une autre classe.</p> <pre><code>class Employee(Person):\n    def __init__(self, name, age, employee_id):\n        super().__init__(name, age)\n        self.employee_id = employee_id\n\n    def get_employee_id(self):\n        return self.employee_id\n</code></pre> <p>Le polymorphisme</p> <p>Le polymorphisme permet d'utiliser une interface commune pour diff\u00e9rentes classes.</p> <pre><code>class Animal:\n    def speak(self):\n        pass\n\nclass Dog(Animal):\n    def speak(self):\n        return \"Woof!\"\n\nclass Cat(Animal):\n    def speak(self):\n        return \"Meow!\"\n\ndef make_animal_speak(animal):\n    return animal.speak()\n\ndog = Dog()\ncat = Cat()\nprint(make_animal_speak(dog))  # Output: Woof!\nprint(make_animal_speak(cat))  # Output: Meow!\n</code></pre> <p>Les m\u00e9thodes \u00ab magiques \u00bb</p> <p>Les m\u00e9thodes magiques ou dunder methods sont des m\u00e9thodes sp\u00e9ciales entour\u00e9es de double underscores, comme <code>__init__</code>, <code>__str__</code>, etc.</p> <pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __str__(self):\n        return f\"{self.name}, {self.age}\"\n\n    def __eq__(self, other):\n        return self.name == other.name and self.age == other.age\n</code></pre>"},{"location":"blog/Python/fonctionnalites_essentielles_du_langage/#travaux-pratiques","title":"Travaux Pratiques","text":""},{"location":"blog/Python/fonctionnalites_essentielles_du_langage/#systeme-de-gestion-de-bibliotheque","title":"Syst\u00e8me de Gestion de Biblioth\u00e8que","text":"<ul> <li>Cr\u00e9ez une classe Livre avec des attributs tels que titre, auteur, ISBN et disponibilit\u00e9.</li> <li>Cr\u00e9ez une classe Membre avec des attributs comme nom, identifiant de membre, et liste de livres emprunt\u00e9s.</li> <li>Impl\u00e9mentez une classe Bibliotheque qui permet d'ajouter des livres, d'enregistrer des membres, de pr\u00eater des livres et de retourner des livres.</li> </ul>"},{"location":"blog/Python/fonctionnalites_essentielles_du_langage/#systeme-de-gestion-decole","title":"Syst\u00e8me de Gestion d'\u00c9cole","text":"<ul> <li>Cr\u00e9ez une classe Personne avec des attributs comme nom et \u00e2ge.</li> <li>Cr\u00e9ez des classes Etudiant et Professeur qui h\u00e9ritent de Personne. Etudiant aura des attributs comme num\u00e9ro d'\u00e9tudiant et liste de cours inscrits, tandis que Professeur aura des attributs comme identifiant de professeur et liste de cours enseign\u00e9s.</li> <li>Cr\u00e9ez une classe Cours avec des attributs comme nom du cours et liste d'\u00e9tudiants inscrits.</li> <li>Impl\u00e9mentez une classe Ecole qui permet de g\u00e9rer l'inscription des \u00e9tudiants aux cours, d'assigner des professeurs aux cours, etc.</li> </ul>"},{"location":"blog/Python/fonctionnalites_essentielles_du_langage/#gestion-de-parc-de-vehicules","title":"Gestion de Parc de V\u00e9hicules","text":"<ul> <li>Cr\u00e9ez une classe Vehicule avec des attributs tels que marque, mod\u00e8le, ann\u00e9e et disponibilit\u00e9.</li> <li>Cr\u00e9ez des sous-classes Voiture, Camion et Moto qui h\u00e9ritent de Vehicule, avec des attributs suppl\u00e9mentaires sp\u00e9cifiques \u00e0 chaque type de v\u00e9hicule.</li> <li>Impl\u00e9mentez une classe Parc qui permet d'ajouter des v\u00e9hicules, de v\u00e9rifier la disponibilit\u00e9 des v\u00e9hicules et de louer des v\u00e9hicules.</li> </ul>"},{"location":"blog/Python/fonctionnalites_essentielles_du_langage/#systeme-de-reservation-de-vols","title":"Syst\u00e8me de R\u00e9servation de Vols","text":"<ul> <li>Cr\u00e9ez une classe Vol avec des attributs comme num\u00e9ro de vol, destination, date de d\u00e9part, et nombre de si\u00e8ges disponibles.</li> <li>Cr\u00e9ez une classe Passager avec des attributs tels que nom, num\u00e9ro de passeport, et liste de r\u00e9servations.</li> <li>Impl\u00e9mentez une classe CompagnieA\u00e9rienne qui permet d'ajouter des vols, d'enregistrer des passagers, de faire des r\u00e9servations et d'annuler des r\u00e9servations.</li> </ul>"},{"location":"blog/Python/fonctionnalites_essentielles_du_langage/#systeme-de-gestion-de-magasin","title":"Syst\u00e8me de Gestion de Magasin","text":"<ul> <li>Cr\u00e9ez une classe Produit avec des attributs comme nom, prix, et quantit\u00e9 en stock.</li> <li>Cr\u00e9ez une classe Client avec des attributs comme nom, identifiant de client, et historique des achats.</li> <li>Impl\u00e9mentez une classe Magasin qui permet d'ajouter des produits, de g\u00e9rer les stocks, de traiter les achats et de maintenir l'historique des achats des clients.</li> </ul>"},{"location":"blog/Python/fonctionnalites_essentielles_du_langage/#systeme-de-suivi-de-projets","title":"Syst\u00e8me de Suivi de Projets","text":"<ul> <li>Cr\u00e9ez une classe Projet avec des attributs tels que nom du projet, date de d\u00e9but, date de fin, et liste des t\u00e2ches.</li> <li>Cr\u00e9ez une classe Tache avec des attributs comme description, date limite, et statut.</li> <li>Cr\u00e9ez une classe Employe avec des attributs tels que nom, identifiant d'employ\u00e9, et liste de t\u00e2ches assign\u00e9es.</li> <li>Impl\u00e9mentez une classe GestionnaireDeProjet qui permet de cr\u00e9er des projets, d'assigner des t\u00e2ches aux employ\u00e9s, de mettre \u00e0 jour le statut des t\u00e2ches et de suivre l'avancement des projets.</li> </ul>"},{"location":"blog/Python/fonctionnalites_essentielles_du_langage/#exemple-de-realisation-systeme-de-gestion-de-magasin","title":"Exemple de R\u00e9alisation: Syst\u00e8me de Gestion de Magasin","text":"<p>Classe Produit </p><pre><code>class Produit:\n    def __init__(self, nom, prix, quantite):\n        self.nom = nom\n        self.prix = prix\n        self.quantite = quantite\n\n    def afficher_details(self):\n        print(f\"Produit: {self.nom}, Prix: {self.prix}, Quantit\u00e9 en stock: {self.quantite}\")\n\n    def ajuster_quantite(self, quantite):\n        self.quantite += quantite\n\n    def __str__(self):\n        return f\"{self.nom} - {self.prix}\u20ac ({self.quantite} en stock)\"\n</code></pre> <p>Classe Client </p><pre><code>class Client:\n    def __init__(self, nom, identifiant):\n        self.nom = nom\n        self.identifiant = identifiant\n        self.historique_achats = []\n\n    def ajouter_achat(self, produit, quantite):\n        self.historique_achats.append((produit, quantite))\n\n    def afficher_historique(self):\n        print(f\"Historique d'achats de {self.nom}:\")\n        for produit, quantite in self.historique_achats:\n            print(f\"- {produit.nom}: {quantite} \u00e0 {produit.prix}\u20ac chacun\")\n\n    def __str__(self):\n        return f\"Client: {self.nom} (ID: {self.identifiant})\"\n</code></pre> <p>Classe Magasin </p><pre><code>class Magasin:\n    def __init__(self, nom):\n        self.nom = nom\n        self.produits = {}\n        self.clients = {}\n\n    def ajouter_produit(self, produit):\n        if produit.nom in self.produits:\n            self.produits[produit.nom].ajuster_quantite(produit.quantite)\n        else:\n            self.produits[produit.nom] = produit\n\n    def enregistrer_client(self, client):\n        self.clients[client.identifiant] = client\n\n    def traiter_achat(self, identifiant_client, nom_produit, quantite):\n        if identifiant_client in self.clients and nom_produit in self.produits:\n            client = self.clients[identifiant_client]\n            produit = self.produits[nom_produit]\n            if produit.quantite &gt;= quantite:\n                produit.ajuster_quantite(-quantite)\n                client.ajouter_achat(produit, quantite)\n                print(f\"Achat r\u00e9ussi : {quantite} x {produit.nom} pour {client.nom}\")\n            else:\n                print(\"Quantit\u00e9 insuffisante en stock.\")\n        else:\n            print(\"Client ou produit non trouv\u00e9.\")\n\n    def afficher_produits(self):\n        print(f\"Produits disponibles dans le magasin {self.nom}:\")\n        for produit in self.produits.values():\n            produit.afficher_details()\n\n    def __str__(self):\n        return f\"Magasin: {self.nom}\"\n</code></pre> <p>Exemple d'utilisation </p><pre><code># Cr\u00e9ation des produits\nproduit1 = Produit(\"Pain\", 1.0, 50)\nproduit2 = Produit(\"Lait\", 0.8, 30)\n\n# Cr\u00e9ation du magasin\nmagasin = Magasin(\"Chez Nous\")\n\n# Ajout des produits au magasin\nmagasin.ajouter_produit(produit1)\nmagasin.ajouter_produit(produit2)\n\n# Enregistrement d'un client\nclient1 = Client(\"Ousmane\", \"001\")\nmagasin.enregistrer_client(client1)\n\n# Achat d'un produit\nmagasin.traiter_achat(\"001\", \"Pain\", 3)\n\n# Affichage des d\u00e9tails\nmagasin.afficher_produits()\nclient1.afficher_historique()\n</code></pre> <p>Ces travaux pratiques vous permettront de mettre en \u0153uvre les concepts de la programmation orient\u00e9e objet tout en travaillant sur des projets r\u00e9alistes. Vous pouvez ajuster et \u00e9tendre ces exercices pour explorer davantage les capacit\u00e9s de Python.</p>"},{"location":"blog/Python/listes_et_tuples/","title":"Les listes et les tuples","text":""},{"location":"blog/Python/listes_et_tuples/#les-listes-et-les-tuples","title":"Les listes et les tuples","text":"<p>Python offre deux types de donn\u00e9es pour stocker des collections : les listes et les tuples. Les deux permettent de stocker une collection d'\u00e9l\u00e9ments, mais ils diff\u00e8rent principalement par leur mutabilit\u00e9 : les listes sont modifiables alors que les tuples ne le sont pas.</p>"},{"location":"blog/Python/listes_et_tuples/#les-tuples","title":"Les tuples","text":"<p>Consid\u00e9rez les tuples comme des lignes</p> <p>Les tuples sont souvent utilis\u00e9s pour stocker des donn\u00e9es qui ont une structure fixe. Imaginez un tuple comme une ligne dans une base de donn\u00e9es ou une feuille de calcul, o\u00f9 chaque \u00e9l\u00e9ment repr\u00e9sente une donn\u00e9e sp\u00e9cifique d'un enregistrement.</p> <p>Cr\u00e9er des tuples</p> <p>Pour cr\u00e9er un tuple, vous pouvez entourer une s\u00e9quence de valeurs avec des parenth\u00e8ses <code>( )</code>, s\u00e9par\u00e9es par des virgules. </p><pre><code>mon_tuple = (1, 2, 3)\nprint(mon_tuple)  # Affiche (1, 2, 3)\n</code></pre> <p>Tuples et cha\u00eenes d'indexation</p> <p>Les \u00e9l\u00e9ments d'un tuple peuvent \u00eatre acc\u00e9d\u00e9s par leur index, tout comme les listes et les cha\u00eenes. Les index commencent \u00e0 0. </p><pre><code>print(mon_tuple[1])  # Affiche 2\n</code></pre> <p>Trancher les tuples et les cha\u00eenes</p> <p>Le \"slicing\" permet de r\u00e9cup\u00e9rer des sous-parties d'un tuple ou d'une cha\u00eene en sp\u00e9cifiant un d\u00e9but et une fin d'index. </p><pre><code>mon_tuple = (1, 2, 3, 4, 5)\nprint(mon_tuple[1:4])  # Affiche (2, 3, 4)\n</code></pre> <p>Explorez l'immuabilit\u00e9 dans les tuples et les cha\u00eenes</p> <p>Les tuples et les cha\u00eenes sont immuables, ce qui signifie que vous ne pouvez pas modifier leurs \u00e9l\u00e9ments une fois qu'ils sont cr\u00e9\u00e9s. </p><pre><code>mon_tuple[1] = 10  # Cela provoquera une erreur TypeError\n</code></pre> <p>Sachez que les tuples et les cha\u00eenes sont it\u00e9rables</p> <p>Vous pouvez it\u00e9rer sur les \u00e9l\u00e9ments d'un tuple ou d'une cha\u00eene avec une boucle for. </p><pre><code>for item in mon_tuple:\n    print(item)\n</code></pre> <p>D\u00e9compresser les tuples</p> <p>La d\u00e9compression de tuple vous permet d'assigner les \u00e9l\u00e9ments d'un tuple \u00e0 des variables distinctes. </p><pre><code>a, b, c = mon_tuple\nprint(a, b, c)  # Affiche 1 2 3\n</code></pre> <p>Inspecter les types de retour de base de donn\u00e9es</p> <p>Lors de l'utilisation de bases de donn\u00e9es, il est courant de recevoir des donn\u00e9es sous forme de tuples, repr\u00e9sentant des lignes d'une table. </p><pre><code>ligne = (93200, \"Kylian\", \"Mbappe\")\nid, prenom, nom = ligne\nprint(prenom)  # Affiche Kylian\n</code></pre> <p>V\u00e9rifier l'existence des \u00e9l\u00e9ments</p> <p>Utilisez <code>in</code> pour v\u00e9rifier si un \u00e9l\u00e9ment est pr\u00e9sent dans un tuple ou une cha\u00eene. </p><pre><code>if \"Kylian\" in ligne:\n    print(\"Kylian est pr\u00e9sent.\")\n</code></pre> <p>Renvoyer plusieurs valeurs \u00e0 partir d'une fonction</p> <p>Les fonctions peuvent retourner plusieurs valeurs sous forme d'un tuple, qui peut ensuite \u00eatre d\u00e9compos\u00e9 en variables. </p><pre><code>def obtenir_info():\n    return \"Kylian\", \"Mbappe\", 25  # Retourne un tuple\n\nprenom, nom, age = obtenir_info()\nprint(prenom, age)  # Affiche Kylian 25\n</code></pre> <p>Exercice</p> SujetProposition de corrig\u00e9 <p>Voici quelques exercices pour vous entra\u00eener \u00e0 manipuler des tuples :</p> <ol> <li>Cr\u00e9ez un tuple avec les jours de la semaine.</li> <li>Acc\u00e9dez au mercredi dans le tuple.</li> <li>R\u00e9cup\u00e9rez les jours de week-end.</li> <li>V\u00e9rifiez si \"Samedi\" est dans le tuple.</li> <li>Cr\u00e9ez un tuple avec trois nombres : 1, 2, 3 et d\u00e9compressez-les en trois variables.</li> </ol> <pre><code>jours = (\"Lundi\", \"Mardi\", \"Mercredi\", \"Jeudi\", \"Vendredi\", \"Samedi\", \"Dimanche\")\nmercredi = jours[2]\nweekend = jours[5:7]\nprint(\"Samedi\" in jours)  # True\nx, y, z = (1, 2, 3)\nprint(x, y, z)  # Affiche 1 2 3\n</code></pre>"},{"location":"blog/Python/listes_et_tuples/#les-listes","title":"Les listes","text":"<p>Les listes en Python sont des structures de donn\u00e9es flexibles, id\u00e9ales pour stocker une collection ordonn\u00e9e et modifiable d'\u00e9l\u00e9ments. Elles sont similaires aux tableaux dans d'autres langages de programmation mais sont plus puissantes en raison de leur flexibilit\u00e9 et de leur capacit\u00e9 \u00e0 stocker diff\u00e9rents types de donn\u00e9es.</p> <p>Cr\u00e9er des listes</p> <p>Pour cr\u00e9er une liste, utilisez les crochets [ ] et s\u00e9parez les \u00e9l\u00e9ments par des virgules. </p><pre><code>ma_liste = [1, 2, 3, 4, 5]\nprint(ma_liste)  # Affiche [1, 2, 3, 4, 5]\n</code></pre> <p>Travailler avec des listes</p> <p>Les listes sont it\u00e9rables et chaque \u00e9l\u00e9ment peut \u00eatre acc\u00e9d\u00e9 par son index, o\u00f9 l'index commence \u00e0 0. </p><pre><code>print(ma_liste[0])  # Affiche 1\n</code></pre> <p>Modifier des \u00e9l\u00e9ments dans une liste</p> <p>Vous pouvez modifier un \u00e9l\u00e9ment de la liste directement par son index. </p><pre><code>ma_liste[0] = 10\nprint(ma_liste)  # Affiche [10, 2, 3, 4, 5]\n</code></pre> <p>Ajouter et supprimer des \u00e9l\u00e9ments de liste</p> <p>Utilisez append() pour ajouter et remove() pour supprimer un \u00e9l\u00e9ment sp\u00e9cifique. </p><pre><code>ma_liste.append(6)\nprint(ma_liste)  # Affiche [10, 2, 3, 4, 5, 6]\n\nma_liste.remove(6)\nprint(ma_liste)  # Affiche [10, 2, 3, 4, 5]\n</code></pre> <p>Travailler avec des listes de nombres</p> <p>Vous pouvez effectuer des op\u00e9rations telles que le tri ou la recherche de la somme des \u00e9l\u00e9ments. </p><pre><code>print(sum(ma_liste))  # Affiche 24\nma_liste.sort()\nprint(ma_liste)  # Affiche [2, 3, 4, 5, 10]\n</code></pre> <p>Cr\u00e9er des compr\u00e9hensions de liste</p> <p>Les compr\u00e9hensions de liste fournissent une mani\u00e8re concise de cr\u00e9er des listes. </p><pre><code>carres = [x**2 for x in ma_liste]\nprint(carres)  # Affiche [4, 9, 16, 25, 100]\n</code></pre> <p>Imbriquer vos listes</p> <p>Les listes peuvent contenir d'autres listes comme \u00e9l\u00e9ments. </p><pre><code>liste_imbriquee = [1, 2, [3, 4], 5]\nprint(liste_imbriquee)  # Affiche [1, 2, [3, 4], 5]\n</code></pre> <p>Cr\u00e9er une deuxi\u00e8me r\u00e9f\u00e9rence \u00e0 un objet de liste</p> <p>Assigner une liste \u00e0 une nouvelle variable cr\u00e9e une r\u00e9f\u00e9rence \u00e0 l'objet original. </p><pre><code>nouvelle_reference = ma_liste\nnouvelle_reference.append(20)\nprint(ma_liste)  # Affiche [2, 3, 4, 5, 10, 20]\n</code></pre> <p>Cr\u00e9er une copie superficielle d'une liste</p> <p>Une copie superficielle cr\u00e9e une nouvelle liste, mais partage les \u00e9l\u00e9ments internes. </p><pre><code>copie_superficielle = ma_liste[:]\ncopie_superficielle.append(30)\nprint(copie_superficielle)  # Affiche [2, 3, 4, 5, 10, 20, 30]\nprint(ma_liste)             # Affiche [2, 3, 4, 5, 10, 20]\n</code></pre> <p>Cr\u00e9er une copie compl\u00e8te d'une liste</p> <p>Utilisez deepcopy pour les listes imbriqu\u00e9es o\u00f9 les copies ind\u00e9pendantes des sous-listes sont n\u00e9cessaires. </p><pre><code>from copy import deepcopy\ncopie_profonde = deepcopy(liste_imbriquee)\ncopie_profonde[2].append(99)\nprint(copie_profonde)  # Affiche [1, 2, [3, 4, 99], 5]\nprint(liste_imbriquee) # Affiche [1, 2, [3, 4], 5]\n</code></pre> <p>Triez vos listes</p> <p>Utilisez la fonction sort(). </p><pre><code>ma_liste.sort()\nprint(ma_liste)  # Affiche [2, 3, 4, 5, 10, 20]\n</code></pre> <p>Passer une fonction int\u00e9gr\u00e9e pour le tri</p> <p>Tri par longueur d'\u00e9l\u00e9ments ou d'autres crit\u00e8res avec sorted(). </p><pre><code>noms = [\"Yahya\", \"Adama\", \"Zara\"]\nnoms_tries = sorted(noms, key=len)\nprint(noms_tries)  # Affiche ['Zara', 'Yahya', 'Adama']\n</code></pre> <p>Utiliser une fonction personnalis\u00e9e pour le tri</p> <p>D\u00e9finissez une fonction pour sp\u00e9cifier le crit\u00e8re de tri. </p><pre><code>def obtenir_dernier_caractere(chaine):\n    return chaine[-1]\n\nnoms_tries_par_dernier = sorted(noms, key=obtenir_dernier_caractere)\nprint(noms_tries_par_dernier)  # Affiche ['Adama', 'Zara', 'Yahya']\n</code></pre> <p>Exercice</p> SujetProposition de corrig\u00e9 <p>Voici quelques exercices pour vous entra\u00eener \u00e0 manipuler les listes :</p> <ol> <li>Cr\u00e9er et afficher une liste de nombres pairs de 2 jusqu'\u00e0 10.</li> <li>Ajouter un \u00e9l\u00e9ment \u00e0 la liste et supprimer un \u00e9l\u00e9ment de la liste.</li> <li>Trier une liste de cha\u00eenes par la longueur des cha\u00eenes.</li> <li>Utiliser une compr\u00e9hension de liste pour cr\u00e9er une liste des carr\u00e9s des nombres de 1 \u00e0 5.</li> <li>Imbriquer une liste dans une autre liste et acc\u00e9der \u00e0 un \u00e9l\u00e9ment de la liste imbriqu\u00e9e.</li> </ol> <pre><code>pairs = [2, 4, 6, 8, 10]\nprint(pairs) # Affiche [2, 4, 6, 8, 10]\npairs.append(12)\npairs.remove(2)\nnoms.sort(key=len)\ncarres = [x**2 for x in range(1, 6)]\nliste_imbriquee = [[1, 2], [3, 4]]\nprint(liste_imbriquee[1][0])  # Affiche 3\n</code></pre>"},{"location":"blog/Python/listes_et_tuples/#en-resume","title":"En r\u00e9sum\u00e9","text":"<p>Les listes et les tuples sont des structures fondamentales en Python pour la gestion des collections de donn\u00e9es. Les listes sont modifiables et tr\u00e8s flexibles, tandis que les tuples sont immuables et souvent utilis\u00e9s pour les donn\u00e9es qui ne doivent pas \u00eatre modifi\u00e9es apr\u00e8s leur cr\u00e9ation.</p>"}]}